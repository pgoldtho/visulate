<?

 require_once dirname(__FILE__)."/../classes/database/rnt_peoples.class.php";
 require_once dirname(__FILE__)."/../classes/UtlConvert.class.php";
 require_once dirname(__FILE__)."/../classes/SQLExceptionMessage.class.php";
 require_once dirname(__FILE__)."/../classes/database/rnt_business_units.class.php";

require_once dirname(__FILE__)."/../classes/database/rnt_agreement.class.php";
require_once dirname(__FILE__)."/../classes/database/pr_properties.class.php";
require_once dirname(__FILE__)."/../classes/database/rnt_leads.class.php";
require_once dirname(__FILE__)."/../ckeditor/ckeditor.php";

 require_once 'HTML/QuickForm/Renderer/ArraySmarty.php';
 require_once "HTML/QuickForm.php";

 function setForm(&$form, &$data, $form_action, &$date_elements, $currentBUID)
 {
         global $menu;
         global $smarty;
         // set form fields
         // menu 2 level
          $form->AddElement("hidden", $menu->request_menu_level2, $menu->current_level2);

          $form->AddElement("hidden", "PEOPLE_ID");
          $form->AddElement("hidden", "FORM_ACTION", $form_action);
          $form->AddElement("hidden", "BUSINESS_ID", $currentBUID);
          $form->AddElement("hidden", "PEOPLE_BUSINESS_ID");
          $form->AddElement("hidden", "CHECKSUM");
          $form->AddElement("text", "LAST_NAME", "Last Name", array("size"=>20));
          $form->AddElement("text", "FIRST_NAME", "First Name", array("size"=>20));
          $form->AddElement("text", "PHONE1", "Primary Phone", array("size"=>20));
          $form->AddElement("text", "PHONE2", "Secondary Phone", array("size"=>20));
          $form->AddElement("text", "DATE_OF_BIRTH", "Date of Birth", array("size" => 8));
          $date_elements[] = "DATE_OF_BIRTH";
          $form->AddElement("text", "EMAIL_ADDRESS", "E-mail", array("size"=>25));
          $form->AddElement("text", "SSN", "SSN", array("size"=>22));
          $form->AddElement("text", "DRIVERS_LICENSE", "Drivers License", array("size"=>12));
       //   $form->AddElement("advcheckbox", "IS_ENABLED_YN", "Enabled?", "",  array("N", "Y"));
          //$data["IS_ENABLED_YN"] = ($data["IS_ENABLED_YN"] == "Y");
          // require
          $form->addRule("LAST_NAME", "set Last name", 'required');
          $form->addRule("FIRST_NAME", "set First name", 'required');

          // rule for validate
          $form->addRule("EMAIL_ADDRESS", "E-mail is a not valid e-mail addess", "email");
          $form->addRule("DATE_OF_BIRTH", UtlConvert::ErrorDateMsg, 'vdate');
          // Apply filter for all data cells
          $form->applyFilter('__ALL__', 'trim');

          $r = array("onclick" => "return confirm('Delete this record?');");
          if ($form_action == INSERT_ACTION)
             $r = array("disabled");
          $form->AddElement("submit", "delete", "Delete", $r);
          $form->AddElement("submit", "new", "New");
          $form->AddElement("submit", "cancel", "Cancel");

          $form->AddElement("submit", "accept", "Save");
 } // --- function setForm($form, $size)

 function IDinList($array, $id)
 {
    foreach($array as $v)
        if ($v["PEOPLE_ID"] == $id)
           return TRUE;
    return FALSE;
 }



 if (!defined("TENAT_PEOPLE"))
 {
     define("TENANT_PEOPLE", "1");
     define("UPDATE_ACTION", "UPDATE");
     define("DELETE_ACTION", "DELETE");
     define("INSERT_ACTION", "INSERT");
     define("CANCEL_ACTION", "CANCEL");

     define("FIND_PROPERTY_ACTION", "FIND_PROPERTY");
     define("LEAD_DETAILS_SAVE_ACTION", "LEAD_DETAILS_SAVE");
     define("LEAD_ACTIONS_SAVE_ACTION", "LEAD_ACTIONS_SAVE");
 }
 $actions = array(INSERT_ACTION, UPDATE_ACTION, DELETE_ACTION, CANCEL_ACTION);
 $dbPeople = new RNTPeoples($smarty->connection);

 $dbBU = new RNTBusinessUnit($smarty->connection);
 $buList = $dbBU->getBusinessUnitsLevel2();
 $currentBUID = @$_REQUEST["BUSINESS_ID"];
 $isEdit = ($smarty->user->isManager() || $smarty->user->isManagerOwner());

 if (!$currentBUID)
   $currentBUID = @$buList[0]["BUSINESS_ID"];

 foreach($buList as $k=>$v)
 {
    $buList[$k]["PEOPLES"] = array();
    $peopleList = $dbPeople->getList($v["BUSINESS_ID"]);
//    print_r($peopleList);
    foreach($peopleList as $k1=>$v1)
        $buList[$k]["PEOPLES"][] = array("PEOPLE_ID"=>$v1["PEOPLE_ID"], "PEOPLE_NAME"=>$v1["LAST_NAME"]." ".$v1["FIRST_NAME"], "PHONE1"=>$v1["PHONE1"]);
 }

// print_r($buList);
 $form = new HTML_QuickForm('formPeople', 'POST');

 // -----  Append rules
 $form->registerRule('vdate', 'function', 'validateDate');

 $peopleList = $dbPeople->getList($currentBUID);
 $IsPost = $form->isSubmitted();
 $action = @$_REQUEST["action"];
 if (@$_POST["FORM_ACTION"])
    $action = $_POST["FORM_ACTION"];
 if (@$_REQUEST["delete"])
    $action = DELETE_ACTION;
 if (!in_array($action, $actions))
    $action = UPDATE_ACTION;
 $currentPeopleID = @$_REQUEST["PEOPLE_ID"];



 // catch other forms' actions
$extraAction = NULL;
$postedFormName = empty($_POST["FORM_NAME"]) ? "" : $_POST["FORM_NAME"];
switch ($postedFormName) {
    case "FIND_PROPERTY_FORM":
            $extraAction = FIND_PROPERTY_ACTION;
    break;

    case "LEAD_DETAILS_FORM":
            $extraAction = LEAD_DETAILS_SAVE_ACTION;
    break;

    case "LEAD_ACTIONS_FORM":
            $extraAction = LEAD_ACTIONS_SAVE_ACTION;
    break;

    default:
    break;
}
$IsPost = $IsPost && empty($extraAction);




 if ($currentPeopleID == NULL || !IDinList($peopleList, $currentPeopleID))
 {
     if (count($peopleList) == 0)
     {
         $action = INSERT_ACTION;
         $currentPeopleID = -1;
     }
     else
     {
        $currentPeopleID = $peopleList[0]["PEOPLE_ID"];
     }
 }

 // get Tenant Agreements List
 $peopleAgreements = $dbPeople->getTenancyAgreements($currentPeopleID, $currentBUID);

 if (! ( $smarty->user->isOwner() || $smarty->user->isManager() || $smarty->user->isManagerOwner() || $smarty->user->isBookkeeping() || $smarty->user->isBusinessOwner()))
 {
    header("Location: ".$GLOBALS["PATH_FORM_ROOT"]);
    exit;
 }

 if (@$_REQUEST["cancel"])
 {
    header("Location: ".$GLOBALS["PATH_FORM_ROOT"]."?".$menu->getParam2()."&PEOPLE_ID=".$currentPeopleID."&BUSINESS_ID=".$currentBUID);
    exit;
 }

 $form_data = array();
 if ($action == INSERT_ACTION)
 {
     $form_data = array("PEOPLE_ID" => $currentPeopleID, "BUSINESS_ID" => $currentBUID);
 }
 else
 {
     if ($IsPost)
       $form_data = $_POST;
     else
     {
       $form_data = $dbPeople->getPeople($currentPeopleID, $currentBUID);
       $form_data["DATE_OF_BIRTH"] = UtlConvert::dbDateToDisplay($form_data["DATE_OF_BIRTH"]);
     }
 }

 $date_elements = array();
 setForm($form, $form_data, $action, $date_elements, $currentBUID);

 if (!$IsPost)
    $form->setDefaults(@$form_data);

 if ($IsPost && ($form->validate() || $action == DELETE_ACTION))
 {

    // save form to database
    $values = $form->getSubmitValues();
    $newID = -1;
    $IsError = 0;
    try
    {
        if ($action == DELETE_ACTION)
           $dbPeople->Delete($values);
        else
        if ($action == UPDATE_ACTION)
           $dbPeople->Update($values);
        else
        if ($action == INSERT_ACTION)
           $newID = $dbPeople->Insert($values);
        else
           throw new Exception('Unknown operation');

        $smarty->connection->commit();
    }
    catch(SQLException $e)
    {
          $IsError = 1;
          $smarty->connection->rollback();
          $de =  new DatabaseError($smarty->connection);
          $smarty->assign("errorObj", $de->getErrorFromException($e));
    }

    // redirect to page
    if (!$IsError)
    {
       $s = "Location: ".$GLOBALS["PATH_FORM_ROOT"]."?".$menu->getParam2()."&BUSINESS_ID=".$currentBUID;

       if ($action == INSERT_ACTION)
           $currentPeopleID = $newID;

       if ($action == DELETE_ACTION)
          header($s);
       else
       if (@$_REQUEST["new"])
          header($s."&PEOPLE_ID=".$currentPeopleID.'&action='.INSERT_ACTION);
       else
       if (@$action == UPDATE_ACTION)
          header($s."&PEOPLE_ID=".$currentPeopleID);
       if (@$action == INSERT_ACTION)
          header($s."&PEOPLE_ID=".$currentPeopleID);
       exit;
    } // -- if (!$IsError)
 }

 $warning = array("flag" => "", "message" => "");

 if ($action != INSERT_ACTION && $isEdit){
    $cnt = $dbPeople->getBUCount($currentPeopleID);
    if ($cnt > 1)
       $warning = array("flag" => "!", "message" => "Warning: Other business units including this People record.");
    else if ($cnt == 1)
       $warning = array("flag" => "-", "message" => "Only one business unit include the People record.");
 }

 $smarty->assign("warning", $warning);

 $header_title = "People - ";
 if ($action == INSERT_ACTION)
   $header_title .= "New";
 else
   $header_title .= $form_data["LAST_NAME"]." ".$form_data["FIRST_NAME"];
 // create renderer

 $renderer = new HTML_QuickForm_Renderer_ArraySmarty($tpl);
 // generate code
 $form->accept($renderer);

 // send form data to Smarty
 $smarty->assign('action', $action);
 $smarty->assign('form_data', $renderer->toArray());
 $smarty->assign('peopleList', $peopleList);
 $smarty->assign("businessList", $buList);
 $smarty->assign("businessID", $currentBUID);

 $smarty->assign("peopleAgreements",$peopleAgreements);

 // set current record of people
 $smarty->assign("peopleID", $currentPeopleID);
 // Element of form who make date
 $smarty->assign("dates", $date_elements);
 $smarty->assign("header_title", $header_title);
 $smarty->assign("isEdit", $isEdit);


// ------------------------------------------------------------------------------------------------

class FindProperty {

    /**
     * @var FindProperty
     */
    protected static $instance;

    /**
     * @var HTML_QuickForm
     */
    private $form;

    /**
     * @var HTML_QuickForm_Renderer_ArraySmarty
     */
    private $renderer;

    // --------------------------------------------------------------------------------------------

    private function __construct(){}

    // --------------------------------------------------------------------------------------------

    private function __clone()    {}

    // --------------------------------------------------------------------------------------------

    private function __wakeup()   {}

    // --------------------------------------------------------------------------------------------

    /**
     * @return FindProperty
     */
    public static function getInstance() {
        if ( is_null(self::$instance) ) {
            $className = __CLASS__;
            self::$instance = new $className;
        }
        return self::$instance;
    }

    // --------------------------------------------------------------------------------------------

    /**
     * @return $this
     */
    public function buildForm() {
        $this->form = new HTML_QuickForm('formFindProperty', 'POST');

        global $menu;
        $this->form->AddElement("hidden", $menu->request_menu_level2, $menu->current_level2);
        $this->form->AddElement("hidden", "FORM_NAME", "FIND_PROPERTY_FORM");
        $this->form->AddElement("text", "REF_PROPERTY_ID", "Reference Property", array("id"=>"REF_PROPERTY_ID","size"=>20));
        $this->form->AddElement("submit", "findPropertyByRefId", "Find");

        // register rule
        $this->form->registerRule('vinteger', 'function', 'validateInteger');

        // append form rules
        $this->form->addRule('REF_PROPERTY_ID', 'Must be an integer.', 'vinteger', 'client');
        $this->form->applyFilter('__ALL__', 'trim');

        return $this;
    }

    // --------------------------------------------------------------------------------------------

    /**
     * @param $tpl
     * @return $this
     * @throws Exception
     */
    public function renderForm($tpl) {
        $this->renderer = new HTML_QuickForm_Renderer_ArraySmarty($tpl);
        $this->form->accept($this->renderer);
        return $this;
    }

    // --------------------------------------------------------------------------------------------

    /**
     * @return array
     * @throws Exception
     */
    public function toArray() {
        if (empty($this->renderer)) {
            throw new Exception('Unknown renderer for "Find Property" form.');
        }
        return $this->renderer->toArray();
    }

    // --------------------------------------------------------------------------------------------

    public function processForm()
    {
        global $menu;
        global $currentBUID;
        global $currentPeopleID;
        global $extraAction;

        $isFormPosted  = ($extraAction == FIND_PROPERTY_ACTION) && $this->form->isSubmitted();
        $formData      = $isFormPosted ? $_POST : array();
        $refPropertyID = @$_REQUEST["REF_PROPERTY_ID"];

        if ( ! $isFormPosted) {
            $formData["REF_PROPERTY_ID"] = $refPropertyID;
            $this->form->setDefaults($formData);
        }

        if ($isFormPosted) {
            $location = "Location: ".$GLOBALS["PATH_FORM_ROOT"]."?". $menu->getParam2()
                      . "&BUSINESS_ID=".$currentBUID
                      . "&PEOPLE_ID=".$currentPeopleID;

            $formFindPropertyErrors = array();

            if ($this->form->validate()) {
                // redirect after save data
                $location .= "&REF_PROPERTY_ID=".$formData["REF_PROPERTY_ID"];
            }
            else {
                $formFindPropertyErrors[] = $this->form->getElementError("REF_PROPERTY_ID");
            }
            Context::writeValue("formFindPropertyErrors", $formFindPropertyErrors);
            header($location);
            exit;
        }

        global $smarty;
        $dbPrProperties = new PRProperties($smarty->connection);
        $propPhotos     = $dbPrProperties->getPropPhotos($refPropertyID);

        global $tpl;
        $findPropertyFormData = $this->renderForm($tpl)->toArray();
        $smarty->assign('form_find_property_data', $findPropertyFormData);
        $smarty->assign('form_find_property_photos', $propPhotos);
        $smarty->assign('formFindPropertyErrors', Context::readValue("formFindPropertyErrors"));
        Context::writeValue("formFindPropertyErrors", array());
    }
}

FindProperty::getInstance()->buildForm()->processForm();

// ------------------------------------------------------------------------------------------------

class LeadDetails {

    /**
     * @var LeadDetails
     */
    protected static $instance;

    /**
     * @var HTML_QuickForm
     */
    private $form;

    /**
     * @var HTML_QuickForm_Renderer_ArraySmarty
     */
    private $renderer;

    // --------------------------------------------------------------------------------------------

    private function __construct(){}

    // --------------------------------------------------------------------------------------------

    private function __clone()    {}

    // --------------------------------------------------------------------------------------------

    private function __wakeup()   {}

    // --------------------------------------------------------------------------------------------

    /**
     * @return FindProperty
     */
    public static function getInstance() {
        if ( is_null(self::$instance) ) {
            $className = __CLASS__;
            self::$instance = new $className;
        }
        return self::$instance;
    }

    // --------------------------------------------------------------------------------------------

    /**
     * @return $this
     */
    public function buildForm() {
        global $menu;
        global $smarty;

        $this->form = new HTML_QuickForm('formLeadDetails', 'POST');
        $this->form->AddElement("hidden", $menu->request_menu_level2, $menu->current_level2);
        $this->form->AddElement("hidden", "FORM_NAME", "LEAD_DETAILS_FORM");
        $this->form->AddElement("hidden", "LEAD_ID", "");
        $this->form->AddElement("hidden", "PEOPLE_BUSINESS_ID", "");
        $this->form->AddElement("hidden", "LEAD_TYPE", "");
        $this->form->AddElement("hidden", "REF_PROP_ID", "");

        $group[] =& HTML_QuickForm::createElement("radio", "LEAD_STATUS", NULL, " Active", "Active");
        $group[] =& HTML_QuickForm::createElement("radio", "LEAD_STATUS", NULL, " Inactive", "Inactive");
        $this->form->addGroup($group, "status", "Status", "&nbsp;&nbsp;&nbsp;", FALSE);

        $dbPrProperties = new PRProperties($smarty->connection);
        $this->form->AddElement("select", "UCODE", "Property type", $dbPrProperties->getUseCodesList("INSERT"), array("style" => "width:150px;"));

        $this->form->AddElement("text", "FOLLOW_UP", "Follow-Up Every", array("size"=>4));
        $this->form->AddElement("text", "CITY", "City", array("style" => "width:150px;"));
        $this->form->AddElement("text", "MIN_PRICE", "Price Range", array("size"=>10));
        $this->form->AddElement("text", "MAX_PRICE", "to", array("size"=>10));
        $this->form->AddElement("text", "LTV_TARGET", "LTV Target", array("size"=>4));
        $this->form->AddElement("advcheckbox", "LTV_QUALIFIED_YN", "Pre-Approved", "", array("N", "Y"));
        $this->form->AddElement("textarea", "DESCRIPTION", "", array("cols"=>80, "rows"=>"6"));
        $this->form->AddElement("submit", "saveLead", "Save");

        // register rule
        $this->form->registerRule('vinteger', 'function', 'validateInteger');

        // append rules
        $this->form->addRule('REF_PROP_ID', 'Enter Reference Property ID and presses Find.', 'required');
        $this->form->addRule("FOLLOW_UP", 'Value of Follow-Up days must be integer.', 'vinteger');
        $this->form->addRule("MIN_PRICE", 'Value of Prise Range must be numeric.', 'numeric');
        $this->form->addRule("MAX_PRICE", 'Value of Prise Range must be numeric.', 'numeric');

        // append filters
        $this->form->applyFilter('__ALL__', 'trim');

        return $this;
    }

    // --------------------------------------------------------------------------------------------

    /**
     * @param $tpl
     * @return $this
     * @throws Exception
     */
    public function renderForm($tpl) {
        $this->renderer = new HTML_QuickForm_Renderer_ArraySmarty($tpl);
        $this->form->accept($this->renderer);
        return $this;
    }

    // --------------------------------------------------------------------------------------------

    /**
     * @return array
     * @throws Exception
     */
    public function toArray() {
        if (empty($this->renderer)) {
            throw new Exception('Unknown renderer for "Lead Details" form.');
        }
        return $this->renderer->toArray();
    }

    // --------------------------------------------------------------------------------------------

    public function processForm()
    {
        global $menu;
        global $smarty;
        global $currentBUID;
        global $currentPeopleID;
        global $extraAction;

        $isFormPosted  = ($extraAction == LEAD_DETAILS_SAVE_ACTION) && $this->form->isSubmitted();
        $formData      = $isFormPosted ? $this->form->getSubmitValues() : array();
        $refPropertyID = @$_REQUEST["REF_PROPERTY_ID"];

        if ( ! $isFormPosted) {
            $dbPeople   = new RNTPeoples($smarty->connection);
            $peopleInfo = $dbPeople->getPeople($currentPeopleID, $currentBUID);

            $formData["PEOPLE_BUSINESS_ID"] = $peopleInfo["PEOPLE_BUSINESS_ID"];
            $formData["REF_PROP_ID"]        = $refPropertyID;
            $this->form->setDefaults($formData);
        }

        if ($isFormPosted) {
            $location = "Location: ".$GLOBALS["PATH_FORM_ROOT"]."?". $menu->getParam2()
                      . "&BUSINESS_ID=".$currentBUID
                      . "&PEOPLE_ID=".$currentPeopleID;

            $leadDetailsErrors = array();

            if ($this->form->validate()) {
                // save lead details

                $location .= "&REF_PROPERTY_ID=".$formData["REF_PROP_ID"];
            }
            else {
                foreach(array("REF_PROP_ID", "FOLLOW_UP", "MIN_PRICE", "MAX_PRICE") as $element) {
                    $error = $this->form->getElementError($element);
                    if (empty($error)) {
                        continue;
                    }
                    $leadDetailsErrors[] = $error;
                }
            }
            Context::writeValue("leadDetailsErrors", $leadDetailsErrors);
            header($location);
            exit;
        }

        global $tpl;
        $leadDetailsFormData = $this->renderForm($tpl)->toArray();
        $smarty->assign('form_lead_details', $leadDetailsFormData);
        $smarty->assign('leadDetailsErrors', Context::readValue("leadDetailsErrors"));
        Context::writeValue("leadDetailsErrors", array());
    }
}

LeadDetails::getInstance()->buildForm()->processForm();

// ------------------------------------------------------------------------------------------------

class LeadActions {

    /**
     * @var LeadActions
     */
    protected static $instance;

    /**
     * @var HTML_QuickForm
     */
    private $form;

    /**
     * @var HTML_QuickForm_Renderer_ArraySmarty
     */
    private $renderer;

    // --------------------------------------------------------------------------------------------

    private function __construct(){}

    // --------------------------------------------------------------------------------------------

    private function __clone()    {}

    // --------------------------------------------------------------------------------------------

    private function __wakeup()   {}

    // --------------------------------------------------------------------------------------------

    public static function getInstance() {
        if ( is_null(self::$instance) ) {
            $className = __CLASS__;
            self::$instance = new $className;
        }
        return self::$instance;
    }

    // --------------------------------------------------------------------------------------------

    public function buildForm() {
        global $menu;
        global $smarty;

        $this->form = new HTML_QuickForm('formLeadActions', 'POST');
        $this->form->AddElement("hidden", $menu->request_menu_level2, $menu->current_level2);
        $this->form->AddElement("hidden", "FORM_NAME", "LEAD_ACTIONS_FORM");
        $this->form->AddElement("hidden", "LEAD_ID", "");
        $this->form->AddElement("hidden", "ACTION_ID", "");
        $this->form->AddElement("hidden", "ACTION_DATE", "");
        $this->form->AddElement("hidden", "ACTION_TYPE", "");
        $this->form->AddElement("hidden", "BROKER_ID", "");
        $this->form->AddElement("hidden", "DESCRIPTION", "");
      //  $dbAgr = new RNTAgreement($smarty->connection);
      //  $this->form->addElement("select", "TEMPLATE", "", $dbAgr->$dbAgr->getTemplateList(-1));

        return $this;
    }

    // --------------------------------------------------------------------------------------------

    public function renderForm($tpl) {
        $this->renderer = new HTML_QuickForm_Renderer_ArraySmarty($tpl);
        $this->form->accept($this->renderer);
        return $this;
    }

    // --------------------------------------------------------------------------------------------

    public function toArray() {
        if (empty($this->renderer)) {
            throw new Exception('Unknown renderer for "Lead Actions" form.');
        }
        return $this->renderer->toArray();
    }

    // --------------------------------------------------------------------------------------------

    public function processForm()
    {
        global $menu;
        global $smarty;
        global $currentBUID;
        global $currentPeopleID;
        global $extraAction;

        $isFormPosted  = ($extraAction == LEAD_ACTIONS_SAVE_ACTION) && $this->form->isSubmitted();
        $formData      = $isFormPosted ? $this->form->getSubmitValues() : array();
        $refPropertyID = @$_REQUEST["REF_PROPERTY_ID"];

        if ( ! $isFormPosted) {
            $this->form->setDefaults($formData);
        }

        if ($isFormPosted) {
            $location = "Location: ".$GLOBALS["PATH_FORM_ROOT"]."?". $menu->getParam2()
                      . "&BUSINESS_ID=".$currentBUID
                      . "&PEOPLE_ID=".$currentPeopleID;

            if ($this->form->validate()) {
                $postData = $this->form->getSubmitValues();
                // save lead details
            }

            // redirect after save data
            header($location);
            exit;
        }

        global $tpl;
        $leadActionsFormData = $this->renderForm($tpl)->toArray();
        $smarty->assign('form_lead_actions', $leadActionsFormData);
    }
}

LeadActions::getInstance()->buildForm()->processForm();

// ------------------------------------------------------------------------------------------------
?>
