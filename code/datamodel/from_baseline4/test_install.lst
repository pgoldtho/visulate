SQL> @@schema_test.sql
SQL> create user testrntmgr identified by testrntmgr
default tablespace users
temporary tablespace temp
User created.
SQL> alter user testrntmgr quota unlimited on users
User altered.
SQL> grant create session to testrntmgr
Grant complete.
SQL> grant create table to testrntmgr
Grant complete.
SQL> grant create procedure to testrntmgr
Grant complete.
SQL> grant create sequence to testrntmgr
Grant complete.
SQL> grant create view to testrntmgr
Grant complete.
SQL> conn testrntmgr/testrntmgr
Connected as TESTRNTMGR@XE 
SQL> @@tables.sql
SQL> --
SQL> -- Create Schema Script 
SQL> --   Database Version   : 10.2.0.1.0 
SQL> --   TOAD Version       : 9.0.0.160 
SQL> --   DB Connect String  : XE 
SQL> --   Schema             : RNTMGR 
SQL> --   Script Created by  : RNTMGR 
SQL> --   Script Created at  : 05.05.2007 8:24:08 
SQL> --   Physical Location  :  
SQL> --   Notes              :  
SQL> --
SQL> -- Object Counts: 
SQL> --   Indexes: 40        Columns: 60         
SQL> --   Tables: 22         Columns: 157        Constraints: 58     
SQL> --
SQL> -- RNT_BUSINESS_UNITS  (Table) 
SQL> --
SQL> CREATE TABLE RNT_BUSINESS_UNITS
(
  BUSINESS_ID         NUMBER                    NOT NULL,
  BUSINESS_NAME       VARCHAR2(60 BYTE)         NOT NULL,
  PARENT_BUSINESS_ID  NUMBER                    NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
Table created.
SQL> COMMENT ON TABLE RNT_BUSINESS_UNITS IS 'Business units separate properties by ownership or usage.  Property managers who manage properties for more than one person can use business units to separate their properties by owner.    Single owner users may want to divide their properties into different classifications e.g. commercial and residential'
Comment created.
SQL> COMMENT ON COLUMN RNT_BUSINESS_UNITS.BUSINESS_ID IS 'System generated primary key'
Comment created.
SQL> COMMENT ON COLUMN RNT_BUSINESS_UNITS.BUSINESS_NAME IS 'A unique name for the business unit'
Comment created.
SQL> COMMENT ON COLUMN RNT_BUSINESS_UNITS.PARENT_BUSINESS_ID IS 'Parent ID'
Comment created.
SQL> --
SQL> -- RNT_LOOKUP_TYPES  (Table) 
SQL> --
SQL> CREATE TABLE RNT_LOOKUP_TYPES
(
  LOOKUP_TYPE_ID           NUMBER               NOT NULL,
  LOOKUP_TYPE_CODE         VARCHAR2(30 BYTE)    NOT NULL,
  LOOKUP_TYPE_DESCRIPTION  VARCHAR2(80 BYTE)    NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
Table created.
SQL> --
SQL> -- RNT_LOOKUP_VALUES  (Table) 
SQL> --
SQL> CREATE TABLE RNT_LOOKUP_VALUES
(
  LOOKUP_VALUE_ID  NUMBER                       NOT NULL,
  LOOKUP_CODE      VARCHAR2(80 BYTE)            NOT NULL,
  LOOKUP_VALUE     VARCHAR2(80 BYTE),
  LOOKUP_TYPE_ID   NUMBER                       NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
Table created.
SQL> --
SQL> -- RNT_PAYMENT_TYPES  (Table) 
SQL> --
SQL> CREATE TABLE RNT_PAYMENT_TYPES
(
  PAYMENT_TYPE_ID    NUMBER                     NOT NULL,
  PAYMENT_TYPE_NAME  VARCHAR2(30 BYTE)          NOT NULL,
  DEPRECIATION_TERM  NUMBER,
  DESCRIPTION        VARCHAR2(4000 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
Table created.
SQL> COMMENT ON TABLE RNT_PAYMENT_TYPES IS 'Classification table for payments.  Payments must be classified for tax purposes.  This classification affects the period over which a payment can be depreciated.  This allows the cost of a capital improvement to be recognized over the life of the improvement.  For example, the cost of adding a new roof to a building might be depreciated over 10 years.'
Comment created.
SQL> COMMENT ON COLUMN RNT_PAYMENT_TYPES.PAYMENT_TYPE_ID IS 'System generated PK'
Comment created.
SQL> COMMENT ON COLUMN RNT_PAYMENT_TYPES.PAYMENT_TYPE_NAME IS 'Payment classifier'
Comment created.
SQL> COMMENT ON COLUMN RNT_PAYMENT_TYPES.DEPRECIATION_TERM IS 'Tax depreciation term in years for payments of this type'
Comment created.
SQL> COMMENT ON COLUMN RNT_PAYMENT_TYPES.DESCRIPTION IS 'Short description'
Comment created.
SQL> --
SQL> -- RNT_PROPERTIES  (Table) 
SQL> --
SQL> CREATE TABLE RNT_PROPERTIES
(
  PROPERTY_ID        NUMBER                     NOT NULL,
  BUSINESS_ID        NUMBER                     NOT NULL,
  UNITS              NUMBER                     DEFAULT 1                     NOT NULL,
  ADDRESS1           VARCHAR2(60 BYTE)          NOT NULL,
  ADDRESS2           VARCHAR2(60 BYTE),
  CITY               VARCHAR2(60 BYTE)          NOT NULL,
  STATE              VARCHAR2(2 BYTE)           NOT NULL,
  ZIPCODE            NUMBER                     NOT NULL,
  DATE_PURCHASED     DATE                       NOT NULL,
  PURCHASE_PRICE     NUMBER                     NOT NULL,
  LAND_VALUE         NUMBER                     NOT NULL,
  DEPRECIATION_TERM  NUMBER                     DEFAULT 27.5                  NOT NULL,
  YEAR_BUILT         NUMBER,
  BUILDING_SIZE      NUMBER,
  LOT_SIZE           NUMBER,
  DATE_SOLD          DATE,
  SALE_AMOUNT        NUMBER,
  NOTE_YN            VARCHAR2(1 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
Table created.
SQL> COMMENT ON TABLE RNT_PROPERTIES IS 'Record details of buildings that are managed in the system.  Residential properties may contain multiple rentable units'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTIES.PROPERTY_ID IS 'System generated PK'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTIES.BUSINESS_ID IS 'Foreign key to RNT_BUSINESS_UNITS'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTIES.UNITS IS '!may be deleted - we calculate count. A count of the total number of rentable units in the property'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTIES.ADDRESS1 IS 'Address line 1'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTIES.ADDRESS2 IS 'Address line 2'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTIES.DATE_PURCHASED IS 'Date that the property was purchased'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTIES.PURCHASE_PRICE IS 'Price paid'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTIES.LAND_VALUE IS 'Land value at time of purchase'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTIES.DEPRECIATION_TERM IS 'Depreciation term in years, typically 27.5 for residential properties and 39 years for commercial'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTIES.YEAR_BUILT IS 'The year that the property was constructed'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTIES.BUILDING_SIZE IS 'Total conditioned space in square feet'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTIES.LOT_SIZE IS 'in acres e.g. 0.25, 0.125 etc'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTIES.DATE_SOLD IS 'The date this property was sold to another party'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTIES.SALE_AMOUNT IS 'The amount it sold for'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTIES.NOTE_YN IS 'Is there a loan associcate with this sale?'
Comment created.
SQL> --
SQL> -- RNT_PROPERTY_UNITS  (Table) 
SQL> --
SQL> CREATE TABLE RNT_PROPERTY_UNITS
(
  UNIT_ID      NUMBER                           NOT NULL,
  PROPERTY_ID  NUMBER                           NOT NULL,
  UNIT_NAME    VARCHAR2(32 BYTE)                DEFAULT 'Unit 1'              NOT NULL,
  UNIT_SIZE    NUMBER,
  BEDROOMS     NUMBER,
  BATHROOMS    NUMBER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
Table created.
SQL> COMMENT ON TABLE RNT_PROPERTY_UNITS IS 'A rentable unit in a building'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTY_UNITS.UNIT_ID IS 'System generated PK'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTY_UNITS.PROPERTY_ID IS 'The property that this unit exists in'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTY_UNITS.UNIT_NAME IS 'Name of the unit e.g. Unit 1'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTY_UNITS.UNIT_SIZE IS 'Living space in square feet'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTY_UNITS.BEDROOMS IS 'Total of the number of bedrooms in the unit'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTY_UNITS.BATHROOMS IS 'Number of bathrooms'
Comment created.
SQL> --
SQL> -- RNT_PROPERTY_VALUE  (Table) 
SQL> --
SQL> CREATE TABLE RNT_PROPERTY_VALUE
(
  VALUE_ID      NUMBER(8)                       NOT NULL,
  PROPERTY_ID   NUMBER                          NOT NULL,
  VALUE_DATE    DATE                            NOT NULL,
  VALUE_METHOD  VARCHAR2(30 BYTE)               NOT NULL,
  VALUE         NUMBER                          NOT NULL,
  CAP_RATE      NUMBER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
Table created.
SQL> COMMENT ON TABLE RNT_PROPERTY_VALUE IS 'Records the value of a property over time.  Values may be calculated, estimated or actual.  An actual value reflects the price that a property sold for on a given date.  Estimates are produced by evaluating the sale price of similar comparable properties often reffered to as "Comps".  Values can be calculated by  dividing the net operating income by a percentage value known as the capitialization or "CAP" rate.'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTY_VALUE.VALUE_ID IS 'System generated PK'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTY_VALUE.PROPERTY_ID IS 'FK to RNT_PROPERTIES'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTY_VALUE.VALUE_DATE IS 'Date of the valuation'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTY_VALUE.VALUE_METHOD IS 'Method used to evaluate the property value.  Valid values are Sale, Estimate, Cap Rate'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTY_VALUE.VALUE IS 'Estimated value'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTY_VALUE.CAP_RATE IS 'The  cap rate used to calculate the value'
Comment created.
SQL> --
SQL> -- RNT_SUPPLIERS  (Table) 
SQL> --
SQL> CREATE TABLE RNT_SUPPLIERS
(
  SUPPLIER_ID    NUMBER                         NOT NULL,
  NAME           VARCHAR2(60 BYTE)              NOT NULL,
  PHONE1         VARCHAR2(30 BYTE)              NOT NULL,
  PHONE2         VARCHAR2(30 BYTE),
  ADDRESS1       VARCHAR2(60 BYTE),
  ADDRESS2       VARCHAR2(60 BYTE),
  CITY           VARCHAR2(30 BYTE),
  STATE          VARCHAR2(2 BYTE),
  ZIPCODE        NUMBER,
  SSN            VARCHAR2(11 BYTE),
  EMAIL_ADDRESS  VARCHAR2(100 BYTE),
  COMMENTS       VARCHAR2(4000 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
Table created.
SQL> COMMENT ON TABLE RNT_SUPPLIERS IS 'RNT_SUPPLIERS records details of contractors, and service suppliers.  '
Comment created.
SQL> COMMENT ON COLUMN RNT_SUPPLIERS.SUPPLIER_ID IS 'System generated PK'
Comment created.
SQL> COMMENT ON COLUMN RNT_SUPPLIERS.NAME IS 'Contractor Name'
Comment created.
SQL> COMMENT ON COLUMN RNT_SUPPLIERS.PHONE1 IS 'Primary phone number'
Comment created.
SQL> COMMENT ON COLUMN RNT_SUPPLIERS.PHONE2 IS 'Alternate phone number'
Comment created.
SQL> COMMENT ON COLUMN RNT_SUPPLIERS.ADDRESS1 IS 'Address line 1'
Comment created.
SQL> COMMENT ON COLUMN RNT_SUPPLIERS.ADDRESS2 IS 'Address line 2'
Comment created.
SQL> COMMENT ON COLUMN RNT_SUPPLIERS.CITY IS 'City'
Comment created.
SQL> COMMENT ON COLUMN RNT_SUPPLIERS.STATE IS 'State'
Comment created.
SQL> COMMENT ON COLUMN RNT_SUPPLIERS.ZIPCODE IS 'Zipcode'
Comment created.
SQL> COMMENT ON COLUMN RNT_SUPPLIERS.SSN IS 'SSN for non incorporated contractor'
Comment created.
SQL> COMMENT ON COLUMN RNT_SUPPLIERS.EMAIL_ADDRESS IS 'email address'
Comment created.
SQL> COMMENT ON COLUMN RNT_SUPPLIERS.COMMENTS IS 'Notes and comments'
Comment created.
SQL> --
SQL> -- RNT_USER_ROLES  (Table) 
SQL> --
SQL> CREATE TABLE RNT_USER_ROLES
(
  ROLE_ID    NUMBER                             NOT NULL,
  ROLE_CODE  VARCHAR2(10 BYTE)                  NOT NULL,
  ROLE_NAME  VARCHAR2(30 BYTE)                  NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
Table created.
SQL> COMMENT ON TABLE RNT_USER_ROLES IS 'Roles for users.'
Comment created.
SQL> COMMENT ON COLUMN RNT_USER_ROLES.ROLE_ID IS 'Role ID'
Comment created.
SQL> COMMENT ON COLUMN RNT_USER_ROLES.ROLE_CODE IS 'Internal code'
Comment created.
SQL> COMMENT ON COLUMN RNT_USER_ROLES.ROLE_NAME IS 'Display name'
Comment created.
SQL> --
SQL> -- RNT_USERS  (Table) 
SQL> --
SQL> CREATE TABLE RNT_USERS
(
  USER_ID        NUMBER                         NOT NULL,
  USER_LOGIN     VARCHAR2(50 BYTE)              NOT NULL,
  USER_NAME      VARCHAR2(50 BYTE)              NOT NULL,
  USER_PASSWORD  VARCHAR2(64 BYTE)              NOT NULL,
  IS_ACTIVE_YN   VARCHAR2(1 BYTE)               NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
Table created.
SQL> COMMENT ON TABLE RNT_USERS IS 'User who using system'
Comment created.
SQL> COMMENT ON COLUMN RNT_USERS.USER_ID IS 'User ID'
Comment created.
SQL> COMMENT ON COLUMN RNT_USERS.USER_LOGIN IS 'Login for user'
Comment created.
SQL> COMMENT ON COLUMN RNT_USERS.USER_NAME IS 'User name '
Comment created.
SQL> COMMENT ON COLUMN RNT_USERS.USER_PASSWORD IS 'User password'
Comment created.
SQL> COMMENT ON COLUMN RNT_USERS.IS_ACTIVE_YN IS 'Y is user is active, else N'
Comment created.
SQL> --
SQL> -- RNT_USER_ASSIGNMENTS  (Table) 
SQL> --
SQL> CREATE TABLE RNT_USER_ASSIGNMENTS
(
  USER_ASSIGN_ID  NUMBER                        NOT NULL,
  ROLE_ID         NUMBER                        NOT NULL,
  USER_ID         NUMBER                        NOT NULL,
  BUSINESS_ID     NUMBER                        NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
Table created.
SQL> COMMENT ON TABLE RNT_USER_ASSIGNMENTS IS 'User assignments on role. '
Comment created.
SQL> COMMENT ON COLUMN RNT_USER_ASSIGNMENTS.USER_ASSIGN_ID IS 'Assignment ID'
Comment created.
SQL> COMMENT ON COLUMN RNT_USER_ASSIGNMENTS.ROLE_ID IS 'Role ID'
Comment created.
SQL> COMMENT ON COLUMN RNT_USER_ASSIGNMENTS.USER_ID IS 'User ID'
Comment created.
SQL> COMMENT ON COLUMN RNT_USER_ASSIGNMENTS.BUSINESS_ID IS 'Business ID'
Comment created.
SQL> --
SQL> -- RNT_TENANCY_AGREEMENT  (Table) 
SQL> --
SQL> CREATE TABLE RNT_TENANCY_AGREEMENT
(
  AGREEMENT_ID     NUMBER                       NOT NULL,
  UNIT_ID          NUMBER                       NOT NULL,
  AGREEMENT_DATE   DATE,
  TERM             NUMBER                       NOT NULL,
  AMOUNT           NUMBER                       NOT NULL,
  AMOUNT_PERIOD    VARCHAR2(30 BYTE)            NOT NULL,
  DATE_AVAILABLE   DATE                         NOT NULL,
  DEPOSIT          NUMBER,
  LAST_MONTH       NUMBER,
  DISCOUNT_AMOUNT  NUMBER,
  DISCOUNT_TYPE    VARCHAR2(30 BYTE),
  DISCOUNT_PERIOD  NUMBER,
  END_DATE         DATE
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
Table created.
SQL> COMMENT ON TABLE RNT_TENANCY_AGREEMENT IS 'An agreement between two or more parties to rent a building or a unit in a building.  Agreements are typically fixed length 12 month agreements or month to month.  A  discount may be applied for prompt payment.  Alternatively, a late fee could be charged if a payment id overdue.  The discount amount column records the value of this charge and the discount type identifies the type Fee or Discount'
Comment created.
SQL> COMMENT ON COLUMN RNT_TENANCY_AGREEMENT.END_DATE IS 'End effective date for agreement.'
Comment created.
SQL> COMMENT ON COLUMN RNT_TENANCY_AGREEMENT.AGREEMENT_ID IS 'System generated PK'
Comment created.
SQL> COMMENT ON COLUMN RNT_TENANCY_AGREEMENT.UNIT_ID IS 'fk to identify unit rented'
Comment created.
SQL> COMMENT ON COLUMN RNT_TENANCY_AGREEMENT.AGREEMENT_DATE IS 'Date that the agreement was signed '
Comment created.
SQL> COMMENT ON COLUMN RNT_TENANCY_AGREEMENT.TERM IS 'Duration of the agreement in months'
Comment created.
SQL> COMMENT ON COLUMN RNT_TENANCY_AGREEMENT.AMOUNT IS 'Rent amount'
Comment created.
SQL> COMMENT ON COLUMN RNT_TENANCY_AGREEMENT.AMOUNT_PERIOD IS 'period that rent is due '
Comment created.
SQL> COMMENT ON COLUMN RNT_TENANCY_AGREEMENT.DEPOSIT IS 'The required deposit amount'
Comment created.
SQL> COMMENT ON COLUMN RNT_TENANCY_AGREEMENT.LAST_MONTH IS 'Requied last month amount'
Comment created.
SQL> COMMENT ON COLUMN RNT_TENANCY_AGREEMENT.DISCOUNT_AMOUNT IS 'Prompt payment discount or late fee amount'
Comment created.
SQL> COMMENT ON COLUMN RNT_TENANCY_AGREEMENT.DISCOUNT_TYPE IS 'Discount or late fee'
Comment created.
SQL> COMMENT ON COLUMN RNT_TENANCY_AGREEMENT.DISCOUNT_PERIOD IS 'Number of days before adjustement is applied'
Comment created.
SQL> --
SQL> -- RNT_PEOPLE  (Table) 
SQL> --
SQL> CREATE TABLE RNT_PEOPLE
(
  PEOPLE_ID        NUMBER                       NOT NULL,
  FIRST_NAME       VARCHAR2(30 BYTE)            NOT NULL,
  LAST_NAME        VARCHAR2(30 BYTE)            NOT NULL,
  PHONE1           VARCHAR2(16 BYTE),
  PHONE2           VARCHAR2(16 BYTE),
  EMAIL_ADDRESS    VARCHAR2(100 BYTE),
  SSN              VARCHAR2(11 BYTE),
  DRIVERS_LICENSE  VARCHAR2(100 BYTE),
  BUSINESS_ID      NUMBER                       NOT NULL,
  IS_ENABLED_YN    VARCHAR2(1 BYTE)             NOT NULL,
  DATE_OF_BIRTH    DATE
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
Table created.
SQL> COMMENT ON COLUMN RNT_PEOPLE.PEOPLE_ID IS 'Primary Key '
Comment created.
SQL> COMMENT ON COLUMN RNT_PEOPLE.FIRST_NAME IS 'First of given name'
Comment created.
SQL> COMMENT ON COLUMN RNT_PEOPLE.LAST_NAME IS 'Surname'
Comment created.
SQL> COMMENT ON COLUMN RNT_PEOPLE.PHONE1 IS 'Primary phone number'
Comment created.
SQL> COMMENT ON COLUMN RNT_PEOPLE.PHONE2 IS 'Secondary phone number'
Comment created.
SQL> COMMENT ON COLUMN RNT_PEOPLE.EMAIL_ADDRESS IS 'Email address'
Comment created.
SQL> COMMENT ON COLUMN RNT_PEOPLE.SSN IS 'SSN '
Comment created.
SQL> COMMENT ON COLUMN RNT_PEOPLE.DRIVERS_LICENSE IS 'DL number'
Comment created.
SQL> COMMENT ON COLUMN RNT_PEOPLE.IS_ENABLED_YN IS 'If N then this record not available for new record'
Comment created.
SQL> COMMENT ON COLUMN RNT_PEOPLE.DATE_OF_BIRTH IS 'Data of birth'
Comment created.
SQL> COMMENT ON COLUMN RNT_PEOPLE.BUSINESS_ID IS 'Business unit ID for manager who created this record'
Comment created.
SQL> --
SQL> -- RNT_SECTION8_OFFICES  (Table) 
SQL> --
SQL> CREATE TABLE RNT_SECTION8_OFFICES
(
  SECTION8_ID   NUMBER                          NOT NULL,
  SECTION_NAME  VARCHAR2(30 BYTE)               NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
Table created.
SQL> COMMENT ON COLUMN RNT_SECTION8_OFFICES.SECTION8_ID IS 'ID of section 8'
Comment created.
SQL> COMMENT ON COLUMN RNT_SECTION8_OFFICES.SECTION_NAME IS 'Section name'
Comment created.
SQL> --
SQL> -- RNT_AGREEMENT_ACTIONS  (Table) 
SQL> --
SQL> CREATE TABLE RNT_AGREEMENT_ACTIONS
(
  ACTION_ID       NUMBER                        NOT NULL,
  AGREEMENT_ID    NUMBER                        NOT NULL,
  ACTION_DATE     DATE                          NOT NULL,
  ACTION_TYPE     VARCHAR2(30 BYTE)             NOT NULL,
  COMMENTS        VARCHAR2(4000 BYTE),
  RECOVERABLE_YN  VARCHAR2(1 BYTE)              NOT NULL,
  ACTION_COST     NUMBER                        NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
Table created.
SQL> COMMENT ON TABLE RNT_AGREEMENT_ACTIONS IS 'Evictions and court orders associated with a tenancy agreement'
Comment created.
SQL> COMMENT ON COLUMN RNT_AGREEMENT_ACTIONS.ACTION_COST IS 'Cost for action'
Comment created.
SQL> COMMENT ON COLUMN RNT_AGREEMENT_ACTIONS.RECOVERABLE_YN IS 'Recoverable flag'
Comment created.
SQL> COMMENT ON COLUMN RNT_AGREEMENT_ACTIONS.ACTION_ID IS 'System generated PK'
Comment created.
SQL> COMMENT ON COLUMN RNT_AGREEMENT_ACTIONS.AGREEMENT_ID IS 'FK to RNT_TENANCY_AGREEMENT'
Comment created.
SQL> COMMENT ON COLUMN RNT_AGREEMENT_ACTIONS.ACTION_DATE IS 'Date that action was performed'
Comment created.
SQL> COMMENT ON COLUMN RNT_AGREEMENT_ACTIONS.ACTION_TYPE IS 'Action Classification'
Comment created.
SQL> COMMENT ON COLUMN RNT_AGREEMENT_ACTIONS.COMMENTS IS 'Short description'
Comment created.
SQL> --
SQL> -- RNT_LOANS  (Table) 
SQL> --
SQL> CREATE TABLE RNT_LOANS
(
  LOAN_ID             NUMBER                    NOT NULL,
  PROPERTY_ID         NUMBER                    NOT NULL,
  POSITION            NUMBER                    NOT NULL,
  LOAN_DATE           DATE                      NOT NULL,
  LOAN_AMOUNT         NUMBER                    NOT NULL,
  TERM                NUMBER                    NOT NULL,
  INTEREST_RATE       NUMBER                    NOT NULL,
  CREDIT_LINE_YN      VARCHAR2(1 BYTE)          NOT NULL,
  ARM_YN              VARCHAR2(1 BYTE)          NOT NULL,
  BALLOON_DATE        DATE,
  AMORTIZATION_START  DATE,
  SETTLEMENT_DATE     DATE
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
Table created.
SQL> COMMENT ON TABLE RNT_LOANS IS 'Properties are typically purchased using using loans which are secured against the property.  Credit lines may be extended against properties which are already owned to release equity for other purchases.    Loans can be adjustable rate (ARM) or fixed rate mortgages.  Balloon mortgages are loans where the balance of the loan becomes due before the the end of the term.  '
Comment created.
SQL> COMMENT ON COLUMN RNT_LOANS.LOAN_ID IS 'System generate PK'
Comment created.
SQL> COMMENT ON COLUMN RNT_LOANS.PROPERTY_ID IS 'The property that this loan was secured against'
Comment created.
SQL> COMMENT ON COLUMN RNT_LOANS.POSITION IS 'Is this the 1st, 2nd or 3rd loan secured against this property'
Comment created.
SQL> COMMENT ON COLUMN RNT_LOANS.LOAN_DATE IS 'Date that the loan was made'
Comment created.
SQL> COMMENT ON COLUMN RNT_LOANS.LOAN_AMOUNT IS 'Amount borrowed'
Comment created.
SQL> COMMENT ON COLUMN RNT_LOANS.TERM IS 'The time in years that the loan must be repaid'
Comment created.
SQL> COMMENT ON COLUMN RNT_LOANS.INTEREST_RATE IS 'The current interest rate for the loan'
Comment created.
SQL> COMMENT ON COLUMN RNT_LOANS.CREDIT_LINE_YN IS 'Is this loan a line of credit?'
Comment created.
SQL> COMMENT ON COLUMN RNT_LOANS.ARM_YN IS 'Is the interest rate adjustable?'
Comment created.
SQL> COMMENT ON COLUMN RNT_LOANS.BALLOON_DATE IS 'The date that the full amount of this loan becomes due for a balloon mortgage'
Comment created.
SQL> COMMENT ON COLUMN RNT_LOANS.AMORTIZATION_START IS 'The data that amortization of this loan will begin'
Comment created.
SQL> COMMENT ON COLUMN RNT_LOANS.SETTLEMENT_DATE IS 'The date that this loan was settled'
Comment created.
SQL> --
SQL> -- RNT_PROPERTY_EXPENSES  (Table) 
SQL> --
SQL> CREATE TABLE RNT_PROPERTY_EXPENSES
(
  EXPENSE_ID         NUMBER                     NOT NULL,
  PROPERTY_ID        NUMBER                     NOT NULL,
  EVENT_DATE         DATE                       NOT NULL,
  DESCRIPTION        VARCHAR2(4000 BYTE)        NOT NULL,
  RECURRING_YN       VARCHAR2(1 BYTE)           DEFAULT 'N'                   NOT NULL,
  RECURRING_PERIOD   VARCHAR2(20 BYTE)          DEFAULT 'N/A',
  RECURRING_ENDDATE  DATE,
  UNIT_ID            NUMBER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
Table created.
SQL> COMMENT ON TABLE RNT_PROPERTY_EXPENSES IS 'Records details of property event occurrences.  These could include repairs and maintenance, scheduled services like lawn care or pest control.  All actions that result in a property expense should have an entry in this table.  Some expenses are recurring.  They reoccur on a regular bases.  Examples could include lawn care or pest control '
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTY_EXPENSES.EXPENSE_ID IS 'System generated PK'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTY_EXPENSES.PROPERTY_ID IS 'FK to RNT_PROPERTIES'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTY_EXPENSES.EVENT_DATE IS 'Date that event occurred'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTY_EXPENSES.DESCRIPTION IS 'Event description'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTY_EXPENSES.RECURRING_YN IS 'Is this a recurring expense?'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTY_EXPENSES.RECURRING_PERIOD IS 'Time to next ocurrence of this event.  System uses this to generate next payment in Accounts Payable'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTY_EXPENSES.RECURRING_ENDDATE IS 'The final date for a recurring event'
Comment created.
SQL> COMMENT ON COLUMN RNT_PROPERTY_EXPENSES.UNIT_ID IS 'FK to Unit for multi unit properties'
Comment created.
SQL> --
SQL> -- RNT_PROPERTY_HISTORY_UK1  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_PROPERTY_HISTORY_UK1 ON RNT_PROPERTY_EXPENSES
(PROPERTY_ID, EVENT_DATE, UNIT_ID, DESCRIPTION)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_PROPERTY_EXPENSES_PK  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_PROPERTY_EXPENSES_PK ON RNT_PROPERTY_EXPENSES
(EXPENSE_ID)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_LOANS_UK2  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_LOANS_UK2 ON RNT_LOANS
(PROPERTY_ID, POSITION)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_LOANS_PK  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_LOANS_PK ON RNT_LOANS
(LOAN_ID)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_AGREEMENT_ACTIONS_UK1  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_AGREEMENT_ACTIONS_UK1 ON RNT_AGREEMENT_ACTIONS
(AGREEMENT_ID, ACTION_DATE, ACTION_TYPE)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_AGREEMENT_ACTIONS_PK  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_AGREEMENT_ACTIONS_PK ON RNT_AGREEMENT_ACTIONS
(ACTION_ID)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_USER_ROLES_U1  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_USER_ROLES_U1 ON RNT_USER_ROLES
(ROLE_CODE)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_USER_ROLES_PK  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_USER_ROLES_PK ON RNT_USER_ROLES
(ROLE_ID)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_USER_ASSIGNMENTS_PK  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_USER_ASSIGNMENTS_PK ON RNT_USER_ASSIGNMENTS
(USER_ASSIGN_ID)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_USER_U1  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_USER_U1 ON RNT_USERS
(USER_LOGIN)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_USER_PK  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_USER_PK ON RNT_USERS
(USER_ID)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_CONTRACTORS_UK1  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_CONTRACTORS_UK1 ON RNT_SUPPLIERS
(NAME)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_CONTRACTORS_PK  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_CONTRACTORS_PK ON RNT_SUPPLIERS
(SUPPLIER_ID)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_PROPERTY_VALUE_UK1  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_PROPERTY_VALUE_UK1 ON RNT_PROPERTY_VALUE
(PROPERTY_ID, VALUE_DATE, VALUE_METHOD)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_PROPERTY_VALUE_PK  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_PROPERTY_VALUE_PK ON RNT_PROPERTY_VALUE
(VALUE_ID)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_PROPERTY_UNITS_UK1  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_PROPERTY_UNITS_UK1 ON RNT_PROPERTY_UNITS
(PROPERTY_ID, UNIT_NAME)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_PROPERTY_UNITS_PK  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_PROPERTY_UNITS_PK ON RNT_PROPERTY_UNITS
(UNIT_ID)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_PROPERTIES_UK1  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_PROPERTIES_UK1 ON RNT_PROPERTIES
(ADDRESS1, ADDRESS2, CITY, STATE, ZIPCODE)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_PROPERTIES_PK  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_PROPERTIES_PK ON RNT_PROPERTIES
(PROPERTY_ID)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_PAYMENT_TYPES_UK1  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_PAYMENT_TYPES_UK1 ON RNT_PAYMENT_TYPES
(PAYMENT_TYPE_NAME)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_PAYMENT_TYPES_PK  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_PAYMENT_TYPES_PK ON RNT_PAYMENT_TYPES
(PAYMENT_TYPE_ID)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_LOOKUP_VALUES_U1  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_LOOKUP_VALUES_U1 ON RNT_LOOKUP_VALUES
(LOOKUP_TYPE_ID, LOOKUP_CODE)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_LOOKUP_VALUES_PK  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_LOOKUP_VALUES_PK ON RNT_LOOKUP_VALUES
(LOOKUP_VALUE_ID)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_LOOKUP_TYPES_U1  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_LOOKUP_TYPES_U1 ON RNT_LOOKUP_TYPES
(LOOKUP_TYPE_CODE)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_LOOKUP_TYPES_PK  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_LOOKUP_TYPES_PK ON RNT_LOOKUP_TYPES
(LOOKUP_TYPE_ID)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_BUSINESS_UNITS_PK  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_BUSINESS_UNITS_PK ON RNT_BUSINESS_UNITS
(BUSINESS_ID)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_BUSINESS_UNITS_U1  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_BUSINESS_UNITS_U1 ON RNT_BUSINESS_UNITS
(PARENT_BUSINESS_ID, BUSINESS_NAME)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_TENANCY_AGREEMENT_UK1  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_TENANCY_AGREEMENT_UK1 ON RNT_TENANCY_AGREEMENT
(UNIT_ID, DATE_AVAILABLE)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_TENANCY_AGREEMENT_PK  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_TENANCY_AGREEMENT_PK ON RNT_TENANCY_AGREEMENT
(AGREEMENT_ID)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_PEOPLE_U1  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_PEOPLE_U1 ON RNT_PEOPLE
(LAST_NAME, FIRST_NAME)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_SECTION8_OFFICES_PK  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_SECTION8_OFFICES_PK ON RNT_SECTION8_OFFICES
(SECTION8_ID)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_USER_ASSIGNMENTS_U2  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_USER_ASSIGNMENTS_U2 ON RNT_USER_ASSIGNMENTS
(ROLE_ID, USER_ID)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_PEOPLE_PK  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_PEOPLE_PK ON RNT_PEOPLE
(PEOPLE_ID)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_TENANT  (Table) 
SQL> --
SQL> CREATE TABLE RNT_TENANT
(
  TENANT_ID                NUMBER               NOT NULL,
  AGREEMENT_ID             NUMBER,
  STATUS                   VARCHAR2(30 BYTE)    NOT NULL,
  DEPOSIT_BALANCE          NUMBER               NOT NULL,
  LAST_MONTH_BALANCE       NUMBER               NOT NULL,
  PEOPLE_ID                NUMBER               NOT NULL,
  SECTION8_VOUCHER_AMOUNT  NUMBER,
  SECTION8_TENANT_PAYS     NUMBER,
  SECTION8_ID              NUMBER,
  TENANT_NOTE              VARCHAR2(4000 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
Table created.
SQL> COMMENT ON TABLE RNT_TENANT IS 'Records details of current and past tenants plus applications received'
Comment created.
SQL> COMMENT ON COLUMN RNT_TENANT.TENANT_NOTE IS 'Notes for tenant'
Comment created.
SQL> COMMENT ON COLUMN RNT_TENANT.TENANT_ID IS 'System generated pk'
Comment created.
SQL> COMMENT ON COLUMN RNT_TENANT.PEOPLE_ID IS 'FK for table RNT_PEOPLE'
Comment created.
SQL> COMMENT ON COLUMN RNT_TENANT.SECTION8_VOUCHER_AMOUNT IS 'The voucher amount is the maximum monthly rent that Section 8 will cover for this person'
Comment created.
SQL> COMMENT ON COLUMN RNT_TENANT.SECTION8_TENANT_PAYS IS '"Tenant pays" records the contribution that the government requires from this person e.g. if the rent is $800 a month and the tenant pays $200 Section 8 will pay $600.  The system should issue a warning (but not an error) if the  rent is more than the voucher amount.'
Comment created.
SQL> COMMENT ON COLUMN RNT_TENANT.AGREEMENT_ID IS 'FK to rental agreement'
Comment created.
SQL> COMMENT ON COLUMN RNT_TENANT.STATUS IS 'E.g. active, former'
Comment created.
SQL> COMMENT ON COLUMN RNT_TENANT.DEPOSIT_BALANCE IS 'Total current deposit balance'
Comment created.
SQL> COMMENT ON COLUMN RNT_TENANT.LAST_MONTH_BALANCE IS 'Total of last month balance'
Comment created.
SQL> COMMENT ON COLUMN RNT_TENANT.SECTION8_ID IS 'ID section8 office'
Comment created.
SQL> --
SQL> -- RNT_ACCOUNTS_PAYABLE  (Table) 
SQL> --
SQL> CREATE TABLE RNT_ACCOUNTS_PAYABLE
(
  AP_ID             NUMBER                      NOT NULL,
  PAYMENT_DUE_DATE  DATE                        NOT NULL,
  AMOUNT            NUMBER                      NOT NULL,
  PAYMENT_TYPE_ID   NUMBER                      NOT NULL,
  EXPENSE_ID        NUMBER                      NOT NULL,
  LOAN_ID           NUMBER,
  SUPPLIER_ID       NUMBER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
Table created.
SQL> COMMENT ON TABLE RNT_ACCOUNTS_PAYABLE IS 'Amounts owed by us for goods or services.  Each payment must be classified by payment type and associated with a property expense.'
Comment created.
SQL> COMMENT ON COLUMN RNT_ACCOUNTS_PAYABLE.AP_ID IS 'System generated PK'
Comment created.
SQL> COMMENT ON COLUMN RNT_ACCOUNTS_PAYABLE.PAYMENT_DUE_DATE IS 'The date that a payment is due'
Comment created.
SQL> COMMENT ON COLUMN RNT_ACCOUNTS_PAYABLE.AMOUNT IS 'Amount due'
Comment created.
SQL> COMMENT ON COLUMN RNT_ACCOUNTS_PAYABLE.PAYMENT_TYPE_ID IS 'Foreign key to RNT_PAYMENT_TYPES'
Comment created.
SQL> COMMENT ON COLUMN RNT_ACCOUNTS_PAYABLE.EXPENSE_ID IS 'Foreign key to RNT_PROPERTY_EXPENSES'
Comment created.
SQL> COMMENT ON COLUMN RNT_ACCOUNTS_PAYABLE.LOAN_ID IS 'FK to RNT_LOANS'
Comment created.
SQL> COMMENT ON COLUMN RNT_ACCOUNTS_PAYABLE.SUPPLIER_ID IS 'Foreign key to RNT_SUPPLIERS'
Comment created.
SQL> --
SQL> -- RNT_ACCOUNTS_RECEIVABLE  (Table) 
SQL> --
SQL> CREATE TABLE RNT_ACCOUNTS_RECEIVABLE
(
  AR_ID             NUMBER                      NOT NULL,
  PAYMENT_DUE_DATE  DATE                        NOT NULL,
  AMOUNT            NUMBER                      NOT NULL,
  PAYMENT_TYPE      NUMBER,
  TENANT_ID         NUMBER,
  AGREEMENT_ID      NUMBER,
  LOAN_ID           NUMBER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
Table created.
SQL> COMMENT ON TABLE RNT_ACCOUNTS_RECEIVABLE IS 'Records details of payments due to us.  These could be directly from tenants for deposits and last months rent.  They can also be rent payments in connection with a tenancy agreeement.  The system generates AR records automatically based on the terms of the tenancy agreement.  '
Comment created.
SQL> COMMENT ON COLUMN RNT_ACCOUNTS_RECEIVABLE.AR_ID IS 'System Generated PK'
Comment created.
SQL> COMMENT ON COLUMN RNT_ACCOUNTS_RECEIVABLE.PAYMENT_DUE_DATE IS 'Date the payment is due'
Comment created.
SQL> COMMENT ON COLUMN RNT_ACCOUNTS_RECEIVABLE.AMOUNT IS 'Amount due'
Comment created.
SQL> COMMENT ON COLUMN RNT_ACCOUNTS_RECEIVABLE.PAYMENT_TYPE IS 'FK to RNT_PAYMENT_TYPES'
Comment created.
SQL> COMMENT ON COLUMN RNT_ACCOUNTS_RECEIVABLE.TENANT_ID IS 'FK to RNT_TENTANTS'
Comment created.
SQL> COMMENT ON COLUMN RNT_ACCOUNTS_RECEIVABLE.AGREEMENT_ID IS 'FK to RNT_TENANCY_AGREEMENT used to record deposit, last month etc'
Comment created.
SQL> COMMENT ON COLUMN RNT_ACCOUNTS_RECEIVABLE.LOAN_ID IS 'FK to RNT_LOANS for Mortgage notes'
Comment created.
SQL> --
SQL> -- RNT_PAYMENTS  (Table) 
SQL> --
SQL> CREATE TABLE RNT_PAYMENTS
(
  PAYMENT_ID        NUMBER                      NOT NULL,
  PAYMENT_DATE      DATE                        NOT NULL,
  DESCRIPTION       VARCHAR2(256 BYTE)          NOT NULL,
  PAID_OR_RECEIVED  VARCHAR2(16 BYTE)           DEFAULT 'PAID'                NOT NULL,
  AMOUNT            NUMBER                      NOT NULL,
  TENANT_ID         NUMBER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
Table created.
SQL> COMMENT ON TABLE RNT_PAYMENTS IS 'Records details of payments made or received for allocation to an account.  This allows a single payment to be divided into multiple accounts.  It also provides a holding area for payments that cannot be allocated immediately.  Examples:  Contractor presents a single invoice for work performed on multiple properties.   Tenant makes a rent payment into the bank without identifying the property that it applies to.   Home Depot or Lowes Receipt lists supplies for multiple properties.  Unused supplies are return to a store for a credit refund  Transfer payments can be made to remove funds from the last month or deposit balance for a tenant. '
Comment created.
SQL> COMMENT ON COLUMN RNT_PAYMENTS.PAYMENT_ID IS 'System generated primary key'
Comment created.
SQL> COMMENT ON COLUMN RNT_PAYMENTS.PAYMENT_DATE IS 'The date this payment was made or received'
Comment created.
SQL> COMMENT ON COLUMN RNT_PAYMENTS.DESCRIPTION IS 'e.g. Home Depot receipt, Bank Payment'
Comment created.
SQL> COMMENT ON COLUMN RNT_PAYMENTS.PAID_OR_RECEIVED IS 'Does this payment releate to a payment made or an amount received?'
Comment created.
SQL> COMMENT ON COLUMN RNT_PAYMENTS.AMOUNT IS 'The value of the payment'
Comment created.
SQL> --
SQL> -- RNT_ACCOUNTS_RECEIVABLE_PK  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_ACCOUNTS_RECEIVABLE_PK ON RNT_ACCOUNTS_RECEIVABLE
(AR_ID)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_ACCOUNTS_PAYABLE_PK  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_ACCOUNTS_PAYABLE_PK ON RNT_ACCOUNTS_PAYABLE
(AP_ID)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_PAYMENTS_UK1  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_PAYMENTS_UK1 ON RNT_PAYMENTS
(PAYMENT_DATE, DESCRIPTION)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_PAYMENTS_PK  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_PAYMENTS_PK ON RNT_PAYMENTS
(PAYMENT_ID)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_TENANT_PK  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_TENANT_PK ON RNT_TENANT
(TENANT_ID)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_TENANT_U1  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_TENANT_U1 ON RNT_TENANT
(AGREEMENT_ID, PEOPLE_ID)
LOGGING
NOPARALLEL
Index created.
SQL> --
SQL> -- RNT_PAYMENT_ALLOCATIONS  (Table) 
SQL> --
SQL> CREATE TABLE RNT_PAYMENT_ALLOCATIONS
(
  PAY_ALLOC_ID  NUMBER                          NOT NULL,
  PAYMENT_DATE  DATE                            NOT NULL,
  AMOUNT        NUMBER,
  AR_ID         NUMBER,
  AP_ID         NUMBER,
  PAYMENT_ID    NUMBER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
Table created.
SQL> COMMENT ON TABLE RNT_PAYMENT_ALLOCATIONS IS 'Records the payment of AR and AP entries.  Each AR or AP entry may have more than one payment allocation.  Tenants may make partial payments against rent due.'
Comment created.
SQL> COMMENT ON COLUMN RNT_PAYMENT_ALLOCATIONS.PAY_ALLOC_ID IS 'System generated PK'
Comment created.
SQL> COMMENT ON COLUMN RNT_PAYMENT_ALLOCATIONS.PAYMENT_DATE IS 'Date the payment was made'
Comment created.
SQL> COMMENT ON COLUMN RNT_PAYMENT_ALLOCATIONS.AMOUNT IS 'Amount Paid'
Comment created.
SQL> COMMENT ON COLUMN RNT_PAYMENT_ALLOCATIONS.AR_ID IS 'Payment for Accounts Receivable ID'
Comment created.
SQL> COMMENT ON COLUMN RNT_PAYMENT_ALLOCATIONS.AP_ID IS 'Payment of Accounts Payable ID'
Comment created.
SQL> COMMENT ON COLUMN RNT_PAYMENT_ALLOCATIONS.PAYMENT_ID IS 'Foreign key to RNT_PAYMENTS'
Comment created.
SQL> --
SQL> -- RNT_PAYMENT_ALLOC_PK  (Index) 
SQL> --
SQL> CREATE UNIQUE INDEX RNT_PAYMENT_ALLOC_PK ON RNT_PAYMENT_ALLOCATIONS
(PAY_ALLOC_ID)
LOGGING
NOPARALLEL
Index created.
SQL> -- 
SQL> -- Non Foreign Key Constraints for Table RNT_BUSINESS_UNITS 
SQL> -- 
SQL> ALTER TABLE RNT_BUSINESS_UNITS ADD (
  CONSTRAINT RNT_BUSINESS_UNITS_PK
 PRIMARY KEY
 (BUSINESS_ID))
Table altered.
SQL> -- 
SQL> -- Non Foreign Key Constraints for Table RNT_LOOKUP_TYPES 
SQL> -- 
SQL> ALTER TABLE RNT_LOOKUP_TYPES ADD (
  CONSTRAINT RNT_LOOKUP_TYPES_PK
 PRIMARY KEY
 (LOOKUP_TYPE_ID))
Table altered.
SQL> -- 
SQL> -- Non Foreign Key Constraints for Table RNT_LOOKUP_VALUES 
SQL> -- 
SQL> ALTER TABLE RNT_LOOKUP_VALUES ADD (
  CONSTRAINT RNT_LOOKUP_VALUES_PK
 PRIMARY KEY
 (LOOKUP_VALUE_ID))
Table altered.
SQL> -- 
SQL> -- Non Foreign Key Constraints for Table RNT_PAYMENT_TYPES 
SQL> -- 
SQL> ALTER TABLE RNT_PAYMENT_TYPES ADD (
  CONSTRAINT RNT_PAYMENT_TYPES_PK
 PRIMARY KEY
 (PAYMENT_TYPE_ID))
Table altered.
SQL> ALTER TABLE RNT_PAYMENT_TYPES ADD (
  CONSTRAINT RNT_PAYMENT_TYPES_UK1
 UNIQUE (PAYMENT_TYPE_NAME))
Table altered.
SQL> -- 
SQL> -- Non Foreign Key Constraints for Table RNT_PROPERTIES 
SQL> -- 
SQL> ALTER TABLE RNT_PROPERTIES ADD (
  CONSTRAINT RNT_PROPERTIES_CK1
 CHECK (state in ('FL', 'NC')))
Table altered.
SQL> ALTER TABLE RNT_PROPERTIES ADD (
  CONSTRAINT RNT_PROPERTIES_PK
 PRIMARY KEY
 (PROPERTY_ID))
Table altered.
SQL> ALTER TABLE RNT_PROPERTIES ADD (
  CONSTRAINT RNT_PROPERTIES_UK1
 UNIQUE (ADDRESS1, ADDRESS2, CITY, STATE, ZIPCODE))
Table altered.
SQL> -- 
SQL> -- Non Foreign Key Constraints for Table RNT_PROPERTY_UNITS 
SQL> -- 
SQL> ALTER TABLE RNT_PROPERTY_UNITS ADD (
  CONSTRAINT RNT_PROPERTY_UNITS_PK
 PRIMARY KEY
 (UNIT_ID))
Table altered.
SQL> ALTER TABLE RNT_PROPERTY_UNITS ADD (
  CONSTRAINT RNT_PROPERTY_UNITS_UK1
 UNIQUE (PROPERTY_ID, UNIT_NAME))
Table altered.
SQL> -- 
SQL> -- Non Foreign Key Constraints for Table RNT_PROPERTY_VALUE 
SQL> -- 
SQL> ALTER TABLE RNT_PROPERTY_VALUE ADD (
  CONSTRAINT RNT_PROPERTY_VALUE_PK
 PRIMARY KEY
 (VALUE_ID))
Table altered.
SQL> ALTER TABLE RNT_PROPERTY_VALUE ADD (
  CONSTRAINT RNT_PROPERTY_VALUE_UK1
 UNIQUE (PROPERTY_ID, VALUE_DATE, VALUE_METHOD))
Table altered.
SQL> -- 
SQL> -- Non Foreign Key Constraints for Table RNT_SUPPLIERS 
SQL> -- 
SQL> ALTER TABLE RNT_SUPPLIERS ADD (
  CONSTRAINT RNT_CONTRACTORS_PK
 PRIMARY KEY
 (SUPPLIER_ID))
Table altered.
SQL> ALTER TABLE RNT_SUPPLIERS ADD (
  CONSTRAINT RNT_CONTRACTORS_UK1
 UNIQUE (NAME))
Table altered.
SQL> -- 
SQL> -- Non Foreign Key Constraints for Table RNT_USER_ROLES 
SQL> -- 
SQL> ALTER TABLE RNT_USER_ROLES ADD (
  CONSTRAINT RNT_USER_ROLES_PK
 PRIMARY KEY
 (ROLE_ID))
Table altered.
SQL> -- 
SQL> -- Non Foreign Key Constraints for Table RNT_USERS 
SQL> -- 
SQL> ALTER TABLE RNT_USERS ADD (
  CONSTRAINT RNT_USER_PK
 PRIMARY KEY
 (USER_ID))
Table altered.
SQL> -- 
SQL> -- Non Foreign Key Constraints for Table RNT_USER_ASSIGNMENTS 
SQL> -- 
SQL> ALTER TABLE RNT_USER_ASSIGNMENTS ADD (
  CONSTRAINT RNT_USER_ASSIGNMENTS_PK
 PRIMARY KEY
 (USER_ASSIGN_ID))
Table altered.
SQL> -- 
SQL> -- Non Foreign Key Constraints for Table RNT_TENANCY_AGREEMENT 
SQL> -- 
SQL> ALTER TABLE RNT_TENANCY_AGREEMENT ADD (
  CONSTRAINT RNT_TENANCY_AGREEMENT_PK
 PRIMARY KEY
 (AGREEMENT_ID))
Table altered.
SQL> -- 
SQL> -- Non Foreign Key Constraints for Table RNT_PEOPLE 
SQL> -- 
SQL> ALTER TABLE RNT_PEOPLE ADD (
  CONSTRAINT RNT_PEOPLE_PK
 PRIMARY KEY
 (PEOPLE_ID))
Table altered.
SQL> -- 
SQL> -- Non Foreign Key Constraints for Table RNT_SECTION8_OFFICES 
SQL> -- 
SQL> ALTER TABLE RNT_SECTION8_OFFICES ADD (
  CONSTRAINT RNT_SECTION8_OFFICES_PK
 PRIMARY KEY
 (SECTION8_ID))
Table altered.
SQL> -- 
SQL> -- Non Foreign Key Constraints for Table RNT_AGREEMENT_ACTIONS 
SQL> -- 
SQL> ALTER TABLE RNT_AGREEMENT_ACTIONS ADD (
  CONSTRAINT RNT_AGREEMENT_ACTIONS_PK
 PRIMARY KEY
 (ACTION_ID))
Table altered.
SQL> ALTER TABLE RNT_AGREEMENT_ACTIONS ADD (
  CONSTRAINT RNT_AGREEMENT_ACTIONS_UK1
 UNIQUE (AGREEMENT_ID, ACTION_DATE, ACTION_TYPE))
Table altered.
SQL> -- 
SQL> -- Non Foreign Key Constraints for Table RNT_LOANS 
SQL> -- 
SQL> ALTER TABLE RNT_LOANS ADD (
  CONSTRAINT RNT_LOANS_PK
 PRIMARY KEY
 (LOAN_ID))
Table altered.
SQL> ALTER TABLE RNT_LOANS ADD (
  CONSTRAINT RNT_LOANS_UK2
 UNIQUE (PROPERTY_ID, POSITION))
Table altered.
SQL> -- 
SQL> -- Non Foreign Key Constraints for Table RNT_PROPERTY_EXPENSES 
SQL> -- 
SQL> ALTER TABLE RNT_PROPERTY_EXPENSES ADD (
  CONSTRAINT RNT_PROPERTY_EXPENSES_PK
 PRIMARY KEY
 (EXPENSE_ID))
Table altered.
SQL> ALTER TABLE RNT_PROPERTY_EXPENSES ADD (
  CONSTRAINT RNT_PROPERTY_HISTORY_UK1
 UNIQUE (PROPERTY_ID, EVENT_DATE, UNIT_ID, DESCRIPTION))
Table altered.
SQL> -- 
SQL> -- Non Foreign Key Constraints for Table RNT_TENANT 
SQL> -- 
SQL> ALTER TABLE RNT_TENANT ADD (
  CONSTRAINT RNT_TENANT_PK
 PRIMARY KEY
 (TENANT_ID))
Table altered.
SQL> -- 
SQL> -- Non Foreign Key Constraints for Table RNT_ACCOUNTS_PAYABLE 
SQL> -- 
SQL> ALTER TABLE RNT_ACCOUNTS_PAYABLE ADD (
  CONSTRAINT RNT_ACCOUNTS_PAYABLE_PK
 PRIMARY KEY
 (AP_ID))
Table altered.
SQL> -- 
SQL> -- Non Foreign Key Constraints for Table RNT_ACCOUNTS_RECEIVABLE 
SQL> -- 
SQL> ALTER TABLE RNT_ACCOUNTS_RECEIVABLE ADD (
  CONSTRAINT RNT_ACCOUNTS_RECEIVABLE_PK
 PRIMARY KEY
 (AR_ID))
Table altered.
SQL> -- 
SQL> -- Non Foreign Key Constraints for Table RNT_PAYMENTS 
SQL> -- 
SQL> ALTER TABLE RNT_PAYMENTS ADD (
  CONSTRAINT RNT_PAYMENTS_PK
 PRIMARY KEY
 (PAYMENT_ID))
Table altered.
SQL> ALTER TABLE RNT_PAYMENTS ADD (
  CONSTRAINT RNT_PAYMENTS_UK1
 UNIQUE (PAYMENT_DATE, DESCRIPTION))
Table altered.
SQL> -- 
SQL> -- Non Foreign Key Constraints for Table RNT_PAYMENT_ALLOCATIONS 
SQL> -- 
SQL> ALTER TABLE RNT_PAYMENT_ALLOCATIONS ADD (
  CONSTRAINT RNT_PAYMENT_ALLOC_PK
 PRIMARY KEY
 (PAY_ALLOC_ID))
Table altered.
SQL> -- 
SQL> -- Foreign Key Constraints for Table RNT_LOOKUP_VALUES 
SQL> -- 
SQL> ALTER TABLE RNT_LOOKUP_VALUES ADD (
  CONSTRAINT RNT_LOOKUP_VALUES_FK 
 FOREIGN KEY (LOOKUP_TYPE_ID) 
 REFERENCES RNT_LOOKUP_TYPES (LOOKUP_TYPE_ID))
Table altered.
SQL> -- 
SQL> -- Foreign Key Constraints for Table RNT_PROPERTIES 
SQL> -- 
SQL> ALTER TABLE RNT_PROPERTIES ADD (
  CONSTRAINT RNT_PROPERTIES_FK 
 FOREIGN KEY (BUSINESS_ID) 
 REFERENCES RNT_BUSINESS_UNITS (BUSINESS_ID))
Table altered.
SQL> -- 
SQL> -- Foreign Key Constraints for Table RNT_PROPERTY_UNITS 
SQL> -- 
SQL> ALTER TABLE RNT_PROPERTY_UNITS ADD (
  CONSTRAINT RNT_PROPERTY_UNITS_FK1 
 FOREIGN KEY (PROPERTY_ID) 
 REFERENCES RNT_PROPERTIES (PROPERTY_ID))
Table altered.
SQL> -- 
SQL> -- Foreign Key Constraints for Table RNT_PROPERTY_VALUE 
SQL> -- 
SQL> ALTER TABLE RNT_PROPERTY_VALUE ADD (
  CONSTRAINT RNT_PROPERTY_VALUE_FK 
 FOREIGN KEY (PROPERTY_ID) 
 REFERENCES RNT_PROPERTIES (PROPERTY_ID))
Table altered.
SQL> -- 
SQL> -- Foreign Key Constraints for Table RNT_USER_ASSIGNMENTS 
SQL> -- 
SQL> ALTER TABLE RNT_USER_ASSIGNMENTS ADD (
  CONSTRAINT RNT_USER_ASSIGNMENTS_FK1 
 FOREIGN KEY (USER_ID) 
 REFERENCES RNT_USERS (USER_ID))
Table altered.
SQL> ALTER TABLE RNT_USER_ASSIGNMENTS ADD (
  CONSTRAINT RNT_USER_ASSIGNMENTS_FK2 
 FOREIGN KEY (ROLE_ID) 
 REFERENCES RNT_USER_ROLES (ROLE_ID))
Table altered.
SQL> ALTER TABLE RNT_USER_ASSIGNMENTS ADD (
  CONSTRAINT RNT_USER_ASSIGNMENTS_FK3 
 FOREIGN KEY (BUSINESS_ID) 
 REFERENCES RNT_BUSINESS_UNITS (BUSINESS_ID))
Table altered.
SQL> -- 
SQL> -- Foreign Key Constraints for Table RNT_TENANCY_AGREEMENT 
SQL> -- 
SQL> ALTER TABLE RNT_TENANCY_AGREEMENT ADD (
  CONSTRAINT RNT_TENANCY_AGREEMENT_FK 
 FOREIGN KEY (UNIT_ID) 
 REFERENCES RNT_PROPERTY_UNITS (UNIT_ID))
Table altered.
SQL> -- 
SQL> -- Foreign Key Constraints for Table RNT_PEOPLE 
SQL> -- 
SQL> ALTER TABLE RNT_PEOPLE ADD (
  CONSTRAINT RNT_PEOPLE_FK2 
 FOREIGN KEY (BUSINESS_ID) 
 REFERENCES RNT_BUSINESS_UNITS (BUSINESS_ID))
Table altered.
SQL> -- 
SQL> -- Foreign Key Constraints for Table RNT_LOANS 
SQL> -- 
SQL> ALTER TABLE RNT_LOANS ADD (
  CONSTRAINT RNT_LOANS_FK 
 FOREIGN KEY (PROPERTY_ID) 
 REFERENCES RNT_PROPERTIES (PROPERTY_ID))
Table altered.
SQL> -- 
SQL> -- Foreign Key Constraints for Table RNT_PROPERTY_EXPENSES 
SQL> -- 
SQL> ALTER TABLE RNT_PROPERTY_EXPENSES ADD (
  CONSTRAINT RNT_PROPERTY_HISTORY_FK2 
 FOREIGN KEY (UNIT_ID) 
 REFERENCES RNT_PROPERTY_UNITS (UNIT_ID))
Table altered.
SQL> ALTER TABLE RNT_PROPERTY_EXPENSES ADD (
  CONSTRAINT RNT_PROPERTY_HISTORY_FK 
 FOREIGN KEY (PROPERTY_ID) 
 REFERENCES RNT_PROPERTIES (PROPERTY_ID))
Table altered.
SQL> -- 
SQL> -- Foreign Key Constraints for Table RNT_TENANT 
SQL> -- 
SQL> ALTER TABLE RNT_TENANT ADD (
  CONSTRAINT RNT_TENANT_FK1 
 FOREIGN KEY (PEOPLE_ID) 
 REFERENCES RNT_PEOPLE (PEOPLE_ID))
Table altered.
SQL> ALTER TABLE RNT_TENANT ADD (
  CONSTRAINT RNT_TENANT_FK2 
 FOREIGN KEY (SECTION8_ID) 
 REFERENCES RNT_SECTION8_OFFICES (SECTION8_ID))
Table altered.
SQL> ALTER TABLE RNT_TENANT ADD (
  CONSTRAINT RNT_TENANT_FK3 
 FOREIGN KEY (AGREEMENT_ID) 
 REFERENCES RNT_TENANCY_AGREEMENT (AGREEMENT_ID))
Table altered.
SQL> -- 
SQL> -- Foreign Key Constraints for Table RNT_ACCOUNTS_PAYABLE 
SQL> -- 
SQL> ALTER TABLE RNT_ACCOUNTS_PAYABLE ADD (
  CONSTRAINT RNT_ACCOUNTS_PAYABLE_FK 
 FOREIGN KEY (PAYMENT_TYPE_ID) 
 REFERENCES RNT_PAYMENT_TYPES (PAYMENT_TYPE_ID))
Table altered.
SQL> ALTER TABLE RNT_ACCOUNTS_PAYABLE ADD (
  CONSTRAINT RNT_ACCOUNTS_PAYABLE_FK4 
 FOREIGN KEY (LOAN_ID) 
 REFERENCES RNT_LOANS (LOAN_ID))
Table altered.
SQL> ALTER TABLE RNT_ACCOUNTS_PAYABLE ADD (
  CONSTRAINT RNT_ACCOUNTS_PAYABLE_FK1 
 FOREIGN KEY (EXPENSE_ID) 
 REFERENCES RNT_PROPERTY_EXPENSES (EXPENSE_ID))
Table altered.
SQL> ALTER TABLE RNT_ACCOUNTS_PAYABLE ADD (
  CONSTRAINT RNT_ACCOUNTS_PAYABLE_FK2 
 FOREIGN KEY (SUPPLIER_ID) 
 REFERENCES RNT_SUPPLIERS (SUPPLIER_ID))
Table altered.
SQL> -- 
SQL> -- Foreign Key Constraints for Table RNT_ACCOUNTS_RECEIVABLE 
SQL> -- 
SQL> ALTER TABLE RNT_ACCOUNTS_RECEIVABLE ADD (
  CONSTRAINT RNT_ACCOUNTS_RECEIVABLE_FK 
 FOREIGN KEY (TENANT_ID) 
 REFERENCES RNT_TENANT (TENANT_ID))
Table altered.
SQL> ALTER TABLE RNT_ACCOUNTS_RECEIVABLE ADD (
  CONSTRAINT RNT_ACCOUNTS_RECEIVABLE_FK3 
 FOREIGN KEY (LOAN_ID) 
 REFERENCES RNT_LOANS (LOAN_ID))
Table altered.
SQL> ALTER TABLE RNT_ACCOUNTS_RECEIVABLE ADD (
  CONSTRAINT RNT_ACCOUNTS_RECEIVABLE_FK4 
 FOREIGN KEY (PAYMENT_TYPE) 
 REFERENCES RNT_PAYMENT_TYPES (PAYMENT_TYPE_ID))
Table altered.
SQL> -- 
SQL> -- Foreign Key Constraints for Table RNT_PAYMENTS 
SQL> -- 
SQL> ALTER TABLE RNT_PAYMENTS ADD (
  CONSTRAINT RNT_PAYMENTS_RNT_TENANT_FK 
 FOREIGN KEY (TENANT_ID) 
 REFERENCES RNT_TENANT (TENANT_ID))
Table altered.
SQL> -- 
SQL> -- Foreign Key Constraints for Table RNT_PAYMENT_ALLOCATIONS 
SQL> -- 
SQL> ALTER TABLE RNT_PAYMENT_ALLOCATIONS ADD (
  CONSTRAINT RNT_PAYMENTS_RNT_ACCOUNTS_FK2 
 FOREIGN KEY (AR_ID) 
 REFERENCES RNT_ACCOUNTS_RECEIVABLE (AR_ID))
Table altered.
SQL> ALTER TABLE RNT_PAYMENT_ALLOCATIONS ADD (
  CONSTRAINT RNT_PAYMENTS_RNT_ACCOUNTS_FK1 
 FOREIGN KEY (AP_ID) 
 REFERENCES RNT_ACCOUNTS_PAYABLE (AP_ID))
Table altered.
SQL> ALTER TABLE RNT_PAYMENT_ALLOCATIONS ADD (
  CONSTRAINT RNT_PAYMENT_ALLOCATIONS_FK 
 FOREIGN KEY (PAYMENT_ID) 
 REFERENCES RNT_PAYMENTS (PAYMENT_ID))
Table altered.
SQL> @@sequences.sql
SQL> --
SQL> -- Create Schema Script 
SQL> --   Database Version   : 10.2.0.1.0 
SQL> --   TOAD Version       : 9.0.0.160 
SQL> --   DB Connect String  : XE 
SQL> --   Schema             : RNTMGR 
SQL> --   Script Created by  : RNTMGR 
SQL> --   Script Created at  : 05.05.2007 8:25:36 
SQL> --   Physical Location  :  
SQL> --   Notes              :  
SQL> --
SQL> -- Object Counts: 
SQL> --   Sequences: 20 
SQL> --
SQL> -- RNT_SECTION8_OFFICES_SEQ  (Sequence) 
SQL> --
SQL> CREATE SEQUENCE RNT_SECTION8_OFFICES_SEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER
Sequence created.
SQL> --
SQL> -- RNT_PEOPLE_SEQ  (Sequence) 
SQL> --
SQL> CREATE SEQUENCE RNT_PEOPLE_SEQ
  START WITH 12
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER
Sequence created.
SQL> --
SQL> -- RNT_BUSINESS_UNITS_SEQ  (Sequence) 
SQL> --
SQL> CREATE SEQUENCE RNT_BUSINESS_UNITS_SEQ
  START WITH 25
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER
Sequence created.
SQL> --
SQL> -- RNT_PROPERTIES_SEQ  (Sequence) 
SQL> --
SQL> CREATE SEQUENCE RNT_PROPERTIES_SEQ
  START WITH 381
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
Sequence created.
SQL> --
SQL> -- RNT_PROPERTY_VALUE_SEQ  (Sequence) 
SQL> --
SQL> CREATE SEQUENCE RNT_PROPERTY_VALUE_SEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
Sequence created.
SQL> --
SQL> -- RNT_PROPERTY_UNITS_SEQ  (Sequence) 
SQL> --
SQL> CREATE SEQUENCE RNT_PROPERTY_UNITS_SEQ
  START WITH 61
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER
Sequence created.
SQL> --
SQL> -- RNT_PROPERTY_EXPENSES_SEQ  (Sequence) 
SQL> --
SQL> CREATE SEQUENCE RNT_PROPERTY_EXPENSES_SEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
Sequence created.
SQL> --
SQL> -- RNT_PAYMENT_TYPES_SEQ  (Sequence) 
SQL> --
SQL> CREATE SEQUENCE RNT_PAYMENT_TYPES_SEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
Sequence created.
SQL> --
SQL> -- RNT_TENANT_SEQ  (Sequence) 
SQL> --
SQL> CREATE SEQUENCE RNT_TENANT_SEQ
  START WITH 61
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
Sequence created.
SQL> --
SQL> -- RNT_TENANCY_AGREEMENT_SEQ  (Sequence) 
SQL> --
SQL> CREATE SEQUENCE RNT_TENANCY_AGREEMENT_SEQ
  START WITH 241
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
Sequence created.
SQL> --
SQL> -- RNT_LOANS_SEQ  (Sequence) 
SQL> --
SQL> CREATE SEQUENCE RNT_LOANS_SEQ
  START WITH 101
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
Sequence created.
SQL> --
SQL> -- RNT_SUPPLIERS_SEQ  (Sequence) 
SQL> --
SQL> CREATE SEQUENCE RNT_SUPPLIERS_SEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
Sequence created.
SQL> --
SQL> -- RNT_PAYMENTS_SEQ  (Sequence) 
SQL> --
SQL> CREATE SEQUENCE RNT_PAYMENTS_SEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
Sequence created.
SQL> --
SQL> -- RNT_ACCOUNTS_RECEIVABLE_SEQ  (Sequence) 
SQL> --
SQL> CREATE SEQUENCE RNT_ACCOUNTS_RECEIVABLE_SEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
Sequence created.
SQL> --
SQL> -- RNT_ACCOUNTS_PAYABLE_SEQ  (Sequence) 
SQL> --
SQL> CREATE SEQUENCE RNT_ACCOUNTS_PAYABLE_SEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
Sequence created.
SQL> --
SQL> -- RNT_AGREEMENT_ACTIONS_SEQ  (Sequence) 
SQL> --
SQL> CREATE SEQUENCE RNT_AGREEMENT_ACTIONS_SEQ
  START WITH 21
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
Sequence created.
SQL> --
SQL> -- RNT_PAYMENT_ALLOCATIONS_SEQ  (Sequence) 
SQL> --
SQL> CREATE SEQUENCE RNT_PAYMENT_ALLOCATIONS_SEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
Sequence created.
SQL> --
SQL> -- RNT_USERS_SEQ  (Sequence) 
SQL> --
SQL> CREATE SEQUENCE RNT_USERS_SEQ
  START WITH 6
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER
Sequence created.
SQL> --
SQL> -- RNT_USER_ROLES_SEQ  (Sequence) 
SQL> --
SQL> CREATE SEQUENCE RNT_USER_ROLES_SEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER
Sequence created.
SQL> --
SQL> -- RNT_USER_ASSIGNMENTS_SEQ  (Sequence) 
SQL> --
SQL> CREATE SEQUENCE RNT_USER_ASSIGNMENTS_SEQ
  START WITH 18
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER
Sequence created.
SQL> @@views.sql
SQL> --
SQL> -- Create Schema Script 
SQL> --   Database Version   : 10.2.0.1.0 
SQL> --   TOAD Version       : 9.0.0.160 
SQL> --   DB Connect String  : XE 
SQL> --   Schema             : RNTMGR 
SQL> --   Script Created by  : RNTMGR 
SQL> --   Script Created at  : 05.05.2007 8:02:39 
SQL> --   Physical Location  :  
SQL> --   Notes              :  
SQL> --
SQL> -- Object Counts: 
SQL> --   Views: 12          Columns: 147        
SQL> --
SQL> -- RNT_USERS_V  (View) 
SQL> --
SQL> CREATE OR REPLACE FORCE VIEW RNT_USERS_V
(USER_ID, USER_LOGIN, USER_NAME, USER_PASSWORD, IS_ACTIVE_YN, 
 CHECKSUM)
AS 
select 
   USER_ID, USER_LOGIN, USER_NAME, 
   USER_PASSWORD, IS_ACTIVE_YN,
   RNT_USERS_PKG.GET_CHECKSUM(USER_ID) as CHECKSUM
from RNT_USERS
ORA-24344: success with compilation error
0/0     ORA-00904: "RNT_USERS_PKG"."GET_CHECKSUM": invalid identifier
SQL> --
SQL> -- RNT_USER_ASSIGNMENTS_V  (View) 
SQL> --
SQL> CREATE OR REPLACE FORCE VIEW RNT_USER_ASSIGNMENTS_V
(USER_ID, USER_LOGIN, USER_NAME, IS_ACTIVE_YN, ROLE_CODE, 
 ROLE_NAME, ROLE_ID, USER_ASSIGN_ID, BUSINESS_ID, BUSINESS_NAME, 
 PARENT_BUSINESS_ID, CHECKSUM)
AS 
select u.USER_ID, u.USER_LOGIN, u.USER_NAME, u.IS_ACTIVE_YN,
       r.ROLE_CODE, r.ROLE_NAME, r.ROLE_ID,
       a.USER_ASSIGN_ID, b.BUSINESS_ID, b.BUSINESS_NAME,
       b.PARENT_BUSINESS_ID,
       RNT_USER_ASSIGNMENTS_PKG.GET_CHECKSUM(a.USER_ASSIGN_ID) as CHECKSUM
from RNT_USERS u,
     RNT_USER_ROLES r,
     RNT_USER_ASSIGNMENTS a,
     RNT_BUSINESS_UNITS b
where a.ROLE_ID = r.ROLE_ID
  and a.USER_ID= u.USER_ID
  and a.BUSINESS_ID = b.BUSINESS_ID
ORA-24344: success with compilation error
0/0     ORA-00904: "RNT_USER_ASSIGNMENTS_PKG"."GET_CHECKSUM": invalid identifier
SQL> --
SQL> -- RNT_BUSINESS_UNITS_V  (View) 
SQL> --
SQL> CREATE OR REPLACE FORCE VIEW RNT_BUSINESS_UNITS_V
(BUSINESS_ID, BUSINESS_NAME, PARENT_BUSINESS_ID, CHECKSUM)
AS 
select BUSINESS_ID, BUSINESS_NAME, PARENT_BUSINESS_ID, RNT_BUSINESS_UNITS_PKG.GET_CHECKSUM(BUSINESS_ID) as CHECKSUM
from RNT_BUSINESS_UNITS          
start with (PARENT_BUSINESS_ID = 0 
            and BUSINESS_ID in (select BUSINESS_ID 
                                from RNT_USER_ASSIGNMENTS_V
                                where USER_ID = RNT_USERS_PKG.GET_USER()
                                  and ROLE_CODE = RNT_USERS_PKG.GET_ROLE()
                                )
           )                    
         or (BUSINESS_ID in (select BUSINESS_ID 
                             from RNT_USER_ASSIGNMENTS_V
                             where USER_ID = RNT_USERS_PKG.GET_USER()
                             and ROLE_CODE = RNT_USERS_PKG.GET_ROLE()
                            )
             )                 
connect by prior BUSINESS_ID = PARENT_BUSINESS_ID
ORA-24344: success with compilation error
0/0     ORA-04063: view "TESTRNTMGR.RNT_USER_ASSIGNMENTS_V" has errors
SQL> --
SQL> -- RNT_LOANS_V  (View) 
SQL> --
SQL> CREATE OR REPLACE FORCE VIEW RNT_LOANS_V
(LOAN_ID, PROPERTY_ID, POSITION, LOAN_DATE, LOAN_AMOUNT, 
 TERM, INTEREST_RATE, CREDIT_LINE_YN, ARM_YN, BALLOON_DATE, 
 AMORTIZATION_START, SETTLEMENT_DATE, CHECKSUM)
AS 
select 
   LOAN_ID, PROPERTY_ID, POSITION, 
   LOAN_DATE, LOAN_AMOUNT, 
   TERM, INTEREST_RATE, CREDIT_LINE_YN, 
   ARM_YN, BALLOON_DATE, AMORTIZATION_START, 
   SETTLEMENT_DATE, RNT_LOANS_PKG.GET_CHECKSUM(LOAN_ID) as CHECKSUM
from RNT_LOANS
ORA-24344: success with compilation error
0/0     ORA-00904: "RNT_LOANS_PKG"."GET_CHECKSUM": invalid identifier
SQL> --
SQL> -- RNT_LOOKUP_VALUES_V  (View) 
SQL> --
SQL> CREATE OR REPLACE FORCE VIEW RNT_LOOKUP_VALUES_V
(LOOKUP_TYPE_ID, LOOKUP_TYPE_CODE, LOOKUP_VALUE_ID, LOOKUP_CODE, LOOKUP_VALUE)
AS 
select t.LOOKUP_TYPE_ID, 
       t.LOOKUP_TYPE_CODE,
       v.LOOKUP_VALUE_ID, 
       v.LOOKUP_CODE, 
       v.LOOKUP_VALUE 
from RNT_LOOKUP_TYPES t,
     RNT_LOOKUP_VALUES v
where t.LOOKUP_TYPE_ID = v.LOOKUP_TYPE_ID
View created.
SQL> --
SQL> -- RNT_PROPERTIES_V  (View) 
SQL> --
SQL> CREATE OR REPLACE FORCE VIEW RNT_PROPERTIES_V
(PROPERTY_ID, BUSINESS_ID, BUSINESS_NAME, UNITS, ADDRESS1, 
 ADDRESS2, CITY, STATE, STATE_NAME, ZIPCODE, 
 DATE_PURCHASED, PURCHASE_PRICE, LAND_VALUE, DEPRECIATION_TERM, YEAR_BUILT, 
 BUILDING_SIZE, LOT_SIZE, DATE_SOLD, SALE_AMOUNT, NOTE_YN, 
 COUNT_UNITS, CHECKSUM)
AS 
select 
   p.PROPERTY_ID, 
   p.BUSINESS_ID,
   u.BUSINESS_NAME,
   p.UNITS,
   p.ADDRESS1, 
   p.ADDRESS2, 
   p.CITY, 
   p.STATE,
   v.LOOKUP_VALUE as STATE_NAME, 
   p.ZIPCODE, 
   p.DATE_PURCHASED, 
   p.PURCHASE_PRICE, 
   p.LAND_VALUE, 
   p.DEPRECIATION_TERM, 
   p.YEAR_BUILT, 
   p.BUILDING_SIZE, 
   p.LOT_SIZE, 
   p.DATE_SOLD, 
   p.SALE_AMOUNT, 
   p.NOTE_YN,
   (select count(*)  
    from RNT_PROPERTY_UNITS 
    where PROPERTY_ID = p.PROPERTY_ID
   ) as COUNT_UNITS,
   RNT_PROPERTIES_PKG.GET_CKECKSUM(p.PROPERTY_ID) as CHECKSUM 
from RNT_PROPERTIES p,
     RNT_BUSINESS_UNITS_V u,
     RNT_LOOKUP_VALUES_V v
where p.BUSINESS_ID = u.BUSINESS_ID
  and v.LOOKUP_TYPE_CODE = 'STATES'
  and v.LOOKUP_CODE = p.STATE
ORA-24344: success with compilation error
0/0     ORA-04063: view "TESTRNTMGR.RNT_BUSINESS_UNITS_V" has errors
SQL> --
SQL> -- RNT_PROPERTY_UNITS_V  (View) 
SQL> --
SQL> CREATE OR REPLACE FORCE VIEW RNT_PROPERTY_UNITS_V
(UNIT_ID, PROPERTY_ID, UNIT_NAME, UNIT_SIZE, BEDROOMS, 
 BATHROOMS, CHECKSUM)
AS 
select UNIT_ID, 
       PROPERTY_ID, 
       UNIT_NAME, UNIT_SIZE, BEDROOMS, 
       BATHROOMS,
       RNT_PROPERTY_UNITS_PKG.GET_CHECKSUM(UNIT_ID) as CHECKSUM
from RNT_PROPERTY_UNITS
order by UNIT_NAME
ORA-24344: success with compilation error
0/0     ORA-00904: "RNT_PROPERTY_UNITS_PKG"."GET_CHECKSUM": invalid identifier
SQL> --
SQL> -- RNT_TENANCY_AGREEMENT_V  (View) 
SQL> --
SQL> CREATE OR REPLACE FORCE VIEW RNT_TENANCY_AGREEMENT_V
(AGREEMENT_ID, UNIT_ID, AGREEMENT_DATE, TERM, AMOUNT, 
 AMOUNT_PERIOD, DATE_AVAILABLE, DEPOSIT, LAST_MONTH, DISCOUNT_AMOUNT, 
 DISCOUNT_TYPE, DISCOUNT_PERIOD, END_DATE, PROPERTY_ID, UNIT_NAME, 
 AMOUNTH_PERIOD_NAME, DISCOUNT_TYPE_NAME, CHECKSUM)
AS 
select 
   a.AGREEMENT_ID, 
   a.UNIT_ID, 
   a.AGREEMENT_DATE, 
   a.TERM, 
   a.AMOUNT, 
   a.AMOUNT_PERIOD, 
   a.DATE_AVAILABLE, 
   a.DEPOSIT, 
   a.LAST_MONTH, 
   a.DISCOUNT_AMOUNT, 
   a.DISCOUNT_TYPE, 
   a.DISCOUNT_PERIOD,
   a.END_DATE,
   u.PROPERTY_ID,
   u.UNIT_NAME,
   lv.LOOKUP_VALUE as AMOUNTH_PERIOD_NAME,
   dt.LOOKUP_VALUE as DISCOUNT_TYPE_NAME,
   RNT_TENANCY_AGREEMENT_PKG.GET_CHECKSUM(a.AGREEMENT_ID) as CHECKSUM
from RNT_TENANCY_AGREEMENT a,
     RNT_PROPERTY_UNITS u,
     RNT_LOOKUP_VALUES_V lv,
     (select LOOKUP_CODE, LOOKUP_VALUE from RNT_LOOKUP_VALUES_V where LOOKUP_TYPE_CODE = 'FEE_TYPE') dt
where u.UNIT_ID = a.UNIT_ID
  and lv.LOOKUP_TYPE_CODE = 'RENT_PERIOD'
  and lv.LOOKUP_CODE = a.AMOUNT_PERIOD     
  and dt.LOOKUP_CODE(+) = a.DISCOUNT_TYPE
ORA-24344: success with compilation error
0/0     ORA-00904: "RNT_TENANCY_AGREEMENT_PKG"."GET_CHECKSUM": invalid identifier
SQL> --
SQL> -- RNT_AGREEMENT_ACTIONS_V  (View) 
SQL> --
SQL> CREATE OR REPLACE FORCE VIEW RNT_AGREEMENT_ACTIONS_V
(ACTION_ID, AGREEMENT_ID, ACTION_DATE, ACTION_TYPE, COMMENTS, 
 RECOVERABLE_YN, ACTION_COST, CHECKSUM, ACTION_TYPE_NAME)
AS 
select aa.ACTION_ID
,      aa.AGREEMENT_ID
,      aa.ACTION_DATE
,      aa.ACTION_TYPE
,      aa.COMMENTS
,      aa.RECOVERABLE_YN
,      aa.ACTION_COST
,      rnt_sys_checksum_rec_pkg.get_checksum('AGREEMENT_ID='||aa.AGREEMENT_ID||'ACTION_DATE='||
       aa.ACTION_DATE||'ACTION_TYPE='||aa.ACTION_TYPE||'COMMENTS='||aa.COMMENTS||
       'RECOVERABLE_YN='||aa.RECOVERABLE_YN||'ACTION_COST='||aa.ACTION_COST) as CHECKSUM,
       lv.LOOKUP_VALUE as ACTION_TYPE_NAME
from RNT_AGREEMENT_ACTIONS aa,
     RNT_LOOKUP_VALUES_V lv
where aa.ACTION_TYPE = lv.LOOKUP_CODE
  and lv.LOOKUP_TYPE_CODE = 'ACTION_TYPES'
ORA-24344: success with compilation error
0/0     ORA-00904: "RNT_SYS_CHECKSUM_REC_PKG"."GET_CHECKSUM": invalid identifier
SQL> --
SQL> -- RNT_PEOPLE_LIST_V  (View) 
SQL> --
SQL> CREATE OR REPLACE FORCE VIEW RNT_PEOPLE_LIST_V
(PEOPLE_ID, FIRST_NAME, LAST_NAME, PHONE1, PHONE2, 
 DATE_OF_BIRTH, EMAIL_ADDRESS, SSN, DRIVERS_LICENSE, BUSINESS_ID, 
 IS_ENABLED_YN, CHECKSUM)
AS 
select p.PEOPLE_ID, p.FIRST_NAME, p.LAST_NAME, 
       p.PHONE1, p.PHONE2, p.DATE_OF_BIRTH, p.EMAIL_ADDRESS, 
       p.SSN, p.DRIVERS_LICENSE, p.BUSINESS_ID, 
       p.IS_ENABLED_YN,
       RNT_PEOPLE_PKG.GET_CHECKSUM(p.PEOPLE_ID) as CHECKSUM
from RNT_PEOPLE p,
     RNT_BUSINESS_UNITS_V bu
where bu.PARENT_BUSINESS_ID = 0
  and p.BUSINESS_ID = p.BUSINESS_ID
ORA-24344: success with compilation error
0/0     ORA-04063: view "TESTRNTMGR.RNT_BUSINESS_UNITS_V" has errors
SQL> --
SQL> -- RNT_TENANT_V  (View) 
SQL> --
SQL> CREATE OR REPLACE FORCE VIEW RNT_TENANT_V
(TENANT_ID, AGREEMENT_ID, STATUS, DEPOSIT_BALANCE, LAST_MONTH_BALANCE, 
 PEOPLE_ID, SECTION8_VOUCHER_AMOUNT, SECTION8_TENANT_PAYS, SECTION8_ID, CHECKSUM, 
 TENANT_STATUS_NAME, TENANT_NAME, SECTION8_NAME)
AS 
select 
   t.TENANT_ID, t.AGREEMENT_ID, t.STATUS, 
   t.DEPOSIT_BALANCE, t.LAST_MONTH_BALANCE, t.PEOPLE_ID, 
   t.SECTION8_VOUCHER_AMOUNT, t.SECTION8_TENANT_PAYS, t.SECTION8_ID,
   RNT_TENANT_PKG.GET_CHECKSUM(t.TENANT_ID) as CHECKSUM,
   lv.LOOKUP_VALUE as TENANT_STATUS_NAME,
   p.LAST_NAME||' '||p.FIRST_NAME as TENANT_NAME,
   so.SECTION_NAME as SECTION8_NAME  
from RNT_TENANT t,
     RNT_LOOKUP_VALUES_V lv,
     RNT_PEOPLE p,
     RNT_SECTION8_OFFICES so
where lv.LOOKUP_TYPE_CODE = 'TENANT_STATUS'
  and lv.LOOKUP_CODE = t.STATUS
  and p.PEOPLE_ID = t.PEOPLE_ID
  and so.SECTION8_ID(+) = t.SECTION8_ID
ORA-24344: success with compilation error
0/0     ORA-00904: "RNT_TENANT_PKG"."GET_CHECKSUM": invalid identifier
SQL> --
SQL> -- RNT_TENANT_V1  (View) 
SQL> --
SQL> CREATE OR REPLACE FORCE VIEW RNT_TENANT_V1
(TENANT_ID, AGREEMENT_ID, STATUS, DEPOSIT_BALANCE, LAST_MONTH_BALANCE, 
 PEOPLE_ID, SECTION8_VOUCHER_AMOUNT, SECTION8_TENANT_PAYS, SECTION8_ID, TENANT_NOTE, 
 CHECKSUM, TENANT_STATUS_NAME, LAST_NAME, FIRST_NAME, PHONE1, 
 PHONE2, EMAIL_ADDRESS, SSN, DRIVERS_LICENSE, IS_ENABLED_YN, 
 DATE_OF_BIRTH, SECTION8_NAME, UNIT_NAME, AMOUNT, AMOUNTH_PERIOD_NAME, 
 AGREEMENT_DATE)
AS 
select 
   t.TENANT_ID, t.AGREEMENT_ID, t.STATUS, 
   t.DEPOSIT_BALANCE, t.LAST_MONTH_BALANCE, t.PEOPLE_ID, 
   t.SECTION8_VOUCHER_AMOUNT, t.SECTION8_TENANT_PAYS, t.SECTION8_ID,
   t.TENANT_NOTE,
   RNT_TENANT_PKG.GET_CHECKSUM(t.TENANT_ID) as CHECKSUM,
   lv.LOOKUP_VALUE as TENANT_STATUS_NAME,
   p.LAST_NAME, p.FIRST_NAME,
   p.PHONE1, p.PHONE2, p.EMAIL_ADDRESS, 
   p.SSN, p.DRIVERS_LICENSE, p.IS_ENABLED_YN, p.DATE_OF_BIRTH,
   so.SECTION_NAME as SECTION8_NAME,
   pu.UNIT_NAME, ta.AMOUNT, ta.AMOUNTH_PERIOD_NAME, ta.AGREEMENT_DATE  
from RNT_TENANT t,
     RNT_LOOKUP_VALUES_V lv,
     RNT_PEOPLE p,
     RNT_SECTION8_OFFICES so,
     RNT_TENANCY_AGREEMENT_V ta,
     RNT_PROPERTY_UNITS pu
where lv.LOOKUP_TYPE_CODE = 'TENANT_STATUS'
  and lv.LOOKUP_CODE = t.STATUS
  and p.PEOPLE_ID = t.PEOPLE_ID
  and so.SECTION8_ID(+) = t.SECTION8_ID
  and ta.AGREEMENT_ID = t.AGREEMENT_ID
  and pu.UNIT_ID = ta.UNIT_ID
ORA-24344: success with compilation error
0/0     ORA-04063: view "TESTRNTMGR.RNT_TENANCY_AGREEMENT_V" has errors
SQL> @@packages.sql
SQL> --
SQL> -- Create Schema Script 
SQL> --   Database Version   : 10.2.0.1.0 
SQL> --   TOAD Version       : 9.0.0.160 
SQL> --   DB Connect String  : XE 
SQL> --   Schema             : RNTMGR 
SQL> --   Script Created by  : RNTMGR 
SQL> --   Script Created at  : 05.05.2007 8:24:45 
SQL> --   Physical Location  :  
SQL> --   Notes              :  
SQL> --
SQL> -- Object Counts: 
SQL> --   Packages: 11       Lines of Code: 464 
SQL> --   Package Bodies: 11 Lines of Code: 2192 
SQL> --
SQL> -- RNT_SYS_CHECKSUM_REC_PKG  (Package) 
SQL> --
SQL> CREATE OR REPLACE PACKAGE        RNT_SYS_CHECKSUM_REC_PKG AS
/******************************************************************************
   NAME:       RNT_SYS_CHECKSUM_REC_PKG
   PURPOSE: Calculate checksum for record.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        28.03.2007             1. Created this package.
******************************************************************************/

/* Raise when length of internal value > 32760.
If it meaning then you can use next code:
  rnt_sys_checksum_rec_pkg.init;
  rnt_sys_checksum_rec_pkg.append(<very long string about 32000>);
  x1 := rnt_sys_checksum_rec_pkg.get_checksum();
  
  rnt_sys_checksum_rec_pkg.init;
  rnt_sys_checksum_rec_pkg.append(<another very long string about 32000>);
  x2 := rnt_sys_checksum_rec_pkg.get_checksum();
  
  rnt_sys_checksum_rec_pkg.init;
  rnt_sys_checksum_rec_pkg.append(x1);
  rnt_sys_checksum_rec_pkg.append(x2);
  
  dbms_output.put_line(rnt_sys_checksum_rec_pkg.get_checksum());
*/   
E_BOUNDARY_ERROR EXCEPTION;

PRAGMA EXCEPTION_INIT (E_BOUNDARY_ERROR, -20001);

-- inital package state
procedure init;

-- append field value to checksum
procedure append(p_char VARCHAR2);
procedure append(p_number NUMBER);
procedure append(p_date DATE);


-- return internal value. Length of return value 32 bytes. 
function get_internal_value return varchar2;

-- set internal value
procedure set_internal_value(val varchar2);

-- return checksum
function get_checksum return varchar2; 

function get_checksum(x_columns_value in varchar2) return varchar2;

END RNT_SYS_CHECKSUM_REC_PKG;
Package created.
SQL> SHOW ERRORS
No errors.
SQL> --
SQL> -- RNT_USERS_PKG  (Package) 
SQL> --
SQL> CREATE OR REPLACE PACKAGE        RNT_USERS_PKG AS
/******************************************************************************
   NAME:       RNT_USERS_PKG
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12.04.2007             1. Created this package.
   for password 'Admin' md5 = e3afed0047b08059d0fada10f400c1e5
******************************************************************************/

function LOGIN(X_LOGIN RNT_USERS.USER_LOGIN%TYPE, 
               X_PASSWORD RNT_USERS.USER_PASSWORD%TYPE)
               return RNT_USERS.USER_ID%TYPE;

procedure SET_USER(X_USER_ID NUMBER);

procedure SET_ROLE(X_ROLE_CODE VARCHAR2);

function GET_USER return NUMBER;

function GET_ROLE return VARCHAR2;

function CHANGE_PASSWORD(X_USER_ID RNT_USERS.USER_ID%TYPE, 
                         X_NEW_PASSWORD RNT_USERS.USER_PASSWORD%TYPE,
                         X_OLD_PASSWORD RNT_USERS.USER_PASSWORD%TYPE) return VARCHAR2;

procedure CHANGE_ACTIVE_FLAG(X_USER_ID RNT_USERS.USER_ID%TYPE);

function get_checksum(X_USER_ID RNT_USERS.USER_ID%TYPE) return varchar2;

procedure UPDATE_ROW(X_USER_ID RNT_USERS.USER_ID%TYPE,
                     X_USER_LOGIN RNT_USERS.USER_LOGIN%TYPE,
                     X_USER_NAME RNT_USERS.USER_NAME%TYPE,
                     X_IS_ACTIVE_YN RNT_USERS.IS_ACTIVE_YN%TYPE,
                     X_CHECKSUM VARCHAR2
                     );

function INSERT_ROW(X_USER_LOGIN RNT_USERS.USER_LOGIN%TYPE,
                    X_USER_NAME RNT_USERS.USER_NAME%TYPE,
                    X_USER_PASSWORD RNT_USERS.USER_PASSWORD%TYPE, 
                    X_IS_ACTIVE_YN RNT_USERS.IS_ACTIVE_YN%TYPE                   
                   ) return RNT_USERS.USER_ID%TYPE; 

function GET_CURRENT_BUSINESS_UNIT return RNT_BUSINESS_UNITS.BUSINESS_ID%TYPE;

END RNT_USERS_PKG;
Package created.
SQL> SHOW ERRORS
No errors.
SQL> --
SQL> -- RNT_AGREEMENT_ACTIONS_PKG  (Package) 
SQL> --
SQL> CREATE OR REPLACE package        RNT_AGREEMENT_ACTIONS_PKG as 
/*********************************************************************
  Copyright (c) Visulate 2007        All rights reserved worldwide
   Name:      RNT_AGREEMENT_ACTIONS_PKG
   Purpose:   API's for RNT_AGREEMENT_ACTIONS table

   Revision History
   Ver        Date        Author           Description
   --------   ---------   ---------------- ---------------------
   1.0        03-MAY-07   Auto Generated   Initial Version

*********************************************************************/
  procedure update_row(X_ACTION_ID IN RNT_AGREEMENT_ACTIONS.ACTION_ID%TYPE
  ,                   X_AGREEMENT_ID IN RNT_AGREEMENT_ACTIONS.AGREEMENT_ID%TYPE
  ,                   X_ACTION_DATE IN RNT_AGREEMENT_ACTIONS.ACTION_DATE%TYPE
  ,                   X_ACTION_TYPE IN RNT_AGREEMENT_ACTIONS.ACTION_TYPE%TYPE
  ,                   X_COMMENTS IN RNT_AGREEMENT_ACTIONS.COMMENTS%TYPE
  ,                   X_RECOVERABLE_YN IN RNT_AGREEMENT_ACTIONS.RECOVERABLE_YN%TYPE
  ,                   X_ACTION_COST IN RNT_AGREEMENT_ACTIONS.ACTION_COST%TYPE  
  ,                   X_CHECKSUM IN VARCHAR2  
  );

  function insert_row(X_AGREEMENT_ID IN RNT_AGREEMENT_ACTIONS.AGREEMENT_ID%TYPE
  ,                   X_ACTION_DATE IN RNT_AGREEMENT_ACTIONS.ACTION_DATE%TYPE
  ,                   X_ACTION_TYPE IN RNT_AGREEMENT_ACTIONS.ACTION_TYPE%TYPE
  ,                   X_ACTION_COST IN RNT_AGREEMENT_ACTIONS.ACTION_COST%TYPE  
  ,                   X_COMMENTS IN RNT_AGREEMENT_ACTIONS.COMMENTS%TYPE
  ,                   X_RECOVERABLE_YN IN RNT_AGREEMENT_ACTIONS.RECOVERABLE_YN%TYPE  
  ) return RNT_AGREEMENT_ACTIONS.ACTION_ID%TYPE;

  procedure delete_row(X_ACTION_ID IN RNT_AGREEMENT_ACTIONS.ACTION_ID%TYPE);

end RNT_AGREEMENT_ACTIONS_PKG;
Package created.
SQL> SHOW ERRORS
No errors.
SQL> --
SQL> -- RNT_SYS_CHECKSUM_REC_PKG  (Package Body) 
SQL> --
SQL> CREATE OR REPLACE PACKAGE BODY        RNT_SYS_CHECKSUM_REC_PKG AS
/******************************************************************************
   NAME:       RNT_SYS_CHECKSUM_REC_PKG
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        28.03.2007             1. Created this package body.
******************************************************************************/

g_columns_value VARCHAR2(32760); 
g_boundary  CONSTANT VARCHAR2(20):= 'aguk@lan.aommz.com';

procedure init
is
begin
    g_columns_value := '';  
end;

procedure append(p_char varchar2)
is
begin
   -- append field separator, if first field value was adding
   if g_columns_value is not null then
      if  length(g_columns_value) + length(g_boundary) > 32760 then
         raise E_BOUNDARY_ERROR;
      end if;
      g_columns_value := g_columns_value||g_boundary;
   end if;
   
   if length(g_columns_value) + length(p_char) > 32760 then
      raise E_BOUNDARY_ERROR;
   end if;
      
   g_columns_value := g_columns_value||p_char;    
end;

procedure append(p_number NUMBER)
is
begin
  append(to_char(p_number));
end;

procedure append(p_date DATE)
is
begin
  append('RRRRMMDDHH24MISS');
end;


function get_checksum return varchar2
is
  x_field varchar2(32760) := '';
  x_key_string varchar2(16) := 'VISULATE-RENTAL_';
begin
  return RAWTOHEX(UTL_RAW.CAST_TO_RAW(dbms_obfuscation_toolkit.MD5(input_string => g_columns_value)));
end;

-- return internal value. 
function get_internal_value return varchar2
is
begin
  return g_columns_value;
end;

-- set internal value
procedure set_internal_value(val varchar2)
is
begin
  g_columns_value := val;
end;

function get_checksum(x_columns_value in varchar2) return varchar2 is
begin
  init;
  append(x_columns_value);
  return get_checksum;
end  get_checksum;
 

END RNT_SYS_CHECKSUM_REC_PKG;
Package body created.
SQL> SHOW ERRORS
No errors.
SQL> --
SQL> -- RNT_USERS_PKG  (Package Body) 
SQL> --
SQL> CREATE OR REPLACE PACKAGE BODY        RNT_USERS_PKG AS
/******************************************************************************
   NAME:       RNT_USERS_PKG
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12.04.2007             1. Created this package body.
******************************************************************************/

-- current user
G_USER_ID NUMBER;
G_ROLE_CODE VARCHAR2(30);
--G_IS_ADMIN VARCHAR2(1);

function is_user_role(X_USER_ID RNT_USERS.USER_ID%TYPE, 
                      X_ROLE_CODE RNT_USER_ROLES.ROLE_CODE%TYPE) return boolean
is
  x NUMBER;
begin
  select 1
  into x
  from DUAL 
  where exists (
                  select 1
                  from  RNT_USER_ASSIGNMENTS_V
                  where USER_ID = X_USER_ID
                    and ROLE_CODE = X_ROLE_CODE 
               );
  return TRUE;
exception  
  when NO_DATA_FOUND then
    return FALSE;  
end;

function LOGIN(X_LOGIN RNT_USERS.USER_LOGIN%TYPE, 
               X_PASSWORD RNT_USERS.USER_PASSWORD%TYPE)
           return RNT_USERS.USER_ID%TYPE
is
  x RNT_USERS.USER_ID%TYPE;
begin
  x := -1;
  select USER_ID
  into x
  from RNT_USERS
  where UPPER(USER_LOGIN) = UPPER(X_LOGIN)
    and USER_PASSWORD = X_PASSWORD
    and IS_ACTIVE_YN = 'Y';
  return x;  
exception
  when NO_DATA_FOUND or TOO_MANY_ROWS then
     return -1;
  when OTHERS then
     return -1;     
end;

procedure set_user(X_USER_ID NUMBER)
is
  x NUMBER;
begin
  select USER_ID --, IS_ADMIN_YN
  into g_user_id --, g_is_admin
  from RNT_USERS
  where USER_ID = X_USER_ID;
end;

procedure set_role(X_ROLE_CODE VARCHAR2)
is
begin
  select ROLE_CODE
  into g_role_code
  from RNT_USER_ASSIGNMENTS_V
  where USER_ID = G_USER_ID
    and ROLE_CODE = X_ROLE_CODE
  group by ROLE_CODE ;  
end;

function GET_USER return NUMBER
is
begin
  return G_USER_ID;
end;

function GET_ROLE return VARCHAR2
is
begin
  return G_ROLE_CODE;
end;

function CHANGE_PASSWORD(X_USER_ID RNT_USERS.USER_ID%TYPE, 
                         X_NEW_PASSWORD RNT_USERS.USER_PASSWORD%TYPE,
                         X_OLD_PASSWORD RNT_USERS.USER_PASSWORD%TYPE) return VARCHAR2
is
  x NUMBER;
begin
  begin
   select 1
   into x 
   from RNT_USERS
   where USER_ID = X_USER_ID
     and USER_PASSWORD = X_OLD_PASSWORD;
  exception
    when NO_DATA_FOUND then
       RAISE_APPLICATION_ERROR(-20340, 'Cannot change password. Old password is a not valid.');   
  end; 
  
  update RNT_USERS
  set USER_PASSWORD = X_NEW_PASSWORD
  where USER_ID = X_USER_ID;
  if SQL%ROWCOUNT = 1 then
     return 'Y';
  end if;
  return 'N';   
end;

procedure change_active_flag(X_USER_ID RNT_USERS.USER_ID%TYPE)
is
  x VARCHAR2(1);
begin
  select IS_ACTIVE_YN
  into x
  from RNT_USERS
  where USER_ID = X_USER_ID;
  
  if x = 'N' then
     x := 'Y';
  else
     x := 'N';
  end if;
  
  update RNT_USERS
  set IS_ACTIVE_YN = x
  where USER_ID = X_USER_ID;    

end;

function get_checksum(X_USER_ID RNT_USERS.USER_ID%TYPE) return varchar2
is
begin
  for x in (select USER_ID, USER_LOGIN, USER_NAME, USER_PASSWORD, IS_ACTIVE_YN
            from RNT_USERS 
            where USER_ID = X_USER_ID) 
 loop
     RNT_SYS_CHECKSUM_REC_PKG.INIT;
     RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.USER_ID);         
     RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.USER_LOGIN);
     RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.USER_NAME); 
     RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.IS_ACTIVE_YN);
     return RNT_SYS_CHECKSUM_REC_PKG.GET_CHECKSUM;
 end loop;           
end;

function check_unique(X_USER_ID RNT_USERS.USER_ID%TYPE,
                      X_USER_LOGIN RNT_USERS.USER_LOGIN%TYPE
                      ) return boolean
is
  x NUMBER;
begin
   select 1 
   into x
   from DUAL
   where exists (
                   select 1
                   from RNT_USERS
                   where UPPER(USER_LOGIN) = UPPER(X_USER_LOGIN)
                     and (USER_ID != X_USER_ID or X_USER_ID is null)
                 );
  return false;
exception
  when NO_DATA_FOUND then
     return true;                        
end;                       
                      

procedure lock_row(X_USER_ID RNT_USERS.USER_ID%TYPE)
is
    cursor c is
             select USER_ID, USER_LOGIN, USER_NAME, 
                    USER_PASSWORD, IS_ACTIVE_YN
             from RNT_USERS
             where USER_ID = X_USER_ID
             for update of USER_ID nowait; 
begin
  open c;
  close c;
exception
  when OTHERS then
    if SQLCODE = -54 then
      RAISE_APPLICATION_ERROR(-20001, 'Cannot changed record. Record is locked.');
    end if; 
end;


procedure UPDATE_ROW(X_USER_ID RNT_USERS.USER_ID%TYPE,
                     X_USER_LOGIN RNT_USERS.USER_LOGIN%TYPE,
                     X_USER_NAME RNT_USERS.USER_NAME%TYPE,
                     X_IS_ACTIVE_YN RNT_USERS.IS_ACTIVE_YN%TYPE,
                     X_CHECKSUM VARCHAR2
                     )
is
l_checksum varchar2(32); 
begin
   
   lock_row(X_USER_ID);
   
   -- validate checksum   
   l_checksum := get_checksum(X_USER_ID);
   if X_CHECKSUM != l_checksum then
      RAISE_APPLICATION_ERROR(-20002, 'Record was changed another user.');
   end if;

   if not check_unique(X_USER_ID, X_USER_LOGIN) then
        RAISE_APPLICATION_ERROR(-20006, 'User login must be unique');                      
   end if;   
   
   update RNT_USERS
   set USER_LOGIN    = X_USER_LOGIN,
       USER_NAME     = X_USER_NAME,
       IS_ACTIVE_YN  = X_IS_ACTIVE_YN
   where USER_ID     = X_USER_ID;
end;
       
function INSERT_ROW(X_USER_LOGIN RNT_USERS.USER_LOGIN%TYPE,
                    X_USER_NAME RNT_USERS.USER_NAME%TYPE,
                    X_USER_PASSWORD RNT_USERS.USER_PASSWORD%TYPE, 
                    X_IS_ACTIVE_YN RNT_USERS.IS_ACTIVE_YN%TYPE                   
                   ) return RNT_USERS.USER_ID%TYPE
is
   x RNT_USERS.USER_ID%TYPE;
begin
   if not check_unique(NULL, X_USER_LOGIN) then
        RAISE_APPLICATION_ERROR(-20006, 'User login must be unique');                      
   end if;   
   insert into RNT_USERS (USER_ID, USER_LOGIN, USER_NAME, 
                          USER_PASSWORD, IS_ACTIVE_YN) 
   values (RNT_USERS_SEQ.NEXTVAL, X_USER_LOGIN, X_USER_NAME, 
           X_USER_PASSWORD, X_IS_ACTIVE_YN)
   returning USER_ID into x;
   return x;
end;
 
function GET_CURRENT_BUSINESS_UNIT return RNT_BUSINESS_UNITS.BUSINESS_ID%TYPE
is
  x RNT_BUSINESS_UNITS.BUSINESS_ID%TYPE;
begin
  select BUSINESS_ID
  into x
  from RNT_BUSINESS_UNITS
  where PARENT_BUSINESS_ID = 0;
  
  return x;
end;
                                
/*
function IS_ADMIN return VARCHAR2
is
begin
  return g_is_admin;
end;
*/
BEGIN
 G_USER_ID := -1;
 G_ROLE_CODE := '';
-- G_IS_ADMIN := 'N';
END RNT_USERS_PKG;
ORA-24344: success with compilation error
27/25   PL/SQL: ORA-04063: view "TESTRNTMGR.RNT_USER_ASSIGNMENTS_V" has errors22/3    PL/SQL: SQL Statement ignored73/8    PL/SQL: ORA-04063: view "TESTRNTMGR.RNT_USER_ASSIGNMENTS_V" has errors71/3    PL/SQL: SQL Statement ignored
SQL> SHOW ERRORS
Errors for PACKAGE BODY RNT_USERS_PKG

LINE/COL ERROR                                                            
-------- -----------------------------------------------------------------
27/25    PL/SQL: ORA-04063: view "TESTRNTMGR.RNT_USER_ASSIGNMENTS_V" has e
         rrors                                                            
                                                                                
22/3     PL/SQL: SQL Statement ignored                                    
73/8     PL/SQL: ORA-04063: view "TESTRNTMGR.RNT_USER_ASSIGNMENTS_V" has e
         rrors                                                            
                                                                                
71/3     PL/SQL: SQL Statement ignored                                    
SQL> --
SQL> -- RNT_AGREEMENT_ACTIONS_PKG  (Package Body) 
SQL> --
SQL> CREATE OR REPLACE PACKAGE BODY        RNT_AGREEMENT_ACTIONS_PKG AS
/******************************************************************************
   NAME:       RNT_AGREEMENT_ACTIONS_PKG
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        03.05.2007             1. Created this package body.
******************************************************************************/

procedure lock_row(X_ACTION_ID IN RNT_AGREEMENT_ACTIONS.ACTION_ID%TYPE)
is
  cursor c is
     select * 
     from RNT_AGREEMENT_ACTIONS   
     where ACTION_ID = X_ACTION_ID
     for update of ACTION_ID nowait; 
begin
  open c;
  close c;
exception
  when OTHERS then
    if SQLCODE = -54 then
      RAISE_APPLICATION_ERROR(-20001, 'Cannot changed record. Record is locked.');
    end if;       
end;

function check_unique(X_ACTION_ID    RNT_AGREEMENT_ACTIONS.ACTION_ID%TYPE,       
                      X_AGREEMENT_ID RNT_AGREEMENT_ACTIONS.AGREEMENT_ID%TYPE,  
                      X_ACTION_DATE  RNT_AGREEMENT_ACTIONS.ACTION_DATE%TYPE,  
                      X_ACTION_TYPE  RNT_AGREEMENT_ACTIONS.ACTION_TYPE%TYPE
                      ) return boolean
is
  x NUMBER;
begin
   select 1 
   into x
   from DUAL
   where exists (
                   select 1
                   from RNT_AGREEMENT_ACTIONS
                   where (ACTION_ID != X_ACTION_ID or X_ACTION_ID is null) 
                     and AGREEMENT_ID = X_AGREEMENT_ID
                     and ACTION_DATE = X_ACTION_DATE
                     and ACTION_TYPE = X_ACTION_TYPE             
                 );
  return false;
exception
  when NO_DATA_FOUND then
     return true;                        
end;     


function get_checksum(X_ACTION_ID IN RNT_AGREEMENT_ACTIONS.ACTION_ID%TYPE)
return varchar2
is
  v varchar2(64);
begin
  select CHECKSUM
  into v 
  from RNT_AGREEMENT_ACTIONS_V 
  where ACTION_ID = X_ACTION_ID;
  return v;
end; 

  procedure update_row(X_ACTION_ID IN RNT_AGREEMENT_ACTIONS.ACTION_ID%TYPE
  ,                   X_AGREEMENT_ID IN RNT_AGREEMENT_ACTIONS.AGREEMENT_ID%TYPE
  ,                   X_ACTION_DATE IN RNT_AGREEMENT_ACTIONS.ACTION_DATE%TYPE
  ,                   X_ACTION_TYPE IN RNT_AGREEMENT_ACTIONS.ACTION_TYPE%TYPE
  ,                   X_COMMENTS IN RNT_AGREEMENT_ACTIONS.COMMENTS%TYPE
  ,                   X_RECOVERABLE_YN IN RNT_AGREEMENT_ACTIONS.RECOVERABLE_YN%TYPE
  ,                   X_ACTION_COST IN RNT_AGREEMENT_ACTIONS.ACTION_COST%TYPE  
  ,                   X_CHECKSUM IN VARCHAR2  
  )
is
 l_checksum varchar2(32); 
begin
   lock_row(X_ACTION_ID);
   
   -- validate checksum   
   l_checksum := get_checksum(X_ACTION_ID);
   if X_CHECKSUM != l_checksum then
      RAISE_APPLICATION_ERROR(-20002, 'Record was changed another user.');
   end if;
      
   if not check_unique(X_ACTION_ID, X_AGREEMENT_ID, X_ACTION_DATE, X_ACTION_TYPE) then
        RAISE_APPLICATION_ERROR(-20006, 'Action must be unique.');                      
   end if;   

   update RNT_AGREEMENT_ACTIONS
   set AGREEMENT_ID   = X_AGREEMENT_ID,
       ACTION_DATE    = X_ACTION_DATE,
       ACTION_TYPE    = X_ACTION_TYPE,
       COMMENTS       = X_COMMENTS,
       RECOVERABLE_YN = X_RECOVERABLE_YN,
       ACTION_COST    = X_ACTION_COST
   where ACTION_ID = X_ACTION_ID;
end;  

  function insert_row(X_AGREEMENT_ID IN RNT_AGREEMENT_ACTIONS.AGREEMENT_ID%TYPE
  ,                   X_ACTION_DATE IN RNT_AGREEMENT_ACTIONS.ACTION_DATE%TYPE
  ,                   X_ACTION_TYPE IN RNT_AGREEMENT_ACTIONS.ACTION_TYPE%TYPE
  ,                   X_ACTION_COST IN RNT_AGREEMENT_ACTIONS.ACTION_COST%TYPE  
  ,                   X_COMMENTS IN RNT_AGREEMENT_ACTIONS.COMMENTS%TYPE
  ,                   X_RECOVERABLE_YN IN RNT_AGREEMENT_ACTIONS.RECOVERABLE_YN%TYPE  
  ) return RNT_AGREEMENT_ACTIONS.ACTION_ID%TYPE
is  
  x RNT_AGREEMENT_ACTIONS.ACTION_ID%TYPE;
begin

   if not check_unique(NULL, X_AGREEMENT_ID, X_ACTION_DATE, X_ACTION_TYPE) then
        RAISE_APPLICATION_ERROR(-20006, 'Action must be unique.');                      
   end if;

   insert into RNT_AGREEMENT_ACTIONS (
           ACTION_ID, AGREEMENT_ID, ACTION_DATE, 
           ACTION_TYPE, COMMENTS, RECOVERABLE_YN, 
           ACTION_COST) 
   values(RNT_AGREEMENT_ACTIONS_SEQ.NEXTVAL, X_AGREEMENT_ID, X_ACTION_DATE, 
          X_ACTION_TYPE, X_COMMENTS, X_RECOVERABLE_YN, 
          X_ACTION_COST)
   returning ACTION_ID into x;
             
   return x;
end;
  

procedure delete_row(X_ACTION_ID IN RNT_AGREEMENT_ACTIONS.ACTION_ID%TYPE)
as
begin
  delete from RNT_AGREEMENT_ACTIONS
  where ACTION_ID = X_ACTION_ID;
end;


END RNT_AGREEMENT_ACTIONS_PKG;
Package body created.
SQL> SHOW ERRORS
No errors.
SQL> --
SQL> -- RNT_PEOPLE_PKG  (Package) 
SQL> --
SQL> CREATE OR REPLACE PACKAGE        RNT_PEOPLE_PKG AS
/******************************************************************************
   NAME:       RNT_PEOPLE_PKG
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        26.04.2007             1. Created this package.
******************************************************************************/

function get_checksum(X_PEOPLE_ID NUMBER) return varchar2;

procedure update_row(X_PEOPLE_ID     RNT_PEOPLE.PEOPLE_ID%TYPE,
                     X_FIRST_NAME    RNT_PEOPLE.FIRST_NAME%TYPE,
                     X_LAST_NAME     RNT_PEOPLE.LAST_NAME%TYPE,
                     X_PHONE1        RNT_PEOPLE.PHONE1%TYPE,
                     X_PHONE2        RNT_PEOPLE.PHONE2%TYPE,
                     X_DATE_OF_BIRTH RNT_PEOPLE.DATE_OF_BIRTH%TYPE,
                     X_EMAIL_ADDRESS RNT_PEOPLE.EMAIL_ADDRESS%TYPE,
                     X_SSN           RNT_PEOPLE.SSN%TYPE,
                     X_DRIVERS_LICENSE RNT_PEOPLE.DRIVERS_LICENSE%TYPE,
                     X_IS_ENABLED_YN RNT_PEOPLE.IS_ENABLED_YN%TYPE,
                     X_CHECKSUM      VARCHAR2
                    );
                    
function insert_row( X_FIRST_NAME    RNT_PEOPLE.FIRST_NAME%TYPE,
                     X_LAST_NAME     RNT_PEOPLE.LAST_NAME%TYPE,
                     X_PHONE1        RNT_PEOPLE.PHONE1%TYPE,
                     X_PHONE2        RNT_PEOPLE.PHONE2%TYPE,
                     X_DATE_OF_BIRTH RNT_PEOPLE.DATE_OF_BIRTH%TYPE,
                     X_EMAIL_ADDRESS RNT_PEOPLE.EMAIL_ADDRESS%TYPE,
                     X_SSN           RNT_PEOPLE.SSN%TYPE,
                     X_DRIVERS_LICENSE RNT_PEOPLE.DRIVERS_LICENSE%TYPE,
                     X_IS_ENABLED_YN RNT_PEOPLE.IS_ENABLED_YN%TYPE
                    ) return RNT_PEOPLE.PEOPLE_ID%TYPE;
                    
procedure delete_row(X_PEOPLE_ID       RNT_PEOPLE.PEOPLE_ID%TYPE);
END RNT_PEOPLE_PKG;
Package created.
SQL> SHOW ERRORS
No errors.
SQL> --
SQL> -- RNT_TENANT_PKG  (Package) 
SQL> --
SQL> CREATE OR REPLACE PACKAGE        RNT_TENANT_PKG AS
/******************************************************************************
   NAME:       RNT_TENANT_PKG
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        29.04.2007             1. Created this package.
******************************************************************************/

function get_checksum(X_TENANT_ID RNT_TENANT.TENANT_ID%TYPE) return VARCHAR2;

procedure lock_row(X_TENANT_ID RNT_TENANT.TENANT_ID%TYPE);

procedure short_update_row(X_TENANT_ID RNT_TENANT.TENANT_ID%TYPE,
                     X_AGREEMENT_ID RNT_TENANT.AGREEMENT_ID%TYPE,
                     X_STATUS RNT_TENANT.STATUS%TYPE,
                     X_DEPOSIT_BALANCE RNT_TENANT.DEPOSIT_BALANCE%TYPE,
                     X_LAST_MONTH_BALANCE RNT_TENANT.LAST_MONTH_BALANCE%TYPE,
                     X_PEOPLE_ID RNT_TENANT.PEOPLE_ID%TYPE,
                     X_SECTION8_VOUCHER_AMOUNT RNT_TENANT.SECTION8_VOUCHER_AMOUNT%TYPE,
                     X_SECTION8_TENANT_PAYS RNT_TENANT.SECTION8_TENANT_PAYS%TYPE,
                     X_SECTION8_ID RNT_TENANT.SECTION8_ID%TYPE,
                     X_CHECKSUM VARCHAR2
                     );

procedure update_row(X_TENANT_ID RNT_TENANT.TENANT_ID%TYPE,
                     X_AGREEMENT_ID RNT_TENANT.AGREEMENT_ID%TYPE,
                     X_STATUS RNT_TENANT.STATUS%TYPE,
                     X_DEPOSIT_BALANCE RNT_TENANT.DEPOSIT_BALANCE%TYPE,
                     X_LAST_MONTH_BALANCE RNT_TENANT.LAST_MONTH_BALANCE%TYPE,
                     X_PEOPLE_ID RNT_TENANT.PEOPLE_ID%TYPE,
                     X_SECTION8_VOUCHER_AMOUNT RNT_TENANT.SECTION8_VOUCHER_AMOUNT%TYPE,
                     X_SECTION8_TENANT_PAYS RNT_TENANT.SECTION8_TENANT_PAYS%TYPE,
                     X_SECTION8_ID RNT_TENANT.SECTION8_ID%TYPE,
                     X_CHECKSUM VARCHAR2,
                     X_TENANT_NOTE RNT_TENANT.TENANT_NOTE%TYPE
                     );
                     
function insert_row(X_AGREEMENT_ID RNT_TENANT.AGREEMENT_ID%TYPE,
                    X_STATUS RNT_TENANT.STATUS%TYPE,
                    X_DEPOSIT_BALANCE RNT_TENANT.DEPOSIT_BALANCE%TYPE,
                    X_LAST_MONTH_BALANCE RNT_TENANT.LAST_MONTH_BALANCE%TYPE,
                    X_PEOPLE_ID RNT_TENANT.PEOPLE_ID%TYPE,
                    X_SECTION8_VOUCHER_AMOUNT RNT_TENANT.SECTION8_VOUCHER_AMOUNT%TYPE,
                    X_SECTION8_TENANT_PAYS RNT_TENANT.SECTION8_TENANT_PAYS%TYPE,
                    X_SECTION8_ID RNT_TENANT.SECTION8_ID%TYPE
                   ) return RNT_TENANT.TENANT_ID%TYPE;

procedure delete_row(X_TENANT_ID RNT_TENANT.TENANT_ID%TYPE);

END RNT_TENANT_PKG;
Package created.
SQL> SHOW ERRORS
No errors.
SQL> --
SQL> -- RNT_USER_ASSIGNMENTS_PKG  (Package) 
SQL> --
SQL> CREATE OR REPLACE PACKAGE        RNT_USER_ASSIGNMENTS_PKG AS
/******************************************************************************
   NAME:       RNT_USER_ASSIGNMENTS_PKG
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        22.04.2007             1. Created this package.
******************************************************************************/

function get_checksum(X_USER_ASSIGN_ID RNT_USER_ASSIGNMENTS.USER_ASSIGN_ID%TYPE) return varchar2; 

function insert_row(X_USER_ID RNT_USER_ASSIGNMENTS.USER_ID%TYPE,
                    X_ROLE_ID RNT_USER_ASSIGNMENTS.ROLE_ID%TYPE,
                    X_BUSINESS_ID RNT_USER_ASSIGNMENTS.BUSINESS_ID%TYPE)
                    return RNT_USER_ASSIGNMENTS.USER_ASSIGN_ID%TYPE;
                    
procedure delete_row(X_USER_ASSIGN_ID RNT_USER_ASSIGNMENTS.USER_ASSIGN_ID%TYPE);                    
                    
                     

END RNT_USER_ASSIGNMENTS_PKG;
Package created.
SQL> SHOW ERRORS
No errors.
SQL> --
SQL> -- RNT_LOANS_PKG  (Package) 
SQL> --
SQL> CREATE OR REPLACE PACKAGE        RNT_LOANS_PKG AS
/******************************************************************************
   NAME:       RNT_LOANS_PKG
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        08.04.2007             1. Created this package.
******************************************************************************/

function get_checksum(X_LOAN_ID RNT_LOANS.LOAN_ID%TYPE) return VARCHAR2;

procedure update_row(X_LOAN_ID            RNT_LOANS.LOAN_ID%TYPE,
                     X_PROPERTY_ID        RNT_LOANS.PROPERTY_ID%TYPE,
                     X_POSITION           RNT_LOANS.POSITION%TYPE,
                     X_LOAN_DATE          RNT_LOANS.LOAN_DATE%TYPE,
                     X_LOAN_AMOUNT        RNT_LOANS.LOAN_AMOUNT%TYPE,
                     X_TERM               RNT_LOANS.TERM%TYPE,
                     X_INTEREST_RATE      RNT_LOANS.INTEREST_RATE%TYPE,
                     X_CREDIT_LINE_YN     RNT_LOANS.CREDIT_LINE_YN%TYPE,
                     X_ARM_YN             RNT_LOANS.ARM_YN%TYPE,
                     X_BALLOON_DATE       RNT_LOANS.BALLOON_DATE%TYPE,
                     X_AMORTIZATION_START RNT_LOANS.AMORTIZATION_START%TYPE,
                     X_SETTLEMENT_DATE    RNT_LOANS.SETTLEMENT_DATE%TYPE,
                     X_CHECKSUM           VARCHAR2
                    ); 

function insert_row( X_PROPERTY_ID        RNT_LOANS.PROPERTY_ID%TYPE,
                     X_POSITION           RNT_LOANS.POSITION%TYPE,
                     X_LOAN_DATE          RNT_LOANS.LOAN_DATE%TYPE,
                     X_LOAN_AMOUNT        RNT_LOANS.LOAN_AMOUNT%TYPE,
                     X_TERM               RNT_LOANS.TERM%TYPE,
                     X_INTEREST_RATE      RNT_LOANS.INTEREST_RATE%TYPE,
                     X_CREDIT_LINE_YN     RNT_LOANS.CREDIT_LINE_YN%TYPE,
                     X_ARM_YN             RNT_LOANS.ARM_YN%TYPE,
                     X_BALLOON_DATE       RNT_LOANS.BALLOON_DATE%TYPE,
                     X_AMORTIZATION_START RNT_LOANS.AMORTIZATION_START%TYPE,
                     X_SETTLEMENT_DATE    RNT_LOANS.SETTLEMENT_DATE%TYPE
                    ) return RNT_LOANS.LOAN_ID%TYPE;

procedure delete_row(X_LOAN_ID       RNT_LOANS.LOAN_ID%TYPE);                     
END RNT_LOANS_PKG;
Package created.
SQL> SHOW ERRORS
No errors.
SQL> --
SQL> -- RNT_PROPERTY_UNITS_PKG  (Package) 
SQL> --
SQL> CREATE OR REPLACE PACKAGE        RNT_PROPERTY_UNITS_PKG AS
/******************************************************************************
   NAME:       RNT_PROPERTY_UNITS_PKG
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        04.04.2007             1. Created this package.
******************************************************************************/

function get_checksum(p_unit_id RNT_PROPERTY_UNITS.UNIT_ID%TYPE) return VARCHAR2;

procedure lock_row(X_UNIT_ID RNT_PROPERTY_UNITS.UNIT_ID%TYPE);

procedure update_row(X_UNIT_ID RNT_PROPERTY_UNITS.UNIT_ID%TYPE, 
                     X_PROPERTY_ID RNT_PROPERTY_UNITS.PROPERTY_ID%TYPE, 
                     X_UNIT_NAME RNT_PROPERTY_UNITS.UNIT_NAME%TYPE, 
                     X_UNIT_SIZE RNT_PROPERTY_UNITS.UNIT_SIZE%TYPE, 
                     X_BEDROOMS RNT_PROPERTY_UNITS.BEDROOMS%TYPE, 
                     X_BATHROOMS RNT_PROPERTY_UNITS.BATHROOMS%TYPE,
                     X_CHECKSUM VARCHAR2);

function insert_row( X_PROPERTY_ID RNT_PROPERTY_UNITS.PROPERTY_ID%TYPE, 
                     X_UNIT_NAME RNT_PROPERTY_UNITS.UNIT_NAME%TYPE, 
                     X_UNIT_SIZE RNT_PROPERTY_UNITS.UNIT_SIZE%TYPE, 
                     X_BEDROOMS RNT_PROPERTY_UNITS.BEDROOMS%TYPE, 
                     X_BATHROOMS RNT_PROPERTY_UNITS.BATHROOMS%TYPE
                    ) return RNT_PROPERTY_UNITS.UNIT_ID%TYPE;

function is_exists_childs(X_UNIT_ID RNT_PROPERTY_UNITS.UNIT_ID%TYPE) return boolean;

procedure delete_row(X_UNIT_ID RNT_PROPERTY_UNITS.UNIT_ID%TYPE);
                     
END RNT_PROPERTY_UNITS_PKG;
Package created.
SQL> SHOW ERRORS
No errors.
SQL> --
SQL> -- RNT_TENANCY_AGREEMENT_PKG  (Package) 
SQL> --
SQL> CREATE OR REPLACE PACKAGE        RNT_TENANCY_AGREEMENT_PKG AS
/******************************************************************************
   NAME:       RNT_TENANCY_AGREEMENT_PKG
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        06.04.2007             1. Created this package.
******************************************************************************/

function get_checksum(X_AGREEMENT_ID RNT_TENANCY_AGREEMENT.AGREEMENT_ID%TYPE) return VARCHAR2;
procedure lock_row(X_AGREEMENT_ID RNT_TENANCY_AGREEMENT.AGREEMENT_ID%TYPE);

procedure update_row(X_AGREEMENT_ID RNT_TENANCY_AGREEMENT.AGREEMENT_ID%TYPE,
                     X_UNIT_ID RNT_TENANCY_AGREEMENT.UNIT_ID%TYPE,
                     X_AGREEMENT_DATE RNT_TENANCY_AGREEMENT.AGREEMENT_DATE%TYPE,
                     X_TERM RNT_TENANCY_AGREEMENT.TERM%TYPE,
                     X_AMOUNT RNT_TENANCY_AGREEMENT.AMOUNT%TYPE,
                     X_AMOUNT_PERIOD RNT_TENANCY_AGREEMENT.AMOUNT_PERIOD%TYPE,
                     X_DATE_AVAILABLE RNT_TENANCY_AGREEMENT.DATE_AVAILABLE%TYPE,
                     X_DEPOSIT RNT_TENANCY_AGREEMENT.DEPOSIT%TYPE,
                     X_LAST_MONTH RNT_TENANCY_AGREEMENT.LAST_MONTH%TYPE,
                     X_DISCOUNT_AMOUNT RNT_TENANCY_AGREEMENT.DISCOUNT_AMOUNT%TYPE,
                     X_DISCOUNT_TYPE RNT_TENANCY_AGREEMENT.DISCOUNT_TYPE%TYPE,
                     X_DISCOUNT_PERIOD RNT_TENANCY_AGREEMENT.DISCOUNT_PERIOD%TYPE,
                     X_END_DATE RNT_TENANCY_AGREEMENT.END_DATE%TYPE,
                     X_CHECKSUM VARCHAR2
                     );

function insert_row(X_UNIT_ID RNT_TENANCY_AGREEMENT.UNIT_ID%TYPE,
                     X_AGREEMENT_DATE RNT_TENANCY_AGREEMENT.AGREEMENT_DATE%TYPE,
                     X_TERM RNT_TENANCY_AGREEMENT.TERM%TYPE,
                     X_AMOUNT RNT_TENANCY_AGREEMENT.AMOUNT%TYPE,
                     X_AMOUNT_PERIOD RNT_TENANCY_AGREEMENT.AMOUNT_PERIOD%TYPE,
                     X_DATE_AVAILABLE RNT_TENANCY_AGREEMENT.DATE_AVAILABLE%TYPE,
                     X_DEPOSIT RNT_TENANCY_AGREEMENT.DEPOSIT%TYPE,
                     X_LAST_MONTH RNT_TENANCY_AGREEMENT.LAST_MONTH%TYPE,
                     X_DISCOUNT_AMOUNT RNT_TENANCY_AGREEMENT.DISCOUNT_AMOUNT%TYPE,
                     X_DISCOUNT_TYPE RNT_TENANCY_AGREEMENT.DISCOUNT_TYPE%TYPE,
                     X_DISCOUNT_PERIOD RNT_TENANCY_AGREEMENT.DISCOUNT_PERIOD%TYPE,
                     X_END_DATE RNT_TENANCY_AGREEMENT.END_DATE%TYPE
                     ) return RNT_TENANCY_AGREEMENT.AGREEMENT_ID%TYPE;

procedure delete_row(X_AGREEMENT_ID RNT_TENANCY_AGREEMENT.AGREEMENT_ID%TYPE); 
END RNT_TENANCY_AGREEMENT_PKG;
Package created.
SQL> SHOW ERRORS
No errors.
SQL> --
SQL> -- RNT_BUSINESS_UNITS_PKG  (Package) 
SQL> --
SQL> CREATE OR REPLACE PACKAGE        RNT_BUSINESS_UNITS_PKG AS
/******************************************************************************
   NAME:       RNT_BUSINESS_UNITS_PKG
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        14.04.2007             1. Created this package.
******************************************************************************/

function get_checksum(X_BUSINESS_ID RNT_BUSINESS_UNITS.BUSINESS_ID%TYPE) return varchar2;  

function INSERT_ROW(X_BUSINESS_NAME RNT_BUSINESS_UNITS.BUSINESS_NAME%TYPE,
                     X_PARENT_BUSINESS_ID RNT_BUSINESS_UNITS.PARENT_BUSINESS_ID%TYPE
                    ) return RNT_BUSINESS_UNITS.BUSINESS_ID%TYPE;
                    
procedure update_row(X_BUSINESS_ID RNT_BUSINESS_UNITS.BUSINESS_ID%TYPE,
                     X_BUSINESS_NAME RNT_BUSINESS_UNITS.BUSINESS_NAME%TYPE,
                     X_PARENT_BUSINESS_ID RNT_BUSINESS_UNITS.PARENT_BUSINESS_ID%TYPE,
                     X_CHECKSUM VARCHAR2
                     );
                                         
function check_allow_for_access(X_BUSINESS_ID RNT_BUSINESS_UNITS.BUSINESS_ID%TYPE) return boolean;

procedure delete_row(X_BUSINESS_ID RNT_BUSINESS_UNITS.BUSINESS_ID%TYPE);

END RNT_BUSINESS_UNITS_PKG;
Package created.
SQL> SHOW ERRORS
No errors.
SQL> --
SQL> -- RNT_PEOPLE_PKG  (Package Body) 
SQL> --
SQL> CREATE OR REPLACE PACKAGE BODY        RNT_PEOPLE_PKG AS
/******************************************************************************
   NAME:       RNT_PEOPLE_PKG
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        26.04.2007             1. Created this package body.
******************************************************************************/

function get_checksum(X_PEOPLE_ID NUMBER) return varchar2
is
begin
    for x in (select  
                   PEOPLE_ID, FIRST_NAME, LAST_NAME, 
                   PHONE1, PHONE2, DATE_OF_BIRTH, EMAIL_ADDRESS, 
                   SSN, DRIVERS_LICENSE, BUSINESS_ID, IS_ENABLED_YN
                from RNT_PEOPLE
                where PEOPLE_ID = X_PEOPLE_ID) loop
         RNT_SYS_CHECKSUM_REC_PKG.INIT;
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.PEOPLE_ID);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.FIRST_NAME);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.LAST_NAME);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.PHONE1);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.PHONE2);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.DATE_OF_BIRTH);         
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.EMAIL_ADDRESS);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.SSN);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.DRIVERS_LICENSE);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.BUSINESS_ID);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.IS_ENABLED_YN);
         return RNT_SYS_CHECKSUM_REC_PKG.GET_CHECKSUM;
   end loop;
   RAISE_APPLICATION_ERROR(-20100, 'Not found record in RNT_PEOPLE');   
end;

procedure lock_row(X_PEOPLE_ID RNT_PEOPLE.PEOPLE_ID%TYPE)
is
  cursor c is
     select * 
     from RNT_PEOPLE   
     where PEOPLE_ID = X_PEOPLE_ID
     for update of PEOPLE_ID nowait; 
begin
  open c;
  close c;
exception
  when OTHERS then
    if SQLCODE = -54 then
      RAISE_APPLICATION_ERROR(-20001, 'Cannot changed record. Record is locked.');
    end if;       
end;

function check_unique(X_PEOPLE_ID     RNT_PEOPLE.PEOPLE_ID%TYPE,
                      X_LAST_NAME     RNT_PEOPLE.LAST_NAME%TYPE,
                      X_FIRST_NAME    RNT_PEOPLE.FIRST_NAME%TYPE
                      ) return boolean
is
  x NUMBER;
begin
   select 1 
   into x
   from DUAL
   where exists (
                   select 1
                   from RNT_PEOPLE
                   where (PEOPLE_ID != X_PEOPLE_ID or X_PEOPLE_ID is null) 
                     and LAST_NAME = X_LAST_NAME
                     and FIRST_NAME = X_FIRST_NAME             
                 );
  return false;
exception
  when NO_DATA_FOUND then
     return true;                        
end;                 

procedure update_row(X_PEOPLE_ID     RNT_PEOPLE.PEOPLE_ID%TYPE,
                     X_FIRST_NAME    RNT_PEOPLE.FIRST_NAME%TYPE,
                     X_LAST_NAME     RNT_PEOPLE.LAST_NAME%TYPE,
                     X_PHONE1        RNT_PEOPLE.PHONE1%TYPE,
                     X_PHONE2        RNT_PEOPLE.PHONE2%TYPE,
                     X_DATE_OF_BIRTH RNT_PEOPLE.DATE_OF_BIRTH%TYPE,
                     X_EMAIL_ADDRESS RNT_PEOPLE.EMAIL_ADDRESS%TYPE,
                     X_SSN           RNT_PEOPLE.SSN%TYPE,
                     X_DRIVERS_LICENSE RNT_PEOPLE.DRIVERS_LICENSE%TYPE,
                     X_IS_ENABLED_YN RNT_PEOPLE.IS_ENABLED_YN%TYPE,
                     X_CHECKSUM      VARCHAR2
                    )
is
 l_checksum varchar2(32); 
begin
   lock_row(X_PEOPLE_ID);
   
   -- validate checksum   
   l_checksum := get_checksum(X_PEOPLE_ID);
   if X_CHECKSUM != l_checksum then
      RAISE_APPLICATION_ERROR(-20002, 'Record was changed another user.');
   end if;

   if not check_unique(X_PEOPLE_ID, X_LAST_NAME, X_FIRST_NAME) then
        RAISE_APPLICATION_ERROR(-20006, 'Last and first name for people must be unique.');                      
   end if;   
   
   update RNT_PEOPLE
   set FIRST_NAME      = X_FIRST_NAME,
       LAST_NAME       = X_LAST_NAME,
       PHONE1          = X_PHONE1,
       PHONE2          = X_PHONE2,
       DATE_OF_BIRTH   = X_DATE_OF_BIRTH,
       EMAIL_ADDRESS   = X_EMAIL_ADDRESS,
       SSN             = X_SSN,
       DRIVERS_LICENSE = X_DRIVERS_LICENSE,
       IS_ENABLED_YN   = X_IS_ENABLED_YN
   where PEOPLE_ID     = X_PEOPLE_ID;
end;

function insert_row( X_FIRST_NAME    RNT_PEOPLE.FIRST_NAME%TYPE,
                     X_LAST_NAME     RNT_PEOPLE.LAST_NAME%TYPE,
                     X_PHONE1        RNT_PEOPLE.PHONE1%TYPE,
                     X_PHONE2        RNT_PEOPLE.PHONE2%TYPE,
                     X_DATE_OF_BIRTH RNT_PEOPLE.DATE_OF_BIRTH%TYPE,
                     X_EMAIL_ADDRESS RNT_PEOPLE.EMAIL_ADDRESS%TYPE,
                     X_SSN           RNT_PEOPLE.SSN%TYPE,
                     X_DRIVERS_LICENSE RNT_PEOPLE.DRIVERS_LICENSE%TYPE,
                     X_IS_ENABLED_YN RNT_PEOPLE.IS_ENABLED_YN%TYPE
                    ) return RNT_PEOPLE.PEOPLE_ID%TYPE
is
  x RNT_PEOPLE.PEOPLE_ID%TYPE;
  X_BUSINESS_ID   RNT_PEOPLE.BUSINESS_ID%TYPE; 
begin
   if not check_unique(NULL, X_LAST_NAME, X_FIRST_NAME) then
        RAISE_APPLICATION_ERROR(-20006, 'Last and first name for people must be unique.');                      
   end if;
      
   X_BUSINESS_ID := RNT_USERS_PKG.GET_CURRENT_BUSINESS_UNIT();
   
   insert into RNT_PEOPLE (
               PEOPLE_ID, FIRST_NAME, LAST_NAME, 
               PHONE1, PHONE2, DATE_OF_BIRTH, EMAIL_ADDRESS, 
               SSN, DRIVERS_LICENSE, BUSINESS_ID, 
               IS_ENABLED_YN) 
   values (RNT_PEOPLE_SEQ.NEXTVAL, X_FIRST_NAME, X_LAST_NAME, 
           X_PHONE1, X_PHONE2, X_DATE_OF_BIRTH, X_EMAIL_ADDRESS, 
           X_SSN, X_DRIVERS_LICENSE, X_BUSINESS_ID, 
           X_IS_ENABLED_YN)
   returning PEOPLE_ID into x;
   return x;
end;                                                      


function is_exists_tenant(X_PEOPLE_ID RNT_PEOPLE.PEOPLE_ID%TYPE) return boolean
is
 x NUMBER;
begin
  select 1
  into x
  from DUAL
  where exists (select 1
                from RNT_TENANT
                where PEOPLE_ID = X_PEOPLE_ID
                );
  return true;
exception
  when NO_DATA_FOUND then
     return false;   
end;

procedure delete_row(X_PEOPLE_ID       RNT_PEOPLE.PEOPLE_ID%TYPE)
is
begin
  -- check for exists child records
  if is_exists_tenant(X_PEOPLE_ID) then
     RAISE_APPLICATION_ERROR(-20004, 'Cannot delete record. For people exists tenant. Instead set enaled flag to No');
  end if; 
    
  delete from RNT_PEOPLE
  where PEOPLE_ID = X_PEOPLE_ID;
end;


END RNT_PEOPLE_PKG;
Package body created.
SQL> SHOW ERRORS
No errors.
SQL> --
SQL> -- RNT_TENANT_PKG  (Package Body) 
SQL> --
SQL> CREATE OR REPLACE PACKAGE BODY        RNT_TENANT_PKG AS
/******************************************************************************
   NAME:       RNT_TENANT_PKG
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        29.04.2007             1. Created this package body.
******************************************************************************/

function get_checksum(X_TENANT_ID RNT_TENANT.TENANT_ID%TYPE) return VARCHAR2
is
begin
for x in (select 
           TENANT_ID, AGREEMENT_ID, STATUS, 
           DEPOSIT_BALANCE, LAST_MONTH_BALANCE, PEOPLE_ID, 
           SECTION8_VOUCHER_AMOUNT, SECTION8_TENANT_PAYS, SECTION8_ID,
           TENANT_NOTE
         from RNT_TENANT
         where TENANT_ID = X_TENANT_ID         
         ) loop
         RNT_SYS_CHECKSUM_REC_PKG.INIT;
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.TENANT_ID);         
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.AGREEMENT_ID);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.STATUS); 
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.DEPOSIT_BALANCE);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.LAST_MONTH_BALANCE);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.PEOPLE_ID);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.SECTION8_VOUCHER_AMOUNT);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.SECTION8_TENANT_PAYS);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.SECTION8_ID);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.TENANT_NOTE);
         return RNT_SYS_CHECKSUM_REC_PKG.GET_CHECKSUM;
   end loop;
   raise NO_DATA_FOUND;  
end;

procedure lock_row(X_TENANT_ID RNT_TENANT.TENANT_ID%TYPE)
is
cursor c is
   select *
   from RNT_TENANT              
   for update of TENANT_ID nowait; 
begin
  open c;
  close c;
exception
  when OTHERS then
    if SQLCODE = -54 then
      RAISE_APPLICATION_ERROR(-20001, 'Cannot changed record. Record is locked.');
    end if; 
end;

function check_unique(X_TENANT_ID RNT_TENANT.TENANT_ID%TYPE, 
                      X_AGREEMENT_ID RNT_TENANT.AGREEMENT_ID%TYPE,
                      X_PEOPLE_ID RNT_TENANT.PEOPLE_ID%TYPE
                      ) return boolean
is
  x NUMBER;
begin
   select 1 
   into x
   from DUAL
   where exists (
                   select 1
                   from RNT_TENANT
                   where PEOPLE_ID = X_PEOPLE_ID
                     and AGREEMENT_ID = X_AGREEMENT_ID
                     and (TENANT_ID != X_TENANT_ID or X_TENANT_ID is null)
                 );
  return false;
exception
  when NO_DATA_FOUND then
     return true;                        
end;        

procedure short_update_row(X_TENANT_ID RNT_TENANT.TENANT_ID%TYPE,
                     X_AGREEMENT_ID RNT_TENANT.AGREEMENT_ID%TYPE,
                     X_STATUS RNT_TENANT.STATUS%TYPE,
                     X_DEPOSIT_BALANCE RNT_TENANT.DEPOSIT_BALANCE%TYPE,
                     X_LAST_MONTH_BALANCE RNT_TENANT.LAST_MONTH_BALANCE%TYPE,
                     X_PEOPLE_ID RNT_TENANT.PEOPLE_ID%TYPE,
                     X_SECTION8_VOUCHER_AMOUNT RNT_TENANT.SECTION8_VOUCHER_AMOUNT%TYPE,
                     X_SECTION8_TENANT_PAYS RNT_TENANT.SECTION8_TENANT_PAYS%TYPE,
                     X_SECTION8_ID RNT_TENANT.SECTION8_ID%TYPE,
                     X_CHECKSUM VARCHAR2
                     )
is
l_checksum varchar2(32); 
begin
   
   lock_row(X_TENANT_ID);
   
   -- validate checksum   
   l_checksum := get_checksum(X_TENANT_ID);
   if X_CHECKSUM != l_checksum then
      RAISE_APPLICATION_ERROR(-20002, 'Record was changed another user.');
   end if;

   if not check_unique(X_TENANT_ID, X_AGREEMENT_ID, X_PEOPLE_ID) then
        RAISE_APPLICATION_ERROR(-20006, 'People for agreement must be unique');                      
   end if;   
   
   update RNT_TENANT
   set 
        AGREEMENT_ID            = X_AGREEMENT_ID,
        STATUS                  = X_STATUS,
        DEPOSIT_BALANCE         = X_DEPOSIT_BALANCE,
        LAST_MONTH_BALANCE      = X_LAST_MONTH_BALANCE,
        PEOPLE_ID               = X_PEOPLE_ID,
        SECTION8_VOUCHER_AMOUNT = X_SECTION8_VOUCHER_AMOUNT,
        SECTION8_TENANT_PAYS    = X_SECTION8_TENANT_PAYS,
        SECTION8_ID             = X_SECTION8_ID
   where TENANT_ID = X_TENANT_ID;
end;  
       
function insert_row(X_AGREEMENT_ID RNT_TENANT.AGREEMENT_ID%TYPE,
                    X_STATUS RNT_TENANT.STATUS%TYPE,
                    X_DEPOSIT_BALANCE RNT_TENANT.DEPOSIT_BALANCE%TYPE,
                    X_LAST_MONTH_BALANCE RNT_TENANT.LAST_MONTH_BALANCE%TYPE,
                    X_PEOPLE_ID RNT_TENANT.PEOPLE_ID%TYPE,
                    X_SECTION8_VOUCHER_AMOUNT RNT_TENANT.SECTION8_VOUCHER_AMOUNT%TYPE,
                    X_SECTION8_TENANT_PAYS RNT_TENANT.SECTION8_TENANT_PAYS%TYPE,
                    X_SECTION8_ID RNT_TENANT.SECTION8_ID%TYPE
                   ) return RNT_TENANT.TENANT_ID%TYPE
is
x RNT_TENANT.TENANT_ID%TYPE;
begin

   if not check_unique(NULL, X_AGREEMENT_ID, X_PEOPLE_ID) then
        RAISE_APPLICATION_ERROR(-20006, 'People for agreement must be unique');                      
   end if;   
   
   insert into RNT_TENANT (
       TENANT_ID, AGREEMENT_ID, STATUS, 
       DEPOSIT_BALANCE, LAST_MONTH_BALANCE, PEOPLE_ID, 
       SECTION8_VOUCHER_AMOUNT, SECTION8_TENANT_PAYS, SECTION8_ID) 
   values (RNT_TENANT_SEQ.NEXTVAL, X_AGREEMENT_ID, X_STATUS, 
       X_DEPOSIT_BALANCE, X_LAST_MONTH_BALANCE, X_PEOPLE_ID, 
       X_SECTION8_VOUCHER_AMOUNT, X_SECTION8_TENANT_PAYS, X_SECTION8_ID
       )
   returning TENANT_ID into x;
   return x;  
end;                   

procedure update_row(X_TENANT_ID RNT_TENANT.TENANT_ID%TYPE,
                     X_AGREEMENT_ID RNT_TENANT.AGREEMENT_ID%TYPE,
                     X_STATUS RNT_TENANT.STATUS%TYPE,
                     X_DEPOSIT_BALANCE RNT_TENANT.DEPOSIT_BALANCE%TYPE,
                     X_LAST_MONTH_BALANCE RNT_TENANT.LAST_MONTH_BALANCE%TYPE,
                     X_PEOPLE_ID RNT_TENANT.PEOPLE_ID%TYPE,
                     X_SECTION8_VOUCHER_AMOUNT RNT_TENANT.SECTION8_VOUCHER_AMOUNT%TYPE,
                     X_SECTION8_TENANT_PAYS RNT_TENANT.SECTION8_TENANT_PAYS%TYPE,
                     X_SECTION8_ID RNT_TENANT.SECTION8_ID%TYPE,
                     X_CHECKSUM VARCHAR2,
                     X_TENANT_NOTE RNT_TENANT.TENANT_NOTE%TYPE
                     )
is
l_checksum varchar2(32); 
begin
   
   lock_row(X_TENANT_ID);
   
   -- validate checksum   
   l_checksum := get_checksum(X_TENANT_ID);
   if X_CHECKSUM != l_checksum then
      RAISE_APPLICATION_ERROR(-20002, 'Record was changed another user.');
   end if;

   if not check_unique(X_TENANT_ID, X_AGREEMENT_ID, X_PEOPLE_ID) then
        RAISE_APPLICATION_ERROR(-20006, 'People for agreement must be unique');                      
   end if;   
   
   update RNT_TENANT
   set 
        AGREEMENT_ID            = X_AGREEMENT_ID,
        STATUS                  = X_STATUS,
        DEPOSIT_BALANCE         = X_DEPOSIT_BALANCE,
        LAST_MONTH_BALANCE      = X_LAST_MONTH_BALANCE,
        PEOPLE_ID               = X_PEOPLE_ID,
        SECTION8_VOUCHER_AMOUNT = X_SECTION8_VOUCHER_AMOUNT,
        SECTION8_TENANT_PAYS    = X_SECTION8_TENANT_PAYS,
        SECTION8_ID             = X_SECTION8_ID,
        TENANT_NOTE             = X_TENANT_NOTE
   where TENANT_ID = X_TENANT_ID;
end; 

procedure delete_row(X_TENANT_ID RNT_TENANT.TENANT_ID%TYPE)
is
begin
    delete from RNT_TENANT
    where TENANT_ID = X_TENANT_ID;
end;

END RNT_TENANT_PKG;
Package body created.
SQL> SHOW ERRORS
No errors.
SQL> --
SQL> -- RNT_PROPERTY_UNITS_PKG  (Package Body) 
SQL> --
SQL> CREATE OR REPLACE PACKAGE BODY        RNT_PROPERTY_UNITS_PKG AS
/******************************************************************************
   NAME:       RNT_PROPERTY_UNITS_PKG
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        04.04.2007             1. Created this package body.
******************************************************************************/

function get_checksum(p_unit_id RNT_PROPERTY_UNITS.UNIT_ID%TYPE) return VARCHAR2
is
begin
   for x in (select
               UNIT_ID, PROPERTY_ID, 
               UNIT_NAME, UNIT_SIZE, BEDROOMS, 
               BATHROOMS
             from RNT_PROPERTY_UNITS      
             where UNIT_ID = p_unit_id) loop
         RNT_SYS_CHECKSUM_REC_PKG.INIT;
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.UNIT_ID);         
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.PROPERTY_ID);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.UNIT_NAME); 
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.UNIT_SIZE);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.BEDROOMS);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.BATHROOMS); 
         return RNT_SYS_CHECKSUM_REC_PKG.GET_CHECKSUM;
   end loop;
   raise NO_DATA_FOUND;  
end;

function check_unique(X_UNIT_ID RNT_PROPERTY_UNITS.UNIT_ID%TYPE,
                      X_PROPERTY_ID RNT_PROPERTY_UNITS.PROPERTY_ID%TYPE, 
                      X_UNIT_NAME RNT_PROPERTY_UNITS.UNIT_NAME%TYPE) return boolean
is
  x NUMBER;
begin
   select 1 
   into x
   from DUAL
   where exists (
                   select 1
                   from RNT_PROPERTY_UNITS
                   where PROPERTY_ID = X_PROPERTY_ID
                     and UNIT_NAME = X_UNIT_NAME
                     and (UNIT_ID != X_UNIT_ID or X_UNIT_ID is null)
                 );
  return false;
exception
  when NO_DATA_FOUND then
     return true;                        
end;                       
                      

procedure lock_row(X_UNIT_ID RNT_PROPERTY_UNITS.UNIT_ID%TYPE)
is
    cursor c is
          select
               UNIT_ID, PROPERTY_ID, 
               UNIT_NAME, UNIT_SIZE, BEDROOMS, 
               BATHROOMS
          from RNT_PROPERTY_UNITS      
          where UNIT_ID = X_UNIT_ID
          for update of UNIT_ID nowait; 
begin
  open c;
  close c;
exception
  when OTHERS then
    if SQLCODE = -54 then
      RAISE_APPLICATION_ERROR(-20001, 'Cannot changed record. Record is locked.');
    end if; 
end;

function check_allowed_access(X_PROPERTY_ID RNT_PROPERTIES.PROPERTY_ID%TYPE) return boolean
is
  x NUMBER;
begin
  select 1
  into x 
  from DUAL
  where exists(select 1 
               from RNT_BUSINESS_UNITS_V bu,
                    RNT_PROPERTIES p
               where p.PROPERTY_ID = X_PROPERTY_ID
                 and bu.BUSINESS_ID = p.BUSINESS_ID);
  return TRUE;                
exception
  when NO_DATA_FOUND then
    return FALSE; 
end;

procedure update_row(X_UNIT_ID RNT_PROPERTY_UNITS.UNIT_ID%TYPE, 
                     X_PROPERTY_ID RNT_PROPERTY_UNITS.PROPERTY_ID%TYPE, 
                     X_UNIT_NAME RNT_PROPERTY_UNITS.UNIT_NAME%TYPE, 
                     X_UNIT_SIZE RNT_PROPERTY_UNITS.UNIT_SIZE%TYPE, 
                     X_BEDROOMS RNT_PROPERTY_UNITS.BEDROOMS%TYPE, 
                     X_BATHROOMS RNT_PROPERTY_UNITS.BATHROOMS%TYPE,
                     X_CHECKSUM VARCHAR2)
is
 l_checksum varchar2(32); 
begin
   lock_row(X_UNIT_ID);
   
   -- validate checksum   
   l_checksum := get_checksum(X_UNIT_ID);
   if X_CHECKSUM != l_checksum then
      RAISE_APPLICATION_ERROR(-20002, 'Record was changed another user.');
   end if;
 
   if not check_allowed_access(X_PROPERTY_ID) then
      RAISE_APPLICATION_ERROR(-20010, 'Security error. You cannot update this unit.');       
   end if;
     
   if not check_unique(X_UNIT_ID, X_PROPERTY_ID, X_UNIT_NAME) then
      RAISE_APPLICATION_ERROR(-20005, 'Unit name must be unique for property.');                 
   end if;                       
      
   update RNT_PROPERTY_UNITS
   set PROPERTY_ID = X_PROPERTY_ID,
       UNIT_NAME   = X_UNIT_NAME,
       UNIT_SIZE   = X_UNIT_SIZE,
       BEDROOMS    = X_BEDROOMS,
       BATHROOMS   = X_BATHROOMS
   where UNIT_ID  = X_UNIT_ID;
end;                        

function insert_row( X_PROPERTY_ID RNT_PROPERTY_UNITS.PROPERTY_ID%TYPE, 
                     X_UNIT_NAME RNT_PROPERTY_UNITS.UNIT_NAME%TYPE, 
                     X_UNIT_SIZE RNT_PROPERTY_UNITS.UNIT_SIZE%TYPE, 
                     X_BEDROOMS RNT_PROPERTY_UNITS.BEDROOMS%TYPE, 
                     X_BATHROOMS RNT_PROPERTY_UNITS.BATHROOMS%TYPE
                    ) return RNT_PROPERTY_UNITS.UNIT_ID%TYPE
is
  x RNT_PROPERTY_UNITS.UNIT_ID%TYPE := 0;
begin
   if not check_unique(NULL, X_PROPERTY_ID, X_UNIT_NAME) then
      RAISE_APPLICATION_ERROR(-20005, 'Unit name must be unique for property.');                 
   end if;
   
   if not check_allowed_access(X_PROPERTY_ID) then
      RAISE_APPLICATION_ERROR(-20010, 'Security error. You cannot insert this unit.');       
   end if;
   
   insert into RNT_PROPERTY_UNITS (
            UNIT_ID, PROPERTY_ID, UNIT_NAME, 
            UNIT_SIZE, BEDROOMS, BATHROOMS) 
   values (RNT_PROPERTY_UNITS_SEQ.NEXTVAL, X_PROPERTY_ID, X_UNIT_NAME, 
          X_UNIT_SIZE, X_BEDROOMS, X_BATHROOMS)
   returning UNIT_ID into x;
   return x;
end;

/*
function is_exists_tenant(X_UNIT_ID RNT_PROPERTY_UNITS.UNIT_ID%TYPE) return boolean
is
 x NUMBER;
begin
  select 1
  into x
  from DUAL
  where exists (select 1
                from RNT_TENANT
                where UNIT_APPLIED_FOR = X_UNIT_ID
                );
  return true;
exception
  when NO_DATA_FOUND then
     return false;   
end;
*/

function is_exists_agreement(X_UNIT_ID RNT_PROPERTY_UNITS.UNIT_ID%TYPE) return boolean
is
 x NUMBER;
begin
  select 1
  into x
  from DUAL
  where exists (select 1
                from RNT_TENANCY_AGREEMENT
                where UNIT_ID = X_UNIT_ID
                );
  return true;
exception
  when NO_DATA_FOUND then
     return false;   
end;

function is_exists_expenses(X_UNIT_ID RNT_PROPERTY_UNITS.UNIT_ID%TYPE) return boolean
is
 x NUMBER;
begin
  select 1
  into x
  from DUAL
  where exists (select 1
                from RNT_PROPERTY_EXPENSES
                where UNIT_ID = X_UNIT_ID
                );
  return true;
exception
  when NO_DATA_FOUND then
     return false;   
end;

function is_exists_childs(X_UNIT_ID RNT_PROPERTY_UNITS.UNIT_ID%TYPE) return boolean
is
begin
 
   return --is_exists_tenant(X_UNIT_ID) or
          is_exists_agreement(X_UNIT_ID) or
          is_exists_expenses(X_UNIT_ID);
end;

procedure delete_row(X_UNIT_ID RNT_PROPERTY_UNITS.UNIT_ID%TYPE)
is
begin
  -- check for exists child records
/*  if is_exists_tenant(X_UNIT_ID) then
    RAISE_APPLICATION_ERROR(-20004, 'Cannot delete record. For unit exists tenant record.');
  end if;
  */
  if is_exists_agreement(X_UNIT_ID) then
    RAISE_APPLICATION_ERROR(-20004, 'Cannot delete record. For unit exists agreement record.');
  end if;
  if is_exists_expenses(X_UNIT_ID) then
    RAISE_APPLICATION_ERROR(-20004, 'Cannot delete record. For unit exists property expenses.');
  end if;

  
  delete from RNT_PROPERTY_UNITS
  where UNIT_ID = X_UNIT_ID;
end;                    

END RNT_PROPERTY_UNITS_PKG;
Package body created.
SQL> SHOW ERRORS
No errors.
SQL> --
SQL> -- RNT_TENANCY_AGREEMENT_PKG  (Package Body) 
SQL> --
SQL> CREATE OR REPLACE PACKAGE BODY        RNT_TENANCY_AGREEMENT_PKG AS
/******************************************************************************
   NAME:       RNT_TENANCY_AGREEMENT_PKG
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        06.04.2007             1. Created this package body.
******************************************************************************/
function get_checksum(X_AGREEMENT_ID RNT_TENANCY_AGREEMENT.AGREEMENT_ID%TYPE) return VARCHAR2
is
begin
for x in (select 
           AGREEMENT_ID, UNIT_ID, AGREEMENT_DATE, 
           TERM, AMOUNT, AMOUNT_PERIOD, 
           DATE_AVAILABLE, DEPOSIT, LAST_MONTH, 
           DISCOUNT_AMOUNT, DISCOUNT_TYPE, DISCOUNT_PERIOD, END_DATE
         from RNT_TENANCY_AGREEMENT
         where AGREEMENT_ID = X_AGREEMENT_ID) loop
         RNT_SYS_CHECKSUM_REC_PKG.INIT;
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.AGREEMENT_ID);         
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.UNIT_ID);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.AGREEMENT_DATE); 
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.TERM);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.AMOUNT);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.AMOUNT_PERIOD);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.DATE_AVAILABLE);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.DEPOSIT);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.LAST_MONTH);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.DISCOUNT_AMOUNT);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.DISCOUNT_TYPE);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.DISCOUNT_PERIOD);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.END_DATE);         
         return RNT_SYS_CHECKSUM_REC_PKG.GET_CHECKSUM;
   end loop;
   raise NO_DATA_FOUND;  
end;



function check_unique(X_AGREEMENT_ID RNT_TENANCY_AGREEMENT.AGREEMENT_ID%TYPE, 
                      X_UNIT_ID RNT_TENANCY_AGREEMENT.UNIT_ID%TYPE,
                      X_DATE_AVAILABLE RNT_TENANCY_AGREEMENT.AGREEMENT_DATE%TYPE
                      ) return boolean
is
  x NUMBER;
begin
   select 1 
   into x
   from DUAL
   where exists (
                   select 1
                   from RNT_TENANCY_AGREEMENT
                   where UNIT_ID = X_UNIT_ID
                     and DATE_AVAILABLE = X_DATE_AVAILABLE
                     and (AGREEMENT_ID != X_AGREEMENT_ID or X_AGREEMENT_ID is null)
                 );
  return false;
exception
  when NO_DATA_FOUND then
     return true;                        
end;                       
                      

procedure lock_row(X_AGREEMENT_ID RNT_TENANCY_AGREEMENT.AGREEMENT_ID%TYPE)
is
    cursor c is
              select 
               AGREEMENT_ID, UNIT_ID, AGREEMENT_DATE, 
               TERM, AMOUNT, AMOUNT_PERIOD, 
               DATE_AVAILABLE, DEPOSIT, LAST_MONTH, 
               DISCOUNT_AMOUNT, DISCOUNT_TYPE, DISCOUNT_PERIOD
             from RNT_TENANCY_AGREEMENT
             where AGREEMENT_ID = X_AGREEMENT_ID
             for update of AGREEMENT_ID nowait; 
begin
  open c;
  close c;
exception
  when OTHERS then
    if SQLCODE = -54 then
      RAISE_APPLICATION_ERROR(-20001, 'Cannot changed record. Record is locked.');
    end if; 
end;

procedure update_row(X_AGREEMENT_ID RNT_TENANCY_AGREEMENT.AGREEMENT_ID%TYPE,
                     X_UNIT_ID RNT_TENANCY_AGREEMENT.UNIT_ID%TYPE,
                     X_AGREEMENT_DATE RNT_TENANCY_AGREEMENT.AGREEMENT_DATE%TYPE,
                     X_TERM RNT_TENANCY_AGREEMENT.TERM%TYPE,
                     X_AMOUNT RNT_TENANCY_AGREEMENT.AMOUNT%TYPE,
                     X_AMOUNT_PERIOD RNT_TENANCY_AGREEMENT.AMOUNT_PERIOD%TYPE,
                     X_DATE_AVAILABLE RNT_TENANCY_AGREEMENT.DATE_AVAILABLE%TYPE,
                     X_DEPOSIT RNT_TENANCY_AGREEMENT.DEPOSIT%TYPE,
                     X_LAST_MONTH RNT_TENANCY_AGREEMENT.LAST_MONTH%TYPE,
                     X_DISCOUNT_AMOUNT RNT_TENANCY_AGREEMENT.DISCOUNT_AMOUNT%TYPE,
                     X_DISCOUNT_TYPE RNT_TENANCY_AGREEMENT.DISCOUNT_TYPE%TYPE,
                     X_DISCOUNT_PERIOD RNT_TENANCY_AGREEMENT.DISCOUNT_PERIOD%TYPE,
                     X_END_DATE RNT_TENANCY_AGREEMENT.END_DATE%TYPE,
                     X_CHECKSUM VARCHAR2
                     )
is
l_checksum varchar2(32); 
begin
   
   lock_row(X_AGREEMENT_ID);
   
   -- validate checksum   
   l_checksum := get_checksum(X_AGREEMENT_ID);
   if X_CHECKSUM != l_checksum then
      RAISE_APPLICATION_ERROR(-20002, 'Record was changed another user.');
      --E_ROW_CHANGED_ANOTHER_USER  
   end if;

   if not check_unique(X_AGREEMENT_ID, X_UNIT_ID, X_DATE_AVAILABLE) then
        RAISE_APPLICATION_ERROR(-20006, 'Date available for unit must be unique');                      
   end if;   
   
   update RNT_TENANCY_AGREEMENT
   set  AGREEMENT_ID      = X_AGREEMENT_ID,
        UNIT_ID           = X_UNIT_ID,
        AGREEMENT_DATE    = X_AGREEMENT_DATE,
        TERM              = X_TERM,
        AMOUNT            = X_AMOUNT,
        AMOUNT_PERIOD     = X_AMOUNT_PERIOD,
        DATE_AVAILABLE    = X_DATE_AVAILABLE,
        DEPOSIT           = X_DEPOSIT,
        LAST_MONTH        = X_LAST_MONTH,
        DISCOUNT_AMOUNT   = X_DISCOUNT_AMOUNT,
        DISCOUNT_TYPE     = X_DISCOUNT_TYPE,
        DISCOUNT_PERIOD   = X_DISCOUNT_PERIOD,
        END_DATE          = X_END_DATE
   where AGREEMENT_ID     = X_AGREEMENT_ID;
end;                 

function insert_row(X_UNIT_ID RNT_TENANCY_AGREEMENT.UNIT_ID%TYPE,
                     X_AGREEMENT_DATE RNT_TENANCY_AGREEMENT.AGREEMENT_DATE%TYPE,
                     X_TERM RNT_TENANCY_AGREEMENT.TERM%TYPE,
                     X_AMOUNT RNT_TENANCY_AGREEMENT.AMOUNT%TYPE,
                     X_AMOUNT_PERIOD RNT_TENANCY_AGREEMENT.AMOUNT_PERIOD%TYPE,
                     X_DATE_AVAILABLE RNT_TENANCY_AGREEMENT.DATE_AVAILABLE%TYPE,
                     X_DEPOSIT RNT_TENANCY_AGREEMENT.DEPOSIT%TYPE,
                     X_LAST_MONTH RNT_TENANCY_AGREEMENT.LAST_MONTH%TYPE,
                     X_DISCOUNT_AMOUNT RNT_TENANCY_AGREEMENT.DISCOUNT_AMOUNT%TYPE,
                     X_DISCOUNT_TYPE RNT_TENANCY_AGREEMENT.DISCOUNT_TYPE%TYPE,
                     X_DISCOUNT_PERIOD RNT_TENANCY_AGREEMENT.DISCOUNT_PERIOD%TYPE,
                     X_END_DATE RNT_TENANCY_AGREEMENT.END_DATE%TYPE
                     ) return RNT_TENANCY_AGREEMENT.AGREEMENT_ID%TYPE
is
  x RNT_TENANCY_AGREEMENT.AGREEMENT_ID%TYPE;
begin

    if not check_unique(NULL, X_UNIT_ID, X_DATE_AVAILABLE) then
        RAISE_APPLICATION_ERROR(-20006, 'Date available for unit must be unique');                      
    end if;
    
    insert into RNT_TENANCY_AGREEMENT (
       AGREEMENT_ID, 
       UNIT_ID, 
       AGREEMENT_DATE, 
       TERM, 
       AMOUNT, 
       AMOUNT_PERIOD, 
       DATE_AVAILABLE, 
       DEPOSIT, 
       LAST_MONTH, 
       DISCOUNT_AMOUNT, 
       DISCOUNT_TYPE, 
       DISCOUNT_PERIOD,
       END_DATE) 
    values (
       RNT_TENANCY_AGREEMENT_SEQ.NEXTVAL, 
       X_UNIT_ID, 
       X_AGREEMENT_DATE, 
       X_TERM, 
       X_AMOUNT, 
       X_AMOUNT_PERIOD, 
       X_DATE_AVAILABLE, 
       X_DEPOSIT, 
       X_LAST_MONTH, 
       X_DISCOUNT_AMOUNT, 
       X_DISCOUNT_TYPE, 
       X_DISCOUNT_PERIOD,
       X_END_DATE)
    returning AGREEMENT_ID into x;
    return x;    
end;             
  
function is_exists_acc_receivable(X_AGREEMENT_ID RNT_TENANCY_AGREEMENT.AGREEMENT_ID%TYPE) return boolean
is
 x NUMBER;
begin
  select 1
  into x
  from DUAL
  where exists (select 1
                from RNT_ACCOUNTS_RECEIVABLE
                where AGREEMENT_ID = X_AGREEMENT_ID
                );
  return true;
exception
  when NO_DATA_FOUND then
     return false;   
end;

procedure delete_row(X_AGREEMENT_ID RNT_TENANCY_AGREEMENT.AGREEMENT_ID%TYPE)
is
begin
  -- check for exists child records
  if is_exists_acc_receivable(X_AGREEMENT_ID) then
     RAISE_APPLICATION_ERROR(-20004, 'Cannot delete record. For agreement exists accounts receivable.');
  end if;
      
  delete from RNT_AGREEMENT_ACTIONS
  where AGREEMENT_ID = X_AGREEMENT_ID;
  
  delete from RNT_TENANCY_AGREEMENT
  where AGREEMENT_ID = X_AGREEMENT_ID;
end;
    
                     
END RNT_TENANCY_AGREEMENT_PKG;
Package body created.
SQL> SHOW ERRORS
No errors.
SQL> --
SQL> -- RNT_USER_ASSIGNMENTS_PKG  (Package Body) 
SQL> --
SQL> CREATE OR REPLACE PACKAGE BODY        RNT_USER_ASSIGNMENTS_PKG AS
/******************************************************************************
   NAME:       RNT_USER_ASSIGNMENTS_PKG
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        22.04.2007             1. Created this package body.
******************************************************************************/

function get_checksum(X_USER_ASSIGN_ID RNT_USER_ASSIGNMENTS.USER_ASSIGN_ID%TYPE) return varchar2
is
begin
  for x in (select USER_ASSIGN_ID, ROLE_ID, USER_ID, BUSINESS_ID
           from RNT_USER_ASSIGNMENTS
           where USER_ASSIGN_ID = X_USER_ASSIGN_ID) loop
         RNT_SYS_CHECKSUM_REC_PKG.INIT;
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.USER_ASSIGN_ID);         
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.ROLE_ID);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.USER_ID); 
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.BUSINESS_ID);
         return RNT_SYS_CHECKSUM_REC_PKG.GET_CHECKSUM;
   end loop;
   raise NO_DATA_FOUND;     
end;
/*
function check_unique(X_USER_ASSIGN_ID RNT_USER_ASSIGNMENTS.USER_ASSIGN_ID%TYPE,
                      X_USER_ID RNT_USER_ASSIGNMENTS.USER_ID%TYPE,
                      X_ROLE_ID RNT_USER_ASSIGNMENTS.ROLE_ID%TYPE,
                      X_BUSINESS_ID RNT_USER_ASSIGNMENTS.BUSINESS_ID%TYPE
                      ) return boolean
is
  x NUMBER;
begin
   select 1 
   into x
   from DUAL
   where exists (
                   select 1
                   from RNT_USER_ASSIGNMENTS
                   where USER_ID = X_USER_ID
                     and ROLE_ID = X_ROLE_ID
                     and BUSINESS_ID = X_BUSINESS_ID
                     and (USER_ASSIGN_ID != X_USER_ASSIGN_ID or X_USER_ASSIGN_ID is null)
                 );
  return false;
exception
  when NO_DATA_FOUND then
     return true;                        
end;
*/
function check_unique2(X_USER_ASSIGN_ID RNT_USER_ASSIGNMENTS.USER_ASSIGN_ID%TYPE,
                      X_USER_ID RNT_USER_ASSIGNMENTS.USER_ID%TYPE,
                      X_ROLE_ID RNT_USER_ASSIGNMENTS.ROLE_ID%TYPE
                      ) return boolean
is
  x NUMBER;
begin
   select 1 
   into x
   from DUAL
   where exists (
                   select 1
                   from RNT_USER_ASSIGNMENTS
                   where USER_ID = X_USER_ID
                     and ROLE_ID = X_ROLE_ID
                     and (USER_ASSIGN_ID != X_USER_ASSIGN_ID or X_USER_ASSIGN_ID is null)
                 );
  return false;
exception
  when NO_DATA_FOUND then
     return true;                        
end;

function insert_row(X_USER_ID RNT_USER_ASSIGNMENTS.USER_ID%TYPE,
                    X_ROLE_ID RNT_USER_ASSIGNMENTS.ROLE_ID%TYPE,
                    X_BUSINESS_ID RNT_USER_ASSIGNMENTS.BUSINESS_ID%TYPE)
                    return RNT_USER_ASSIGNMENTS.USER_ASSIGN_ID%TYPE 
is
  x RNT_USER_ASSIGNMENTS.USER_ASSIGN_ID%TYPE; 
begin
/*
  if not check_unique(NULL, X_USER_ID, X_ROLE_ID, X_BUSINESS_ID) then
        RAISE_APPLICATION_ERROR(-20006, 'User assignment must be unique');                      
   end if;   
*/   
   if not check_unique2(NULL, X_USER_ID, X_ROLE_ID) then
        RAISE_APPLICATION_ERROR(-20006, 'User must have unique role.');                      
   end if;
   insert into RNT_USER_ASSIGNMENTS (USER_ASSIGN_ID, USER_ID, ROLE_ID, BUSINESS_ID)
   values (RNT_USER_ASSIGNMENTS_SEQ.NEXTVAL, X_USER_ID, X_ROLE_ID, X_BUSINESS_ID)
   returning USER_ASSIGN_ID into x;
   
   return x;  
end;

procedure lock_row(X_USER_ASSIGN_ID RNT_USER_ASSIGNMENTS.USER_ASSIGN_ID%TYPE)
is
    cursor c is
             select *
             from RNT_USER_ASSIGNMENTS
             where USER_ASSIGN_ID = X_USER_ASSIGN_ID
             for update of USER_ASSIGN_ID nowait; 
begin
  open c;
  close c;
exception
  when OTHERS then
    if SQLCODE = -54 then
      RAISE_APPLICATION_ERROR(-20001, 'Cannot changed record. Record is locked.');
    end if; 
end;

procedure delete_row(X_USER_ASSIGN_ID RNT_USER_ASSIGNMENTS.USER_ASSIGN_ID%TYPE)
is
begin
  lock_row(X_USER_ASSIGN_ID);
   
  delete from RNT_USER_ASSIGNMENTS
  where USER_ASSIGN_ID = X_USER_ASSIGN_ID;
end;      

END RNT_USER_ASSIGNMENTS_PKG;
Package body created.
SQL> SHOW ERRORS
No errors.
SQL> --
SQL> -- RNT_BUSINESS_UNITS_PKG  (Package Body) 
SQL> --
SQL> CREATE OR REPLACE PACKAGE BODY        RNT_BUSINESS_UNITS_PKG AS
/******************************************************************************
   NAME:       RNT_BUSINESS_UNITS_PKG
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        14.04.2007             1. Created this package body.
******************************************************************************/

function get_checksum(X_BUSINESS_ID RNT_BUSINESS_UNITS.BUSINESS_ID%TYPE) return varchar2
is
begin
   for x in (select 
             BUSINESS_ID, BUSINESS_NAME, PARENT_BUSINESS_ID
            from RNT_BUSINESS_UNITS
            where BUSINESS_ID = X_BUSINESS_ID) loop
         RNT_SYS_CHECKSUM_REC_PKG.INIT;
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.BUSINESS_ID);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.BUSINESS_NAME);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.PARENT_BUSINESS_ID);
         return RNT_SYS_CHECKSUM_REC_PKG.GET_CHECKSUM;
   end loop;
   raise NO_DATA_FOUND;               
end;


procedure lock_row(X_BUSINESS_ID RNT_BUSINESS_UNITS.BUSINESS_ID%TYPE)
is
    cursor c is
             select *               
             from RNT_BUSINESS_UNITS
             where BUSINESS_ID = X_BUSINESS_ID
             for update of BUSINESS_ID nowait; 
begin
  open c;
  close c;
exception
  when OTHERS then
    if SQLCODE = -54 then
      RAISE_APPLICATION_ERROR(-20001, 'Cannot changed record. Record is locked.');
    end if; 
end;    

function check_allow_for_access(X_BUSINESS_ID RNT_BUSINESS_UNITS.BUSINESS_ID%TYPE) return boolean
is
  x NUMBER;
begin
  if RNT_USERS_PKG.GET_ROLE() = 'ADMIN' then
    return TRUE;
  end if;
   
  select 1
  into x 
  from DUAL
  where exists(select 1 
               from RNT_BUSINESS_UNITS_V
               where BUSINESS_ID = X_BUSINESS_ID);
  return TRUE;                
exception
  when NO_DATA_FOUND then
    return FALSE; 
end;

function check_unique(X_BUSINESS_ID RNT_BUSINESS_UNITS.BUSINESS_ID%TYPE,
                      X_PARENT_BUSINESS_ID RNT_BUSINESS_UNITS.PARENT_BUSINESS_ID%TYPE,
                      X_BUSINESS_NAME RNT_BUSINESS_UNITS.BUSINESS_NAME%TYPE
                      ) return boolean
is
  x NUMBER;
begin
   select 1 
   into x
   from DUAL
   where exists (
                   select 1
                   from RNT_BUSINESS_UNITS
                   where PARENT_BUSINESS_ID = X_PARENT_BUSINESS_ID
                     and BUSINESS_NAME = X_BUSINESS_NAME 
                     and (BUSINESS_ID != X_BUSINESS_ID or X_BUSINESS_ID is null)
                 );
  return false;
exception
  when NO_DATA_FOUND then
     return true;                        
end;       

function INSERT_ROW(X_BUSINESS_NAME RNT_BUSINESS_UNITS.BUSINESS_NAME%TYPE,
                    X_PARENT_BUSINESS_ID RNT_BUSINESS_UNITS.PARENT_BUSINESS_ID%TYPE
                   ) return RNT_BUSINESS_UNITS.BUSINESS_ID%TYPE
is
  x NUMBER;
begin
   
   if not check_allow_for_access(X_PARENT_BUSINESS_ID) then
       RAISE_APPLICATION_ERROR(-20006, 'You cannot create sub units for this business unit.');
   end if;

   if not check_unique(NULL, X_PARENT_BUSINESS_ID, X_BUSINESS_NAME) then
       RAISE_APPLICATION_ERROR(-20006, 'Name of business unit must be unique in parent business unit.');
   end if; 
    
   insert into RNT_BUSINESS_UNITS (
      BUSINESS_ID, BUSINESS_NAME, PARENT_BUSINESS_ID) 
   values (RNT_BUSINESS_UNITS_SEQ.NEXTVAL, X_BUSINESS_NAME, X_PARENT_BUSINESS_ID)
   returning BUSINESS_ID into x;  
   return x;
end;                    

procedure update_row(X_BUSINESS_ID RNT_BUSINESS_UNITS.BUSINESS_ID%TYPE,
                     X_BUSINESS_NAME RNT_BUSINESS_UNITS.BUSINESS_NAME%TYPE,
                     X_PARENT_BUSINESS_ID RNT_BUSINESS_UNITS.PARENT_BUSINESS_ID%TYPE,
                     X_CHECKSUM VARCHAR2
                     )
is
   l_checksum varchar2(32); 
begin
   
   lock_row(X_BUSINESS_ID);
   
   -- validate checksum   
   l_checksum := get_checksum(X_BUSINESS_ID);
   if X_CHECKSUM != l_checksum then
      RAISE_APPLICATION_ERROR(-20002, 'Record was changed another user.');
   end if;


   if not check_allow_for_access(X_BUSINESS_ID) then
       RAISE_APPLICATION_ERROR(-20006, 'You cannot update this unit.');
   end if;

   if not check_unique(X_BUSINESS_ID, X_PARENT_BUSINESS_ID, X_BUSINESS_NAME) then
       RAISE_APPLICATION_ERROR(-20006, 'Name of business unit must be unique in parent business unit.');
   end if; 
 
   update RNT_BUSINESS_UNITS  
   set BUSINESS_NAME      = X_BUSINESS_NAME,
       PARENT_BUSINESS_ID = X_PARENT_BUSINESS_ID
   where BUSINESS_ID      = X_BUSINESS_ID;       
end;

function is_properties_exists(X_BUSINESS_ID NUMBER)
return boolean
is  
  x NUMBER;
begin
  select 1
  into x
  from DUAL
  where exists (select 1
                from RNT_PROPERTIES
                where BUSINESS_ID = X_BUSINESS_ID
                );
  return true;
exception
  when NO_DATA_FOUND then
     return false;   
end;

function is_assign_user_exists(X_BUSINESS_ID NUMBER)
return boolean
is  
  x NUMBER;
begin
  select 1
  into x
  from DUAL
  where exists (select 1
                from RNT_USER_ASSIGNMENTS
                where BUSINESS_ID = X_BUSINESS_ID
                );
  return true;
exception
  when NO_DATA_FOUND then
     return false;   
end;
    
function is_subunits_exists(X_BUSINESS_ID NUMBER)
return boolean
is  
  x NUMBER;
begin
  select 1
  into x
  from DUAL
  where exists (select 1
                from RNT_BUSINESS_UNITS
                where PARENT_BUSINESS_ID = X_BUSINESS_ID
                );
  return true;
exception
  when NO_DATA_FOUND then
     return false;   
end;                 

procedure delete_row(X_BUSINESS_ID RNT_BUSINESS_UNITS.BUSINESS_ID%TYPE)
is
begin
   if is_properties_exists(X_BUSINESS_ID) then
      RAISE_APPLICATION_ERROR(-20011, 'Cannot delete record. Find properties for this record.');
   end if;   
   
   if (is_assign_user_exists(X_BUSINESS_ID)) then
      RAISE_APPLICATION_ERROR(-20011, 'Cannot delete record. Find assigned owners for this record.');
   end if;

   if (is_subunits_exists(X_BUSINESS_ID)) then
      RAISE_APPLICATION_ERROR(-20011, 'Cannot delete record. Find sub units for business unit.');
   end if;
 
   delete from RNT_BUSINESS_UNITS
   where BUSINESS_ID = X_BUSINESS_ID;
end;


END RNT_BUSINESS_UNITS_PKG;
Package body created.
SQL> SHOW ERRORS
No errors.
SQL> --
SQL> -- RNT_LOANS_PKG  (Package Body) 
SQL> --
SQL> CREATE OR REPLACE PACKAGE BODY        RNT_LOANS_PKG AS
/******************************************************************************
   NAME:       RNT_LOANS_PKG
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        08.04.2007             1. Created this package body.
******************************************************************************/

function get_checksum(X_LOAN_ID RNT_LOANS.LOAN_ID%TYPE) return VARCHAR2
is
begin
   for x in (select 
                LOAN_ID, PROPERTY_ID, POSITION, 
                LOAN_DATE, LOAN_AMOUNT, TERM, 
                INTEREST_RATE, CREDIT_LINE_YN, ARM_YN, 
                BALLOON_DATE, AMORTIZATION_START, SETTLEMENT_DATE
            from RNT_LOANS
            where LOAN_ID = X_LOAN_ID) loop
         RNT_SYS_CHECKSUM_REC_PKG.INIT;
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.LOAN_ID);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.PROPERTY_ID);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.POSITION);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.LOAN_DATE);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.LOAN_AMOUNT);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.TERM); 
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.INTEREST_RATE); 
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.CREDIT_LINE_YN); 
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.ARM_YN); 
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.BALLOON_DATE); 
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.AMORTIZATION_START);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.SETTLEMENT_DATE); 
         return RNT_SYS_CHECKSUM_REC_PKG.GET_CHECKSUM;
   end loop;
   raise NO_DATA_FOUND;               
end;

procedure lock_row(X_LOAN_ID RNT_LOANS.LOAN_ID%TYPE)
is
  cursor c is
     select * 
     from RNT_LOANS   
     where LOAN_ID = X_LOAN_ID
     for update of LOAN_ID nowait; 
begin
  open c;
  close c;
exception
  when OTHERS then
    if SQLCODE = -54 then
      RAISE_APPLICATION_ERROR(-20001, 'Cannot changed record. Record is locked.');
    end if;       
end;

function check_unique(X_LOAN_ID       RNT_LOANS.LOAN_ID%TYPE,
                      X_PROPERTY_ID   RNT_LOANS.PROPERTY_ID%TYPE,
                      X_POSITION      RNT_LOANS.POSITION%TYPE
                      ) return boolean
is
  x NUMBER;
begin
   select 1 
   into x
   from DUAL
   where exists (
                   select 1
                   from RNT_LOANS
                   where (LOAN_ID != X_LOAN_ID or X_LOAN_ID is null) 
                     and PROPERTY_ID = X_PROPERTY_ID
                     and POSITION = X_POSITION             
                 );
  return false;
exception
  when NO_DATA_FOUND then
     return true;                        
end;                 

procedure update_row(X_LOAN_ID            RNT_LOANS.LOAN_ID%TYPE,
                     X_PROPERTY_ID        RNT_LOANS.PROPERTY_ID%TYPE,
                     X_POSITION           RNT_LOANS.POSITION%TYPE,
                     X_LOAN_DATE          RNT_LOANS.LOAN_DATE%TYPE,
                     X_LOAN_AMOUNT        RNT_LOANS.LOAN_AMOUNT%TYPE,
                     X_TERM               RNT_LOANS.TERM%TYPE,
                     X_INTEREST_RATE      RNT_LOANS.INTEREST_RATE%TYPE,
                     X_CREDIT_LINE_YN     RNT_LOANS.CREDIT_LINE_YN%TYPE,
                     X_ARM_YN             RNT_LOANS.ARM_YN%TYPE,
                     X_BALLOON_DATE       RNT_LOANS.BALLOON_DATE%TYPE,
                     X_AMORTIZATION_START RNT_LOANS.AMORTIZATION_START%TYPE,
                     X_SETTLEMENT_DATE    RNT_LOANS.SETTLEMENT_DATE%TYPE,
                     X_CHECKSUM           VARCHAR2
                    )
is
 l_checksum varchar2(32); 
begin
   lock_row(X_LOAN_ID);
   
   -- validate checksum   
   l_checksum := get_checksum(X_LOAN_ID);
   if X_CHECKSUM != l_checksum then
      RAISE_APPLICATION_ERROR(-20002, 'Record was changed another user.');
   end if;

   if not check_unique(X_LOAN_ID, X_PROPERTY_ID, X_POSITION) then
        RAISE_APPLICATION_ERROR(-20006, 'Position in property must be unique.');                      
   end if;   
   
   update RNT_LOANS
   set LOAN_ID            = X_LOAN_ID,
       PROPERTY_ID        = X_PROPERTY_ID,
       POSITION           = X_POSITION,
       LOAN_DATE          = X_LOAN_DATE,
       LOAN_AMOUNT        = X_LOAN_AMOUNT,
       TERM               = X_TERM,
       INTEREST_RATE      = X_INTEREST_RATE,
       CREDIT_LINE_YN     = X_CREDIT_LINE_YN,
       ARM_YN             = X_ARM_YN,
       BALLOON_DATE       = X_BALLOON_DATE,
       AMORTIZATION_START = X_AMORTIZATION_START,
       SETTLEMENT_DATE    = X_SETTLEMENT_DATE
   where LOAN_ID = X_LOAN_ID;
end;                                  

function insert_row( X_PROPERTY_ID        RNT_LOANS.PROPERTY_ID%TYPE,
                     X_POSITION           RNT_LOANS.POSITION%TYPE,
                     X_LOAN_DATE          RNT_LOANS.LOAN_DATE%TYPE,
                     X_LOAN_AMOUNT        RNT_LOANS.LOAN_AMOUNT%TYPE,
                     X_TERM               RNT_LOANS.TERM%TYPE,
                     X_INTEREST_RATE      RNT_LOANS.INTEREST_RATE%TYPE,
                     X_CREDIT_LINE_YN     RNT_LOANS.CREDIT_LINE_YN%TYPE,
                     X_ARM_YN             RNT_LOANS.ARM_YN%TYPE,
                     X_BALLOON_DATE       RNT_LOANS.BALLOON_DATE%TYPE,
                     X_AMORTIZATION_START RNT_LOANS.AMORTIZATION_START%TYPE,
                     X_SETTLEMENT_DATE    RNT_LOANS.SETTLEMENT_DATE%TYPE
                    ) return RNT_LOANS.LOAN_ID%TYPE
is
  x NUMBER;
begin
   if not check_unique(NULL, X_PROPERTY_ID, X_POSITION) then
        RAISE_APPLICATION_ERROR(-20006, 'Position in property must be unique.');                      
   end if;
   
   insert into RNT_LOANS (
       LOAN_ID, PROPERTY_ID, POSITION, 
       LOAN_DATE, LOAN_AMOUNT, TERM, 
       INTEREST_RATE, CREDIT_LINE_YN, ARM_YN, 
       BALLOON_DATE, AMORTIZATION_START, SETTLEMENT_DATE) 
    values (RNT_LOANS_SEQ.NEXTVAL, X_PROPERTY_ID, X_POSITION, 
         X_LOAN_DATE, X_LOAN_AMOUNT, X_TERM, 
         X_INTEREST_RATE, X_CREDIT_LINE_YN, X_ARM_YN, 
         X_BALLOON_DATE, X_AMORTIZATION_START, X_SETTLEMENT_DATE)
    returning LOAN_ID into x;
             
    return x;
end;                    

function is_exists_acc_receivable(X_LOAN_ID RNT_LOANS.LOAN_ID%TYPE) return boolean
is
 x NUMBER;
begin
  select 1
  into x
  from DUAL
  where exists (select 1
                from RNT_ACCOUNTS_RECEIVABLE
                where LOAN_ID = X_LOAN_ID
                );
  return true;
exception
  when NO_DATA_FOUND then
     return false;   
end;

function is_exists_acc_payable(X_LOAN_ID RNT_LOANS.LOAN_ID%TYPE) return boolean
is
 x NUMBER;
begin
  select 1
  into x
  from DUAL
  where exists (select 1
                from RNT_ACCOUNTS_PAYABLE
                where LOAN_ID = X_LOAN_ID
                );
  return true;
exception
  when NO_DATA_FOUND then
     return false;   
end;

procedure delete_row(X_LOAN_ID       RNT_LOANS.LOAN_ID%TYPE)
is
begin
  -- check for exists child records
  if is_exists_acc_receivable(X_LOAN_ID) then
     RAISE_APPLICATION_ERROR(-20004, 'Cannot delete record. For loan exists accounts receivable.');
  end if; 
  if is_exists_acc_payable(X_LOAN_ID) then
     RAISE_APPLICATION_ERROR(-20004, 'Cannot delete record. For loan exists accounts payable.');
  end if;
    
  delete from RNT_LOANS
  where LOAN_ID = X_LOAN_ID;
end;

END RNT_LOANS_PKG;
Package body created.
SQL> SHOW ERRORS
No errors.
SQL> --
SQL> -- RNT_PROPERTIES_PKG  (Package) 
SQL> --
SQL> CREATE OR REPLACE PACKAGE        RNT_PROPERTIES_PKG AS
/******************************************************************************
   NAME:       RNT_PROPERTIES_PKG
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        30.03.2007             1. Created this package.
******************************************************************************/
E_ROW_LOCKED EXCEPTION;
E_ROW_CHANGED_ANOTHER_USER EXCEPTION;

PRAGMA EXCEPTION_INIT (E_ROW_LOCKED, -20001);
PRAGMA EXCEPTION_INIT (E_ROW_CHANGED_ANOTHER_USER, -20002);

function get_ckecksum(p_property_id RNT_PROPERTIES.PROPERTY_ID%TYPE) return VARCHAR2;

procedure lock_row(X_PROPERTY_ID RNT_PROPERTIES.PROPERTY_ID%TYPE); 
   

procedure update_row(X_PROPERTY_ID       RNT_PROPERTIES.PROPERTY_ID%TYPE, 
                     X_BUSINESS_ID       RNT_PROPERTIES.BUSINESS_ID%TYPE,
                     X_UNITS             RNT_PROPERTIES.UNITS%TYPE,                      
                     X_ADDRESS1          RNT_PROPERTIES.ADDRESS1%TYPE, 
                     X_ADDRESS2          RNT_PROPERTIES.ADDRESS2%TYPE, 
                     X_CITY              RNT_PROPERTIES.CITY%TYPE, 
                     X_STATE             RNT_PROPERTIES.STATE%TYPE, 
                     X_ZIPCODE           RNT_PROPERTIES.ZIPCODE%TYPE, 
                     X_DATE_PURCHASED    RNT_PROPERTIES.DATE_PURCHASED%TYPE, 
                     X_PURCHASE_PRICE    RNT_PROPERTIES.PURCHASE_PRICE%TYPE, 
                     X_LAND_VALUE        RNT_PROPERTIES.LAND_VALUE%TYPE, 
                     X_DEPRECIATION_TERM RNT_PROPERTIES.DEPRECIATION_TERM%TYPE, 
                     X_YEAR_BUILT        RNT_PROPERTIES.YEAR_BUILT%TYPE, 
                     X_BUILDING_SIZE     RNT_PROPERTIES.BUILDING_SIZE%TYPE, 
                     X_LOT_SIZE          RNT_PROPERTIES.LOT_SIZE%TYPE, 
                     X_DATE_SOLD         RNT_PROPERTIES.DATE_SOLD%TYPE, 
                     X_SALE_AMOUNT       RNT_PROPERTIES.SALE_AMOUNT%TYPE, 
                     X_NOTE_YN           RNT_PROPERTIES.NOTE_YN%TYPE,
                     X_CHECKSUM VARCHAR2); 

function insert_row( 
                     X_BUSINESS_ID       RNT_PROPERTIES.BUSINESS_ID%TYPE,
                     X_UNITS             RNT_PROPERTIES.UNITS%TYPE, 
                     X_ADDRESS1          RNT_PROPERTIES.ADDRESS1%TYPE, 
                     X_ADDRESS2          RNT_PROPERTIES.ADDRESS2%TYPE, 
                     X_CITY              RNT_PROPERTIES.CITY%TYPE, 
                     X_STATE             RNT_PROPERTIES.STATE%TYPE, 
                     X_ZIPCODE           RNT_PROPERTIES.ZIPCODE%TYPE, 
                     X_DATE_PURCHASED    RNT_PROPERTIES.DATE_PURCHASED%TYPE, 
                     X_PURCHASE_PRICE    RNT_PROPERTIES.PURCHASE_PRICE%TYPE, 
                     X_LAND_VALUE        RNT_PROPERTIES.LAND_VALUE%TYPE, 
                     X_DEPRECIATION_TERM RNT_PROPERTIES.DEPRECIATION_TERM%TYPE, 
                     X_YEAR_BUILT        RNT_PROPERTIES.YEAR_BUILT%TYPE, 
                     X_BUILDING_SIZE     RNT_PROPERTIES.BUILDING_SIZE%TYPE, 
                     X_LOT_SIZE          RNT_PROPERTIES.LOT_SIZE%TYPE, 
                     X_DATE_SOLD         RNT_PROPERTIES.DATE_SOLD%TYPE, 
                     X_SALE_AMOUNT       RNT_PROPERTIES.SALE_AMOUNT%TYPE, 
                     X_NOTE_YN           RNT_PROPERTIES.NOTE_YN%TYPE)
    return RNT_PROPERTIES.PROPERTY_ID%TYPE;

procedure delete_row(X_PROPERTY_ID       RNT_PROPERTIES.PROPERTY_ID%TYPE);
                          
END RNT_PROPERTIES_PKG;
Package created.
SQL> SHOW ERRORS
No errors.
SQL> --
SQL> -- RNT_PROPERTIES_PKG  (Package Body) 
SQL> --
SQL> CREATE OR REPLACE PACKAGE BODY        RNT_PROPERTIES_PKG AS
/******************************************************************************
   NAME:       RNT_PROPERTIES_PKG
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        30.03.2007             1. Created this package body.
******************************************************************************/

function get_ckecksum(p_property_id RNT_PROPERTIES.PROPERTY_ID%TYPE) return VARCHAR2
is
begin
   for x in (select 
                 PROPERTY_ID, BUSINESS_ID, 
                 ADDRESS1, ADDRESS2, CITY, UNITS,
                 STATE, ZIPCODE, 
                 DATE_PURCHASED, PURCHASE_PRICE, LAND_VALUE, 
                 DEPRECIATION_TERM, YEAR_BUILT, BUILDING_SIZE, 
                 LOT_SIZE, DATE_SOLD, SALE_AMOUNT, 
                 NOTE_YN
              from RNT_PROPERTIES
              where PROPERTY_ID = p_property_id) loop
         RNT_SYS_CHECKSUM_REC_PKG.INIT;
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.PROPERTY_ID);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.BUSINESS_ID);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.UNITS);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.ADDRESS1);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.ADDRESS2);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.CITY); 
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.STATE); 
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.ZIPCODE); 
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.DATE_PURCHASED); 
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.PURCHASE_PRICE); 
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.LAND_VALUE);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.DEPRECIATION_TERM); 
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.YEAR_BUILT);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.BUILDING_SIZE); 
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.LOT_SIZE);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.DATE_SOLD);
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.SALE_AMOUNT); 
         RNT_SYS_CHECKSUM_REC_PKG.APPEND(x.NOTE_YN);
         return RNT_SYS_CHECKSUM_REC_PKG.GET_CHECKSUM;
   end loop;
   raise NO_DATA_FOUND;               
end;

procedure lock_row(X_PROPERTY_ID RNT_PROPERTIES.PROPERTY_ID%TYPE)
is
  cursor c is
    select 
      PROPERTY_ID, BUSINESS_ID, UNITS, 
      ADDRESS1, ADDRESS2, 
      CITY, STATE, ZIPCODE, 
      DATE_PURCHASED, PURCHASE_PRICE, LAND_VALUE, 
      DEPRECIATION_TERM, YEAR_BUILT, BUILDING_SIZE, 
      LOT_SIZE, DATE_SOLD, SALE_AMOUNT, 
      NOTE_YN
   from RNT_PROPERTIES
   where PROPERTY_ID = X_PROPERTY_ID
   for update of PROPERTY_ID nowait; 
begin
  open c;
  close c;
exception
  when OTHERS then
    if SQLCODE = -54 then
      RAISE_APPLICATION_ERROR(-20001, 'Cannot changed record. Record is locked.');
    end if;       
end;

function check_unique(X_PROPERTY_ID       RNT_PROPERTIES.PROPERTY_ID%TYPE, 
                      X_ADDRESS1          RNT_PROPERTIES.ADDRESS1%TYPE, 
                      X_ADDRESS2          RNT_PROPERTIES.ADDRESS2%TYPE, 
                      X_CITY              RNT_PROPERTIES.CITY%TYPE, 
                      X_STATE             RNT_PROPERTIES.STATE%TYPE, 
                      X_ZIPCODE           RNT_PROPERTIES.ZIPCODE%TYPE) return boolean
is
  x NUMBER;
begin
   select 1 
   into x
   from DUAL
   where exists (
                   select 1
                   from RNT_PROPERTIES
                   where (PROPERTY_ID != X_PROPERTY_ID or X_PROPERTY_ID is null) 
                     and ADDRESS1 = X_ADDRESS1 
                     and ADDRESS2 = X_ADDRESS2 
                     and CITY = X_CITY 
                     and STATE = X_STATE 
                     and ZIPCODE = X_ZIPCODE            
                 );
  return false;
exception
  when NO_DATA_FOUND then
     return true;                        
end;                               

procedure update_row(X_PROPERTY_ID       RNT_PROPERTIES.PROPERTY_ID%TYPE, 
                     X_BUSINESS_ID       RNT_PROPERTIES.BUSINESS_ID%TYPE, 
                     X_UNITS             RNT_PROPERTIES.UNITS%TYPE,
                     X_ADDRESS1          RNT_PROPERTIES.ADDRESS1%TYPE, 
                     X_ADDRESS2          RNT_PROPERTIES.ADDRESS2%TYPE, 
                     X_CITY              RNT_PROPERTIES.CITY%TYPE, 
                     X_STATE             RNT_PROPERTIES.STATE%TYPE, 
                     X_ZIPCODE           RNT_PROPERTIES.ZIPCODE%TYPE, 
                     X_DATE_PURCHASED    RNT_PROPERTIES.DATE_PURCHASED%TYPE, 
                     X_PURCHASE_PRICE    RNT_PROPERTIES.PURCHASE_PRICE%TYPE, 
                     X_LAND_VALUE        RNT_PROPERTIES.LAND_VALUE%TYPE, 
                     X_DEPRECIATION_TERM RNT_PROPERTIES.DEPRECIATION_TERM%TYPE, 
                     X_YEAR_BUILT        RNT_PROPERTIES.YEAR_BUILT%TYPE, 
                     X_BUILDING_SIZE     RNT_PROPERTIES.BUILDING_SIZE%TYPE, 
                     X_LOT_SIZE          RNT_PROPERTIES.LOT_SIZE%TYPE, 
                     X_DATE_SOLD         RNT_PROPERTIES.DATE_SOLD%TYPE, 
                     X_SALE_AMOUNT       RNT_PROPERTIES.SALE_AMOUNT%TYPE, 
                     X_NOTE_YN           RNT_PROPERTIES.NOTE_YN%TYPE,
                     X_CHECKSUM          VARCHAR2) 
is
  l_checksum varchar2(32);
  xl_num_units NUMBER := X_UNITS;
  x_cnt NUMBER;
  x1 NUMBER; 
begin
   lock_row(X_PROPERTY_ID);
   
   -- validate checksum   
   l_checksum := get_ckecksum(X_PROPERTY_ID);
   if X_CHECKSUM != l_checksum then
      RAISE_APPLICATION_ERROR(-20002, 'Record was changed another user.');
      --E_ROW_CHANGED_ANOTHER_USER  
   end if;

   if not check_unique(X_PROPERTY_ID,X_ADDRESS1, X_ADDRESS2, 
                      X_CITY, X_STATE, X_ZIPCODE) then
        RAISE_APPLICATION_ERROR(-20006, 'Address of property must be unique');                      
   end if;   
   
   if not RNT_BUSINESS_UNITS_PKG.CHECK_ALLOW_FOR_ACCESS(X_BUSINESS_ID) then
       RAISE_APPLICATION_ERROR(-20006, 'You cannot update this property becouse not allowed business unit reference.');
   end if;                    
   
   -- validate num rows
   select count(*)
   into x_cnt
   from RNT_PROPERTY_UNITS
   where PROPERTY_ID = X_PROPERTY_ID;
   
   if X_UNITS - x_cnt < 0 then
        RAISE_APPLICATION_ERROR(-20006, 'Value Units must be great then quantity of units in property.');   
   end if; 
   
   if x_cnt = 0 and X_UNITS = 1 then
     -- append single unit  
     x1 := RNT_PROPERTY_UNITS_PKG.INSERT_ROW(X_PROPERTY_ID => X_PROPERTY_ID, 
                                             X_UNIT_NAME => 'Single Unit', 
                                             X_UNIT_SIZE => X_BUILDING_SIZE, 
                                             X_BEDROOMS => NULL, 
                                             X_BATHROOMS => NULL);      
   end if;
      
   update RNT_PROPERTIES
   set PROPERTY_ID       = X_PROPERTY_ID,
       BUSINESS_ID       = X_BUSINESS_ID,
       UNITS             = X_UNITS,
       ADDRESS1          = X_ADDRESS1,
       ADDRESS2          = X_ADDRESS2,
       CITY              = X_CITY,
       STATE             = X_STATE,
       ZIPCODE           = X_ZIPCODE,
       DATE_PURCHASED    = X_DATE_PURCHASED,
       PURCHASE_PRICE    = X_PURCHASE_PRICE,
       LAND_VALUE        = X_LAND_VALUE,
       DEPRECIATION_TERM = X_DEPRECIATION_TERM,
       YEAR_BUILT        = X_YEAR_BUILT,
       BUILDING_SIZE     = X_BUILDING_SIZE,
       LOT_SIZE          = X_LOT_SIZE,
       DATE_SOLD         = X_DATE_SOLD,
       SALE_AMOUNT       = X_SALE_AMOUNT,
       NOTE_YN           = X_NOTE_YN
   where  PROPERTY_ID    = X_PROPERTY_ID;
end;

function insert_row( X_BUSINESS_ID       RNT_PROPERTIES.BUSINESS_ID%TYPE,
                     X_UNITS             RNT_PROPERTIES.UNITS%TYPE, 
                     X_ADDRESS1          RNT_PROPERTIES.ADDRESS1%TYPE, 
                     X_ADDRESS2          RNT_PROPERTIES.ADDRESS2%TYPE, 
                     X_CITY              RNT_PROPERTIES.CITY%TYPE, 
                     X_STATE             RNT_PROPERTIES.STATE%TYPE, 
                     X_ZIPCODE           RNT_PROPERTIES.ZIPCODE%TYPE, 
                     X_DATE_PURCHASED    RNT_PROPERTIES.DATE_PURCHASED%TYPE, 
                     X_PURCHASE_PRICE    RNT_PROPERTIES.PURCHASE_PRICE%TYPE, 
                     X_LAND_VALUE        RNT_PROPERTIES.LAND_VALUE%TYPE, 
                     X_DEPRECIATION_TERM RNT_PROPERTIES.DEPRECIATION_TERM%TYPE, 
                     X_YEAR_BUILT        RNT_PROPERTIES.YEAR_BUILT%TYPE, 
                     X_BUILDING_SIZE     RNT_PROPERTIES.BUILDING_SIZE%TYPE, 
                     X_LOT_SIZE          RNT_PROPERTIES.LOT_SIZE%TYPE, 
                     X_DATE_SOLD         RNT_PROPERTIES.DATE_SOLD%TYPE, 
                     X_SALE_AMOUNT       RNT_PROPERTIES.SALE_AMOUNT%TYPE, 
                     X_NOTE_YN           RNT_PROPERTIES.NOTE_YN%TYPE)
       return RNT_PROPERTIES.PROPERTY_ID%TYPE                     
is
 x RNT_PROPERTIES.PROPERTY_ID%TYPE;
 xl_num_units RNT_PROPERTIES.UNITS%TYPE;
 x1 RNT_PROPERTY_UNITS.UNIT_ID%TYPE;
begin

   if not check_unique(NULL,X_ADDRESS1, X_ADDRESS2, 
                      X_CITY, X_STATE, X_ZIPCODE) then
        RAISE_APPLICATION_ERROR(-20006, 'Address of property must be unique');                      
   end if;  

   if not RNT_BUSINESS_UNITS_PKG.CHECK_ALLOW_FOR_ACCESS(X_BUSINESS_ID) then
       RAISE_APPLICATION_ERROR(-20006, 'You cannot insert this property becouse not allowed business unit reference.');
   end if;                    
   
  xl_num_units := X_UNITS;
    
  -- num of units must be 1 or more 
  if xl_num_units = 0 then
      xl_num_units := 1;
  end if;
    
  insert into RNT_PROPERTIES (
           PROPERTY_ID, BUSINESS_ID, UNITS, 
           ADDRESS1, ADDRESS2, 
           CITY, STATE, ZIPCODE, 
           DATE_PURCHASED, PURCHASE_PRICE, LAND_VALUE, 
           DEPRECIATION_TERM, YEAR_BUILT, BUILDING_SIZE, 
           LOT_SIZE, DATE_SOLD, SALE_AMOUNT, 
           NOTE_YN) 
  values (RNT_PROPERTIES_SEQ.NEXTVAL, X_BUSINESS_ID,  xl_num_units, 
   X_ADDRESS1, X_ADDRESS2, 
   X_CITY, X_STATE, X_ZIPCODE, 
   X_DATE_PURCHASED, X_PURCHASE_PRICE, X_LAND_VALUE, 
   X_DEPRECIATION_TERM, X_YEAR_BUILT, X_BUILDING_SIZE, 
   X_LOT_SIZE, X_DATE_SOLD, X_SALE_AMOUNT, 
   X_NOTE_YN)
  returning PROPERTY_ID into x;
  
  if xl_num_units = 1 then
       -- append single unit  
       x1 := RNT_PROPERTY_UNITS_PKG.INSERT_ROW(X_PROPERTY_ID => x, 
                                               X_UNIT_NAME => 'Single Unit', 
                                               X_UNIT_SIZE => X_BUILDING_SIZE, 
                                               X_BEDROOMS => NULL, 
                                               X_BATHROOMS => NULL);
  end if;
  
  return x;
end;

function is_exists_value(X_PROPERTY_ID RNT_PROPERTIES.PROPERTY_ID%TYPE) return boolean
is
 x NUMBER;
begin
  select 1
  into x
  from DUAL
  where exists (select 1
                from RNT_PROPERTY_VALUE
                where PROPERTY_ID = X_PROPERTY_ID
                );
  return true;
exception
  when NO_DATA_FOUND then
     return false;   
end;

function is_exists_unit(X_PROPERTY_ID RNT_PROPERTIES.PROPERTY_ID%TYPE) return boolean
is
 x NUMBER;
begin
  for x in (select UNIT_ID from RNT_PROPERTY_UNITS where PROPERTY_ID = X_PROPERTY_ID) loop
     if RNT_PROPERTY_UNITS_PKG.IS_EXISTS_CHILDS(x.UNIT_ID) then
        return true;
     end if;   
  end loop;
  return false;
end;

function is_exists_expenses(X_PROPERTY_ID RNT_PROPERTIES.PROPERTY_ID%TYPE) return boolean
is
 x NUMBER;
begin
  select 1
  into x
  from DUAL
  where exists (select 1
                from RNT_PROPERTY_EXPENSES
                where PROPERTY_ID = X_PROPERTY_ID
                );
  return true;
exception
  when NO_DATA_FOUND then
     return false;   
end;


procedure delete_row(X_PROPERTY_ID       RNT_PROPERTIES.PROPERTY_ID%TYPE)
is
begin
-- check for exists child records
  if is_exists_value(X_PROPERTY_ID) then
    RAISE_APPLICATION_ERROR(-20004, 'Cannot delete record. For property exists value(s) record.');
  end if;
  if is_exists_unit(X_PROPERTY_ID) then
    RAISE_APPLICATION_ERROR(-20004, 'Cannot delete record. For property exists units with child records.');
  end if;
  if is_exists_expenses(X_PROPERTY_ID) then
    RAISE_APPLICATION_ERROR(-20004, 'Cannot delete record. For property exists expenses expenses.');
  end if;
  
  delete from RNT_PROPERTY_UNITS
  where PROPERTY_ID = X_PROPERTY_ID;
  
  delete from RNT_PROPERTIES
  where PROPERTY_ID = X_PROPERTY_ID;
end;

END RNT_PROPERTIES_PKG;
Package body created.
SQL> SHOW ERRORS
No errors.
SQL> @@users_data.sql
SQL> SET DEFINE OFF
SQL> Insert into RNT_USERS
   (USER_ID, USER_LOGIN, USER_NAME, USER_PASSWORD, IS_ACTIVE_YN)
 Values
   (1, 'test@visulate.com', 'Test', '098f6bcd4621d373cade4e832627b4f6', 'Y')
1 row created.
SQL> Insert into RNT_USERS
   (USER_ID, USER_LOGIN, USER_NAME, USER_PASSWORD, IS_ACTIVE_YN)
 Values
   (2, 'ownerX@visulate.com', 'Owner X', '098f6bcd4621d373cade4e832627b4f6', 'Y')
1 row created.
SQL> COMMIT
Commit complete.
SQL> SET DEFINE OFF
SQL> Insert into RNT_USER_ROLES
   (ROLE_ID, ROLE_CODE, ROLE_NAME)
 Values
   (3, 'ADMIN', 'Administrator')
1 row created.
SQL> Insert into RNT_USER_ROLES
   (ROLE_ID, ROLE_CODE, ROLE_NAME)
 Values
   (1, 'MANAGER', 'Manager')
1 row created.
SQL> Insert into RNT_USER_ROLES
   (ROLE_ID, ROLE_CODE, ROLE_NAME)
 Values
   (2, 'OWNER', 'Owner ')
1 row created.
SQL> COMMIT
Commit complete.
SQL> SET DEFINE OFF
SQL> Insert into RNT_USER_ASSIGNMENTS
   (USER_ASSIGN_ID, ROLE_ID, USER_ID, BUSINESS_ID)
 Values
   (2, 3, 1, 0)
ORA-02291: integrity constraint (TESTRNTMGR.RNT_USER_ASSIGNMENTS_FK3) violated - parent key not found
SQL> Insert into RNT_USER_ASSIGNMENTS
   (USER_ASSIGN_ID, ROLE_ID, USER_ID, BUSINESS_ID)
 Values
   (1, 1, 1, 1)
ORA-02291: integrity constraint (TESTRNTMGR.RNT_USER_ASSIGNMENTS_FK3) violated - parent key not found
SQL> Insert into RNT_USER_ASSIGNMENTS
   (USER_ASSIGN_ID, ROLE_ID, USER_ID, BUSINESS_ID)
 Values
   (3, 2, 1, 16)
ORA-02291: integrity constraint (TESTRNTMGR.RNT_USER_ASSIGNMENTS_FK3) violated - parent key not found
SQL> COMMIT
Commit complete.
SQL> SET DEFINE OFF
SQL> Insert into RNT_BUSINESS_UNITS
   (BUSINESS_ID, BUSINESS_NAME, PARENT_BUSINESS_ID)
 Values
   (0, 'Root business unit', -1)
1 row created.
SQL> Insert into RNT_BUSINESS_UNITS
   (BUSINESS_ID, BUSINESS_NAME, PARENT_BUSINESS_ID)
 Values
   (1, 'Manager for X and Y owner', 0)
1 row created.
SQL> Insert into RNT_BUSINESS_UNITS
   (BUSINESS_ID, BUSINESS_NAME, PARENT_BUSINESS_ID)
 Values
   (16, 'Business Unit for owner X', 1)
1 row created.
SQL> Insert into RNT_BUSINESS_UNITS
   (BUSINESS_ID, BUSINESS_NAME, PARENT_BUSINESS_ID)
 Values
   (17, 'Business Unit for owner Y', 1)
1 row created.
SQL> COMMIT
Commit complete.
SQL> SET DEFINE OFF
SQL> Insert into RNT_USER_ASSIGNMENTS
   (USER_ASSIGN_ID, ROLE_ID, USER_ID, BUSINESS_ID)
 Values
   (2, 3, 1, 0)
1 row created.
SQL> Insert into RNT_USER_ASSIGNMENTS
   (USER_ASSIGN_ID, ROLE_ID, USER_ID, BUSINESS_ID)
 Values
   (17, 2, 1, 16)
1 row created.
SQL> Insert into RNT_USER_ASSIGNMENTS
   (USER_ASSIGN_ID, ROLE_ID, USER_ID, BUSINESS_ID)
 Values
   (15, 1, 1, 1)
1 row created.
SQL> COMMIT
Commit complete.
SQL> @@lookup_data.sql
SQL> SET DEFINE OFF
SQL> Insert into RNT_LOOKUP_TYPES
   (LOOKUP_TYPE_ID, LOOKUP_TYPE_CODE, LOOKUP_TYPE_DESCRIPTION)
 Values
   (5, 'ACTION_TYPES', 'Agreement action type')
1 row created.
SQL> Insert into RNT_LOOKUP_TYPES
   (LOOKUP_TYPE_ID, LOOKUP_TYPE_CODE, LOOKUP_TYPE_DESCRIPTION)
 Values
   (4, 'TENANT_STATUS', 'Tenant status')
1 row created.
SQL> Insert into RNT_LOOKUP_TYPES
   (LOOKUP_TYPE_ID, LOOKUP_TYPE_CODE, LOOKUP_TYPE_DESCRIPTION)
 Values
   (1, 'STATES', 'States of USA')
1 row created.
SQL> Insert into RNT_LOOKUP_TYPES
   (LOOKUP_TYPE_ID, LOOKUP_TYPE_CODE, LOOKUP_TYPE_DESCRIPTION)
 Values
   (2, 'RENT_PERIOD', 'Rent period for agreements.')
1 row created.
SQL> Insert into RNT_LOOKUP_TYPES
   (LOOKUP_TYPE_ID, LOOKUP_TYPE_CODE, LOOKUP_TYPE_DESCRIPTION)
 Values
   (3, 'FEE_TYPE', 'Fee type for agreements')
1 row created.
SQL> COMMIT
Commit complete.
SQL> SET DEFINE OFF
SQL> Insert into RNT_LOOKUP_VALUES
   (LOOKUP_VALUE_ID, LOOKUP_CODE, LOOKUP_VALUE, LOOKUP_TYPE_ID)
 Values
   (1, 'NC', 'North Carolina', 1)
1 row created.
SQL> Insert into RNT_LOOKUP_VALUES
   (LOOKUP_VALUE_ID, LOOKUP_CODE, LOOKUP_VALUE, LOOKUP_TYPE_ID)
 Values
   (2, 'FL', 'Florida', 1)
1 row created.
SQL> Insert into RNT_LOOKUP_VALUES
   (LOOKUP_VALUE_ID, LOOKUP_CODE, LOOKUP_VALUE, LOOKUP_TYPE_ID)
 Values
   (3, 'MONTH', 'Month', 2)
1 row created.
SQL> Insert into RNT_LOOKUP_VALUES
   (LOOKUP_VALUE_ID, LOOKUP_CODE, LOOKUP_VALUE, LOOKUP_TYPE_ID)
 Values
   (4, 'BI-MONTH', 'Bi-Month', 2)
1 row created.
SQL> Insert into RNT_LOOKUP_VALUES
   (LOOKUP_VALUE_ID, LOOKUP_CODE, LOOKUP_VALUE, LOOKUP_TYPE_ID)
 Values
   (5, '2WEEKS', '2-Weeks', 2)
1 row created.
SQL> Insert into RNT_LOOKUP_VALUES
   (LOOKUP_VALUE_ID, LOOKUP_CODE, LOOKUP_VALUE, LOOKUP_TYPE_ID)
 Values
   (6, 'WEEK', 'Week', 2)
1 row created.
SQL> Insert into RNT_LOOKUP_VALUES
   (LOOKUP_VALUE_ID, LOOKUP_CODE, LOOKUP_VALUE, LOOKUP_TYPE_ID)
 Values
   (7, 'DISCOUNT', 'Discount', 3)
1 row created.
SQL> Insert into RNT_LOOKUP_VALUES
   (LOOKUP_VALUE_ID, LOOKUP_CODE, LOOKUP_VALUE, LOOKUP_TYPE_ID)
 Values
   (8, 'LATE_FEE', 'Late Fee', 3)
1 row created.
SQL> Insert into RNT_LOOKUP_VALUES
   (LOOKUP_VALUE_ID, LOOKUP_CODE, LOOKUP_VALUE, LOOKUP_TYPE_ID)
 Values
   (11, 'CURRENT', 'Current', 4)
1 row created.
SQL> Insert into RNT_LOOKUP_VALUES
   (LOOKUP_VALUE_ID, LOOKUP_CODE, LOOKUP_VALUE, LOOKUP_TYPE_ID)
 Values
   (12, 'APPLICANT', 'Applicant', 4)
1 row created.
SQL> Insert into RNT_LOOKUP_VALUES
   (LOOKUP_VALUE_ID, LOOKUP_CODE, LOOKUP_VALUE, LOOKUP_TYPE_ID)
 Values
   (13, 'GOOD', 'Former - Good', 4)
1 row created.
SQL> Insert into RNT_LOOKUP_VALUES
   (LOOKUP_VALUE_ID, LOOKUP_CODE, LOOKUP_VALUE, LOOKUP_TYPE_ID)
 Values
   (14, 'BAD', 'Former - Bad', 4)
1 row created.
SQL> Insert into RNT_LOOKUP_VALUES
   (LOOKUP_VALUE_ID, LOOKUP_CODE, LOOKUP_VALUE, LOOKUP_TYPE_ID)
 Values
   (15, 'F', 'Failed Inspection', 5)
1 row created.
SQL> Insert into RNT_LOOKUP_VALUES
   (LOOKUP_VALUE_ID, LOOKUP_CODE, LOOKUP_VALUE, LOOKUP_TYPE_ID)
 Values
   (16, '3D', '3 Day Notice', 5)
1 row created.
SQL> Insert into RNT_LOOKUP_VALUES
   (LOOKUP_VALUE_ID, LOOKUP_CODE, LOOKUP_VALUE, LOOKUP_TYPE_ID)
 Values
   (17, 'E', 'File for Eviction', 5)
1 row created.
SQL> Insert into RNT_LOOKUP_VALUES
   (LOOKUP_VALUE_ID, LOOKUP_CODE, LOOKUP_VALUE, LOOKUP_TYPE_ID)
 Values
   (18, 'S', 'Serve Court Order', 5)
1 row created.
SQL> COMMIT
Commit complete.
SQL> spool off
