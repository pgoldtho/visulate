SQL> 
SQL> @@tables.sql
SQL> DROP INDEX RNT_EXPENSE_ITEMS_I1;

Index dropped.

SQL> 
SQL> CREATE SEQUENCE RNT_PROPERTY_PHOTOS_SEQ
  2    START WITH 28
  3    MAXVALUE 999999999999999999999999999
  4    MINVALUE 1
  5    NOCYCLE
  6    NOCACHE
  7    NOORDER;

Sequence created.

SQL> 
SQL> CREATE TABLE RNT_PROPERTY_PHOTOS
  2  (
  3    PHOTO_ID        NUMBER			     NOT NULL,
  4    PHOTO_TITLE     VARCHAR2(300 BYTE)	     NOT NULL,
  5    PHOTO_FILENAME  VARCHAR2(1024 BYTE)	     NOT NULL,
  6    PROPERTY_ID     NUMBER			     NOT NULL
  7  )
  8  LOGGING
  9  NOCOMPRESS
 10  NOCACHE
 11  NOPARALLEL
 12  MONITORING;

Table created.

SQL> 
SQL> COMMENT ON TABLE RNT_PROPERTY_PHOTOS IS 'Photos of property.';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN RNT_PROPERTY_PHOTOS.PHOTO_ID IS 'Photo ID';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN RNT_PROPERTY_PHOTOS.PHOTO_TITLE IS 'Photo title';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN RNT_PROPERTY_PHOTOS.PHOTO_FILENAME IS 'Filename with photo';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN RNT_PROPERTY_PHOTOS.PROPERTY_ID IS 'FK to Property ID';

Comment created.

SQL> 
SQL> CREATE UNIQUE INDEX RNT_PROPERTY_PHOTOS_PK ON RNT_PROPERTY_PHOTOS
  2  (PHOTO_ID)
  3  LOGGING
  4  NOPARALLEL;

Index created.

SQL> 
SQL> ALTER TABLE RNT_PROPERTY_PHOTOS
  2   ADD CONSTRAINT RNT_PROPERTY_PHOTOS_PK
  3   PRIMARY KEY
  4   (PHOTO_ID);

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE RNT_PROPERTY_PHOTOS
  2   ADD CONSTRAINT RNT_PROPERTY_PHOTOS_FK1
  3   FOREIGN KEY (PROPERTY_ID)
  4   REFERENCES RNT_PROPERTIES (PROPERTY_ID);

Table altered.

SQL> 
SQL> CREATE OR REPLACE FORCE VIEW RNT_PROPERTY_PHOTOS_V
  2  (PHOTO_ID, PHOTO_TITLE, PHOTO_FILENAME, PROPERTY_ID, CHECKSUM)
  3  AS
  4  select PHOTO_ID
  5  ,	    PHOTO_TITLE
  6  ,	    PHOTO_FILENAME
  7  ,	    PROPERTY_ID
  8  ,	    rnt_sys_checksum_rec_pkg.get_checksum('PHOTO_ID='||PHOTO_ID||'PHOTO_TITLE='||PHOTO_TITLE||'PHOTO_FILENAME='||PHOTO_FILENAME||'PROPERTY_ID='||PROPERTY_ID) as CHECKSUM
  9  from RNT_PROPERTY_PHOTOS;

View created.

SQL> 
SQL> COMMENT ON COLUMN RNT_EXPENSE_ITEMS.ORDER_ROW IS 'Row number for sort';

Comment created.

SQL> 
SQL> COMMENT ON COLUMN RNT_EXPENSE_ITEMS.ITEM_UNIT IS 'Allowed values HR and FT';

Comment created.

SQL> @@rnt_expense_items_pkg.sql
SQL> CREATE OR REPLACE package RNT_EXPENSE_ITEMS_PKG as
  2  /*******************************************************************************
  3  	Copyright (c) Visulate 2007	   All rights reserved worldwide
  4  	 Name:	    RNT_EXPENSE_ITEMS_PKG
  5  	 Purpose:   API's for RNT_EXPENSE_ITEMS table
  6  	 Revision History
  7  	 Ver	    Date	Author		 Description
  8  	 --------   ---------	---------------- ---------------------
  9  	 1.0	    31-MAY-08	Auto Generated	 Initial Version
 10  *******************************************************************************/
 11    function get_checksum( X_EXPENSE_ITEM_ID IN RNT_EXPENSE_ITEMS.EXPENSE_ITEM_ID%TYPE)
 12  		 return RNT_EXPENSE_ITEMS_V.CHECKSUM%TYPE;
 13  
 14    procedure update_row( X_EXPENSE_ID IN RNT_EXPENSE_ITEMS.EXPENSE_ID%TYPE
 15  			   , X_SUPPLIER_ID IN RNT_EXPENSE_ITEMS.SUPPLIER_ID%TYPE
 16  			   , X_ITEM_NAME IN RNT_EXPENSE_ITEMS.ITEM_NAME%TYPE
 17  			   , X_ITEM_COST IN RNT_EXPENSE_ITEMS.ITEM_COST%TYPE
 18  			   , X_ESTIMATE IN RNT_EXPENSE_ITEMS.ESTIMATE%TYPE
 19  			   , X_ACTUAL IN RNT_EXPENSE_ITEMS.ACTUAL%TYPE
 20  			   , X_EXPENSE_ITEM_ID IN RNT_EXPENSE_ITEMS.EXPENSE_ITEM_ID%TYPE
 21  			   , X_CHECKSUM IN RNT_EXPENSE_ITEMS_V.CHECKSUM%TYPE
 22  			   , X_ORDER_ROW IN RNT_EXPENSE_ITEMS.ORDER_ROW%TYPE
 23  			   , X_ITEM_UNIT RNT_EXPENSE_ITEMS.ITEM_UNIT%TYPE);
 24  
 25    function insert_row( X_SUPPLIER_ID IN RNT_EXPENSE_ITEMS.SUPPLIER_ID%TYPE
 26  			  , X_ITEM_NAME IN RNT_EXPENSE_ITEMS.ITEM_NAME%TYPE
 27  			  , X_ITEM_COST IN RNT_EXPENSE_ITEMS.ITEM_COST%TYPE
 28  			  , X_ESTIMATE IN RNT_EXPENSE_ITEMS.ESTIMATE%TYPE
 29  			  , X_ACTUAL IN RNT_EXPENSE_ITEMS.ACTUAL%TYPE
 30  			  , X_EXPENSE_ID IN RNT_EXPENSE_ITEMS.EXPENSE_ID%TYPE
 31  			  , X_ORDER_ROW IN RNT_EXPENSE_ITEMS.ORDER_ROW%TYPE
 32  			  , X_ITEM_UNIT RNT_EXPENSE_ITEMS.ITEM_UNIT%TYPE
 33  			  )
 34  		   return RNT_EXPENSE_ITEMS.EXPENSE_ITEM_ID%TYPE;
 35  
 36    procedure delete_row( X_EXPENSE_ITEM_ID IN RNT_EXPENSE_ITEMS.EXPENSE_ITEM_ID%TYPE);
 37  
 38  end RNT_EXPENSE_ITEMS_PKG;
 39  /

Package created.

SQL> 
SQL> CREATE OR REPLACE package body RNT_EXPENSE_ITEMS_PKG as
  2  /*******************************************************************************
  3  	Copyright (c) Visulate 2007	   All rights reserved worldwide
  4  	 Name:	    RNT_EXPENSE_ITEMS_PKG
  5  	 Purpose:   API's for RNT_EXPENSE_ITEMS table
  6  	 Revision History
  7  	 Ver	    Date	Author		 Description
  8  	 --------   ---------	---------------- ---------------------
  9  	 1.0	    31-MAY-08	Auto Generated	 Initial Version
 10  
 11  ********************************************************************************/
 12  -------------------------------------------------
 13  --  Private Procedures and Functions
 14  -------------------------------------------------
 15  
 16  
 17    procedure lock_row( X_EXPENSE_ITEM_ID IN RNT_EXPENSE_ITEMS.EXPENSE_ITEM_ID%TYPE) is
 18  	  cursor c is
 19  	  select * from RNT_EXPENSE_ITEMS
 20  	  where EXPENSE_ITEM_ID = X_EXPENSE_ITEM_ID
 21  	  for update nowait;
 22  
 23    begin
 24  	 open c;
 25  	 close c;
 26    exception
 27  	 when OTHERS then
 28  	   if SQLCODE = -54 then
 29  	     RAISE_APPLICATION_ERROR(-20001, 'Cannot changed record. Record is locked.');
 30  	   end if;
 31    end lock_row;
 32  
 33  
 34  function check_unique(X_EXPENSE_ITEM_ID  RNT_EXPENSE_ITEMS.EXPENSE_ITEM_ID%TYPE,
 35  			   X_EXPENSE_ID  RNT_EXPENSE_ITEMS.EXPENSE_ID%TYPE,
 36  			   X_SUPPLIER_ID  RNT_EXPENSE_ITEMS.SUPPLIER_ID%TYPE,
 37  			   X_ITEM_NAME	 RNT_EXPENSE_ITEMS.ITEM_NAME%TYPE
 38  			   ) return boolean
 39  is
 40    x NUMBER;
 41  begin
 42  	select 1
 43  	into x
 44  	from DUAL
 45  	where exists (
 46  			select 1
 47  			from RNT_EXPENSE_ITEMS
 48  			where (EXPENSE_ITEM_ID != X_EXPENSE_ITEM_ID or X_EXPENSE_ITEM_ID is null)
 49  			  and EXPENSE_ID = X_EXPENSE_ID
 50  			  and SUPPLIER_ID = X_SUPPLIER_ID
 51  			  and ITEM_NAME = X_ITEM_NAME
 52  		      );
 53    return false;
 54  exception
 55    when NO_DATA_FOUND then
 56  	  return true;
 57  end;
 58  
 59  -------------------------------------------------
 60  --  Public Procedures and Functions
 61  -------------------------------------------------
 62    function get_checksum( X_EXPENSE_ITEM_ID IN RNT_EXPENSE_ITEMS.EXPENSE_ITEM_ID%TYPE)
 63  		 return RNT_EXPENSE_ITEMS_V.CHECKSUM%TYPE is
 64  
 65  	 v_return_value 	      RNT_EXPENSE_ITEMS_V.CHECKSUM%TYPE;
 66    begin
 67  	 select CHECKSUM
 68  	 into v_return_value
 69  	 from RNT_EXPENSE_ITEMS_V
 70  	 where EXPENSE_ITEM_ID = X_EXPENSE_ITEM_ID;
 71  	 return v_return_value;
 72    end get_checksum;
 73  
 74    procedure update_row( X_EXPENSE_ID IN RNT_EXPENSE_ITEMS.EXPENSE_ID%TYPE
 75  			   , X_SUPPLIER_ID IN RNT_EXPENSE_ITEMS.SUPPLIER_ID%TYPE
 76  			   , X_ITEM_NAME IN RNT_EXPENSE_ITEMS.ITEM_NAME%TYPE
 77  			   , X_ITEM_COST IN RNT_EXPENSE_ITEMS.ITEM_COST%TYPE
 78  			   , X_ESTIMATE IN RNT_EXPENSE_ITEMS.ESTIMATE%TYPE
 79  			   , X_ACTUAL IN RNT_EXPENSE_ITEMS.ACTUAL%TYPE
 80  			   , X_EXPENSE_ITEM_ID IN RNT_EXPENSE_ITEMS.EXPENSE_ITEM_ID%TYPE
 81  			   , X_CHECKSUM IN RNT_EXPENSE_ITEMS_V.CHECKSUM%TYPE
 82  			   , X_ORDER_ROW IN RNT_EXPENSE_ITEMS.ORDER_ROW%TYPE
 83  			   , X_ITEM_UNIT RNT_EXPENSE_ITEMS.ITEM_UNIT%TYPE)
 84    is
 85  	  l_checksum	      RNT_EXPENSE_ITEMS_V.CHECKSUM%TYPE;
 86    begin
 87  	  lock_row(X_EXPENSE_ITEM_ID);
 88  
 89  	   -- validate checksum
 90  	   l_checksum := get_checksum(X_EXPENSE_ITEM_ID);
 91  	   if X_CHECKSUM != l_checksum then
 92  	      RAISE_APPLICATION_ERROR(-20002, 'Record has been changed another user.');
 93  	   end if;
 94  
 95  	 if not check_unique(X_EXPENSE_ITEM_ID, X_EXPENSE_ID, X_SUPPLIER_ID, X_ITEM_NAME) then
 96  	     RAISE_APPLICATION_ERROR(-20620, 'Item Name must be unique for supplier.');
 97  	   end if;
 98  
 99  	  update RNT_EXPENSE_ITEMS
100  	  set SUPPLIER_ID = X_SUPPLIER_ID
101  	  , ITEM_NAME = X_ITEM_NAME
102  	  , ITEM_COST = X_ITEM_COST
103  	  , ESTIMATE = X_ESTIMATE
104  	  , ACTUAL = X_ACTUAL
105  	  , EXPENSE_ITEM_ID = X_EXPENSE_ITEM_ID
106  	  , ORDER_ROW = X_ORDER_ROW
107  	  , ITEM_UNIT = X_ITEM_UNIT
108  	  where EXPENSE_ITEM_ID = X_EXPENSE_ITEM_ID;
109  
110    end update_row;
111  
112    function insert_row( X_SUPPLIER_ID IN RNT_EXPENSE_ITEMS.SUPPLIER_ID%TYPE
113  			  , X_ITEM_NAME IN RNT_EXPENSE_ITEMS.ITEM_NAME%TYPE
114  			  , X_ITEM_COST IN RNT_EXPENSE_ITEMS.ITEM_COST%TYPE
115  			  , X_ESTIMATE IN RNT_EXPENSE_ITEMS.ESTIMATE%TYPE
116  			  , X_ACTUAL IN RNT_EXPENSE_ITEMS.ACTUAL%TYPE
117  			  , X_EXPENSE_ID IN RNT_EXPENSE_ITEMS.EXPENSE_ID%TYPE
118  			  , X_ORDER_ROW IN RNT_EXPENSE_ITEMS.ORDER_ROW%TYPE
119  			  , X_ITEM_UNIT RNT_EXPENSE_ITEMS.ITEM_UNIT%TYPE
120  			  )
121  		   return RNT_EXPENSE_ITEMS.EXPENSE_ITEM_ID%TYPE
122    is
123  	  x	      number;
124  	  l_order_row RNT_EXPENSE_ITEMS.ORDER_ROW%TYPE := X_ORDER_ROW;
125    begin
126  
127  	  if not check_unique(NULL, X_EXPENSE_ID, X_SUPPLIER_ID, X_ITEM_NAME) then
128  	     RAISE_APPLICATION_ERROR(-20620, 'Item Name must be unique for supplier.');
129  	  end if;
130  
131  
132  	 if l_order_row is null then
133  	    select round(NVL(max(ORDER_ROW), 0)+5, -1)+10
134  	    into l_order_row
135  	    from RNT_EXPENSE_ITEMS
136  	    where EXPENSE_ID = X_EXPENSE_ID
137  	      and SUPPLIER_ID = X_SUPPLIER_ID;
138  	 end if;
139  
140  	  insert into RNT_EXPENSE_ITEMS
141  	  ( EXPENSE_ITEM_ID
142  	  , SUPPLIER_ID
143  	  , ITEM_NAME
144  	  , ITEM_COST
145  	  , ESTIMATE
146  	  , ACTUAL
147  	  , EXPENSE_ID
148  	  , ORDER_ROW
149  	  , ITEM_UNIT)
150  	  values
151  	  ( RNT_EXPENSE_ITEMS_SEQ.NEXTVAL
152  	  , X_SUPPLIER_ID
153  	  , X_ITEM_NAME
154  	  , X_ITEM_COST
155  	  , X_ESTIMATE
156  	  , X_ACTUAL
157  	  , X_EXPENSE_ID
158  	  , l_order_row
159  	  , X_ITEM_UNIT)
160  	  returning EXPENSE_ITEM_ID into x;
161  
162  	  return x;
163    end insert_row;
164  
165    procedure delete_row( X_EXPENSE_ITEM_ID IN RNT_EXPENSE_ITEMS.EXPENSE_ITEM_ID%TYPE) is
166  
167    begin
168  	 delete from RNT_EXPENSE_ITEMS
169  	 where EXPENSE_ITEM_ID = X_EXPENSE_ITEM_ID;
170  
171    end delete_row;
172  
173  end RNT_EXPENSE_ITEMS_PKG;
174  /

Package body created.

SQL> 
SQL> @@rnt_property_photos_pkg.sql
SQL> CREATE OR REPLACE package RNT_PROPERTY_PHOTOS_PKG as
  2  /*******************************************************************************
  3  	Copyright (c) Visulate 2007	   All rights reserved worldwide
  4  	 Name:	    RNT_PROPERTY_PHOTOS_PKG
  5  	 Purpose:   API's for RNT_PROPERTY_PHOTOS table
  6  	 Revision History
  7  	 Ver	    Date	Author		 Description
  8  	 --------   ---------	---------------- ---------------------
  9  	 1.0	    04-JUL-08	Auto Generated	 Initial Version
 10  *******************************************************************************/
 11    function get_checksum( X_PHOTO_ID IN RNT_PROPERTY_PHOTOS.PHOTO_ID%TYPE)
 12  		 return RNT_PROPERTY_PHOTOS_V.CHECKSUM%TYPE;
 13  
 14    procedure update_row( X_PHOTO_ID IN RNT_PROPERTY_PHOTOS.PHOTO_ID%TYPE
 15  			   , X_PHOTO_TITLE IN RNT_PROPERTY_PHOTOS.PHOTO_TITLE%TYPE
 16  			   , X_PHOTO_FILENAME IN RNT_PROPERTY_PHOTOS.PHOTO_FILENAME%TYPE
 17  			   , X_PROPERTY_ID IN RNT_PROPERTY_PHOTOS.PROPERTY_ID%TYPE
 18  			   , X_CHECKSUM IN RNT_PROPERTY_PHOTOS_V.CHECKSUM%TYPE);
 19  
 20    function insert_row( X_PHOTO_TITLE IN RNT_PROPERTY_PHOTOS.PHOTO_TITLE%TYPE
 21  			  , X_PHOTO_FILENAME IN RNT_PROPERTY_PHOTOS.PHOTO_FILENAME%TYPE
 22  			  , X_PROPERTY_ID IN RNT_PROPERTY_PHOTOS.PROPERTY_ID%TYPE)
 23  		   return RNT_PROPERTY_PHOTOS.PHOTO_ID%TYPE;
 24  
 25    procedure delete_row( X_PHOTO_ID IN RNT_PROPERTY_PHOTOS.PHOTO_ID%TYPE);
 26  
 27  end RNT_PROPERTY_PHOTOS_PKG;
 28  /

Package created.

SQL> 
SQL> CREATE OR REPLACE package body RNT_PROPERTY_PHOTOS_PKG as
  2  /*******************************************************************************
  3  	Copyright (c) Visulate 2007	   All rights reserved worldwide
  4  	 Name:	    RNT_PROPERTY_PHOTOS_PKG
  5  	 Purpose:   API's for RNT_PROPERTY_PHOTOS table
  6  	 Revision History
  7  	 Ver	    Date	Author		 Description
  8  	 --------   ---------	---------------- ---------------------
  9  	 1.0	    04-JUL-08	Auto Generated	 Initial Version
 10  
 11  ********************************************************************************/
 12  -------------------------------------------------
 13  --  Private Procedures and Functions
 14  -------------------------------------------------
 15  
 16  
 17    procedure lock_row( X_PHOTO_ID IN RNT_PROPERTY_PHOTOS.PHOTO_ID%TYPE) is
 18  	  cursor c is
 19  	  select * from RNT_PROPERTY_PHOTOS
 20  	  where PHOTO_ID = X_PHOTO_ID
 21  	  for update nowait;
 22  
 23    begin
 24  	 open c;
 25  	 close c;
 26    exception
 27  	 when OTHERS then
 28  	   if SQLCODE = -54 then
 29  	     RAISE_APPLICATION_ERROR(-20001, 'Cannot changed record. Record is locked.');
 30  	   end if;
 31    end lock_row;
 32  
 33  -------------------------------------------------
 34  --  Public Procedures and Functions
 35  -------------------------------------------------
 36    function get_checksum( X_PHOTO_ID IN RNT_PROPERTY_PHOTOS.PHOTO_ID%TYPE)
 37  		 return RNT_PROPERTY_PHOTOS_V.CHECKSUM%TYPE is
 38  
 39  	 v_return_value 	      RNT_PROPERTY_PHOTOS_V.CHECKSUM%TYPE;
 40    begin
 41  	 select CHECKSUM
 42  	 into v_return_value
 43  	 from RNT_PROPERTY_PHOTOS_V
 44  	 where PHOTO_ID = X_PHOTO_ID;
 45  	 return v_return_value;
 46    end get_checksum;
 47  
 48    procedure update_row( X_PHOTO_ID IN RNT_PROPERTY_PHOTOS.PHOTO_ID%TYPE
 49  			   , X_PHOTO_TITLE IN RNT_PROPERTY_PHOTOS.PHOTO_TITLE%TYPE
 50  			   , X_PHOTO_FILENAME IN RNT_PROPERTY_PHOTOS.PHOTO_FILENAME%TYPE
 51  			   , X_PROPERTY_ID IN RNT_PROPERTY_PHOTOS.PROPERTY_ID%TYPE
 52  			   , X_CHECKSUM IN RNT_PROPERTY_PHOTOS_V.CHECKSUM%TYPE)
 53    is
 54  	  l_checksum	      RNT_PROPERTY_PHOTOS_V.CHECKSUM%TYPE;
 55    begin
 56  	  lock_row(X_PHOTO_ID);
 57  
 58  	   -- validate checksum
 59  	   l_checksum := get_checksum(X_PHOTO_ID);
 60  	   if X_CHECKSUM != l_checksum then
 61  	      RAISE_APPLICATION_ERROR(-20002, 'Record has been changed another user.');
 62  	   end if;
 63  
 64  	  update RNT_PROPERTY_PHOTOS
 65  	  set PHOTO_TITLE = X_PHOTO_TITLE
 66  	  , PHOTO_FILENAME = X_PHOTO_FILENAME
 67  	  , PROPERTY_ID = X_PROPERTY_ID
 68  	  where PHOTO_ID = X_PHOTO_ID;
 69  
 70    end update_row;
 71  
 72    function insert_row( X_PHOTO_TITLE IN RNT_PROPERTY_PHOTOS.PHOTO_TITLE%TYPE
 73  			  , X_PHOTO_FILENAME IN RNT_PROPERTY_PHOTOS.PHOTO_FILENAME%TYPE
 74  			  , X_PROPERTY_ID IN RNT_PROPERTY_PHOTOS.PROPERTY_ID%TYPE)
 75  		   return RNT_PROPERTY_PHOTOS.PHOTO_ID%TYPE
 76    is
 77  	  x	     number;
 78    begin
 79  
 80  	  insert into RNT_PROPERTY_PHOTOS
 81  	  ( PHOTO_ID
 82  	  , PHOTO_TITLE
 83  	  , PHOTO_FILENAME
 84  	  , PROPERTY_ID)
 85  	  values
 86  	  ( RNT_PROPERTY_PHOTOS_SEQ.NEXTVAL
 87  	  , X_PHOTO_TITLE
 88  	  , X_PHOTO_FILENAME
 89  	  , X_PROPERTY_ID)
 90  	  returning PHOTO_ID into x;
 91  
 92  	  return x;
 93    end insert_row;
 94  
 95    procedure delete_row( X_PHOTO_ID IN RNT_PROPERTY_PHOTOS.PHOTO_ID%TYPE) is
 96  
 97    begin
 98  	 delete from RNT_PROPERTY_PHOTOS
 99  	 where PHOTO_ID = X_PHOTO_ID;
100  
101    end delete_row;
102  
103  end RNT_PROPERTY_PHOTOS_PKG;
104  /

Package body created.

SQL> 
SQL> 
SQL> spool off
