SQL> 
SQL> @@update.sql
SQL> ALTER TABLE RNT_PROPERTY_ESTIMATES
  2  MODIFY(ESTIMATE_TITLE VARCHAR2(60 BYTE));

Table altered.

SQL> 
SQL> CREATE OR REPLACE VIEW RNT_PROPERTY_ESTIMATES_V
  2  (PROPERTY_ESTIMATES_ID, PROPERTY_ID, BUSINESS_ID, ESTIMATE_YEAR, ESTIMATE_TITLE,
  3   MONTHLY_RENT, OTHER_INCOME, VACANCY_PCT, REPLACE_3YEARS, REPLACE_5YEARS,
  4   REPLACE_12YEARS, MAINTENANCE, UTILITIES, PROPERTY_TAXES, INSURANCE,
  5   MGT_FEES, DOWN_PAYMENT, CLOSING_COSTS, PURCHASE_PRICE, CAP_RATE,
  6   LOAN1_AMOUNT, LOAN1_TYPE, LOAN1_TERM, LOAN1_RATE, LOAN2_AMOUNT,
  7   LOAN2_TYPE, LOAN2_TERM, LOAN2_RATE, NOTES, CHECKSUM)
  8  AS
  9  select PROPERTY_ESTIMATES_ID
 10  ,	    PROPERTY_ID
 11  ,	    BUSINESS_ID
 12  ,	    ESTIMATE_YEAR
 13  ,	    ESTIMATE_TITLE
 14  ,	    MONTHLY_RENT
 15  ,	    OTHER_INCOME
 16  ,	    VACANCY_PCT
 17  ,	    REPLACE_3YEARS
 18  ,	    REPLACE_5YEARS
 19  ,	    REPLACE_12YEARS
 20  ,	    MAINTENANCE
 21  ,	    UTILITIES
 22  ,	    PROPERTY_TAXES
 23  ,	    INSURANCE
 24  ,	    MGT_FEES
 25  ,	    DOWN_PAYMENT
 26  ,	    CLOSING_COSTS
 27  ,	    PURCHASE_PRICE
 28  ,	    CAP_RATE
 29  ,	    LOAN1_AMOUNT
 30  ,	    LOAN1_TYPE
 31  ,	    LOAN1_TERM
 32  ,	    LOAN1_RATE
 33  ,	    LOAN2_AMOUNT
 34  ,	    LOAN2_TYPE
 35  ,	    LOAN2_TERM
 36  ,	    LOAN2_RATE
 37  ,	    NOTES
 38  ,	    rnt_sys_checksum_rec_pkg.get_checksum('PROPERTY_ESTIMATES_ID='||PROPERTY_ESTIMATES_ID||'PROPERTY_ID='||PROPERTY_ID||'BUSINESS_ID='||BUSINESS_ID||'ESTIMATE_YEAR='||ESTIMATE_YEAR||'ESTIMATE_TITLE='||ESTIMATE_TITLE||'MONTHLY_RENT='||MONTHLY_RENT||'OTHER_INCOME='||OTHER_INCOME||'VACANCY_PCT='||VACANCY_PCT||'REPLACE_3YEARS='||REPLACE_3YEARS||'REPLACE_5YEARS='||REPLACE_5YEARS||'REPLACE_12YEARS='||REPLACE_12YEARS||'MAINTENANCE='||MAINTENANCE||'UTILITIES='||UTILITIES||'PROPERTY_TAXES='||PROPERTY_TAXES||'INSURANCE='||INSURANCE||'MGT_FEES='||MGT_FEES||'DOWN_PAYMENT='||DOWN_PAYMENT||'CLOSING_COSTS='||CLOSING_COSTS||'PURCHASE_PRICE='||PURCHASE_PRICE||'CAP_RATE='||CAP_RATE||'LOAN1_AMOUNT='||LOAN1_AMOUNT||'LOAN1_TYPE='||LOAN1_TYPE||'LOAN1_TERM='||LOAN1_TERM||'LOAN1_RATE='||LOAN1_RATE||'LOAN2_AMOUNT='||LOAN2_AMOUNT||'LOAN2_TYPE='||LOAN2_TYPE||'LOAN2_TERM='||LOAN2_TERM||'LOAN2_RATE='||LOAN2_RATE||'NOTES='||NOTES) as CHECKSUM
 39  from RNT_PROPERTY_ESTIMATES
 40  /

View created.

SQL> 
SQL> @@rnt_expense_items.sql
SQL> CREATE TABLE RNT_EXPENSE_ITEMS
  2  ( EXPENSE_ITEM_ID	NUMBER			     NOT NULL,
  3    EXPENSE_ID	NUMBER			     NOT NULL,
  4    SUPPLIER_ID	NUMBER			     NOT NULL,
  5    ITEM_NAME	VARCHAR2(60)		     NOT NULL,
  6    ITEM_COST	NUMBER			     NOT NULL,
  7    ESTIMATE 	NUMBER,
  8    ACTUAL		NUMBER )
  9  LOGGING
 10  NOCOMPRESS
 11  NOCACHE
 12  NOPARALLEL
 13  MONITORING;

Table created.

SQL> 
SQL> COMMENT ON COLUMN RNT_EXPENSE_ITEMS.EXPENSE_ITEM_ID IS 'Primary Key';

Comment created.

SQL> 
SQL> ALTER TABLE RNT_EXPENSE_ITEMS
  2   ADD CONSTRAINT RNT_EXPENSE_ITEMS_PK
  3   PRIMARY KEY
  4   (EXPENSE_ITEM_ID);

Table altered.

SQL> 
SQL> 
SQL> CREATE UNIQUE INDEX RNT_EXPENSE_ITEMS_U1 ON RNT_EXPENSE_ITEMS
  2  (EXPENSE_ID, SUPPLIER_ID, ITEM_NAME)
  3  LOGGING
  4  NOPARALLEL;

Index created.

SQL> 
SQL> CREATE INDEX RNT_EXPENSE_ITEMS_I1 ON RNT_EXPENSE_ITEMS
  2  (SUPPLIER_ID)
  3  LOGGING
  4  NOPARALLEL;

Index created.

SQL> 
SQL> 
SQL> 
SQL> ALTER TABLE RNT_EXPENSE_ITEMS
  2   ADD CONSTRAINT RNT_EXPENSE_ITEMS_F1
  3   FOREIGN KEY (EXPENSE_ID)
  4   REFERENCES RNT_PROPERTY_EXPENSES (EXPENSE_ID);

Table altered.

SQL> 
SQL> ALTER TABLE RNT_EXPENSE_ITEMS
  2   ADD CONSTRAINT RNT_EXPENSE_ITEMS_F2
  3   FOREIGN KEY (SUPPLIER_ID)
  4   REFERENCES RNT_SUPPLIERS_ALL (SUPPLIER_ID);

Table altered.

SQL> @@rnt_expense_items_v.sql
SQL> CREATE OR REPLACE FORCE VIEW RNT_EXPENSE_ITEMS_V
  2  (EXPENSE_ID, SUPPLIER_ID, ITEM_NAME, ITEM_COST, ESTIMATE,
  3   ACTUAL, EXPENSE_ITEM_ID, CHECKSUM)
  4  AS
  5  select EXPENSE_ID
  6  ,	    SUPPLIER_ID
  7  ,	    ITEM_NAME
  8  ,	    ITEM_COST
  9  ,	    ESTIMATE
 10  ,	    ACTUAL
 11  ,	    EXPENSE_ITEM_ID
 12  ,	    rnt_sys_checksum_rec_pkg.get_checksum('EXPENSE_ID='||EXPENSE_ID||'SUPPLIER_ID='||SUPPLIER_ID||'ITEM_NAME='||ITEM_NAME||'ITEM_COST='||ITEM_COST||'ESTIMATE='||ESTIMATE||'ACTUAL='||ACTUAL||'EXPENSE_ITEM_ID='||EXPENSE_ITEM_ID) as CHECKSUM
 13  from RNT_EXPENSE_ITEMS;

View created.

SQL> @@rnt_expense_items_seq.sql
SQL> CREATE SEQUENCE RNT_EXPENSE_ITEMS_SEQ
  2    START WITH 9
  3    MAXVALUE 999999999999999999999999999
  4    MINVALUE 1
  5    NOCYCLE
  6    NOCACHE
  7    NOORDER;

Sequence created.

SQL> @@rnt_expense_items_pkg.sql
SQL> CREATE OR REPLACE package	      RNT_EXPENSE_ITEMS_PKG as
  2  /*******************************************************************************
  3  	Copyright (c) Visulate 2007	   All rights reserved worldwide
  4  	 Name:	    RNT_EXPENSE_ITEMS_PKG
  5  	 Purpose:   API's for RNT_EXPENSE_ITEMS table
  6  	 Revision History
  7  	 Ver	    Date	Author		 Description
  8  	 --------   ---------	---------------- ---------------------
  9  	 1.0	    31-MAY-08	Auto Generated	 Initial Version
 10  *******************************************************************************/
 11    function get_checksum( X_EXPENSE_ITEM_ID IN RNT_EXPENSE_ITEMS.EXPENSE_ITEM_ID%TYPE)
 12  		 return RNT_EXPENSE_ITEMS_V.CHECKSUM%TYPE;
 13  
 14    procedure update_row( X_EXPENSE_ID IN RNT_EXPENSE_ITEMS.EXPENSE_ID%TYPE
 15  			   , X_SUPPLIER_ID IN RNT_EXPENSE_ITEMS.SUPPLIER_ID%TYPE
 16  			   , X_ITEM_NAME IN RNT_EXPENSE_ITEMS.ITEM_NAME%TYPE
 17  			   , X_ITEM_COST IN RNT_EXPENSE_ITEMS.ITEM_COST%TYPE
 18  			   , X_ESTIMATE IN RNT_EXPENSE_ITEMS.ESTIMATE%TYPE
 19  			   , X_ACTUAL IN RNT_EXPENSE_ITEMS.ACTUAL%TYPE
 20  			   , X_EXPENSE_ITEM_ID IN RNT_EXPENSE_ITEMS.EXPENSE_ITEM_ID%TYPE
 21  			   , X_CHECKSUM IN RNT_EXPENSE_ITEMS_V.CHECKSUM%TYPE);
 22  
 23    function insert_row( X_SUPPLIER_ID IN RNT_EXPENSE_ITEMS.SUPPLIER_ID%TYPE
 24  			  , X_ITEM_NAME IN RNT_EXPENSE_ITEMS.ITEM_NAME%TYPE
 25  			  , X_ITEM_COST IN RNT_EXPENSE_ITEMS.ITEM_COST%TYPE
 26  			  , X_ESTIMATE IN RNT_EXPENSE_ITEMS.ESTIMATE%TYPE
 27  			  , X_ACTUAL IN RNT_EXPENSE_ITEMS.ACTUAL%TYPE
 28  			  , X_EXPENSE_ID IN RNT_EXPENSE_ITEMS.EXPENSE_ID%TYPE
 29  			  )
 30  		   return RNT_EXPENSE_ITEMS.EXPENSE_ITEM_ID%TYPE;
 31  
 32    procedure delete_row( X_EXPENSE_ITEM_ID IN RNT_EXPENSE_ITEMS.EXPENSE_ITEM_ID%TYPE);
 33  
 34  end RNT_EXPENSE_ITEMS_PKG;
 35  /

Package created.

SQL> 
SQL> SHOW ERRORS;
No errors.
SQL> 
SQL> CREATE OR REPLACE package body	   RNT_EXPENSE_ITEMS_PKG as
  2  /*******************************************************************************
  3  	Copyright (c) Visulate 2007	   All rights reserved worldwide
  4  	 Name:	    RNT_EXPENSE_ITEMS_PKG
  5  	 Purpose:   API's for RNT_EXPENSE_ITEMS table
  6  	 Revision History
  7  	 Ver	    Date	Author		 Description
  8  	 --------   ---------	---------------- ---------------------
  9  	 1.0	    31-MAY-08	Auto Generated	 Initial Version
 10  
 11  ********************************************************************************/
 12  -------------------------------------------------
 13  --  Private Procedures and Functions
 14  -------------------------------------------------
 15  
 16  
 17    procedure lock_row( X_EXPENSE_ITEM_ID IN RNT_EXPENSE_ITEMS.EXPENSE_ITEM_ID%TYPE) is
 18  	  cursor c is
 19  	  select * from RNT_EXPENSE_ITEMS
 20  	  where EXPENSE_ITEM_ID = X_EXPENSE_ITEM_ID
 21  	  for update nowait;
 22  
 23    begin
 24  	 open c;
 25  	 close c;
 26    exception
 27  	 when OTHERS then
 28  	   if SQLCODE = -54 then
 29  	     RAISE_APPLICATION_ERROR(-20001, 'Cannot changed record. Record is locked.');
 30  	   end if;
 31    end lock_row;
 32  
 33  /*
 34  function check_unique(X_EXPENSE_ITEM_ID  RNT_EXPENSE_ITEMS.EXPENSE_ITEM_ID%TYPE,
 35  			   X_EXPENSE_ID  RNT_EXPENSE_ITEMS.EXPENSE_ID%TYPE,
 36  			   X_SUPPLIER_ID  RNT_EXPENSE_ITEMS.SUPPLIER_ID%TYPE
 37  			   ) return boolean
 38  is
 39    x NUMBER;
 40  begin
 41  	select 1
 42  	into x
 43  	from DUAL
 44  	where exists (
 45  			select 1
 46  			from RNT_EXPENSE_ITEMS
 47  			where (EXPENSE_ITEM_ID != X_EXPENSE_ITEM_ID or X_EXPENSE_ITEM_ID is null)
 48  			  and EXPENSE_ID = X_EXPENSE_ID
 49  			  and SUPPLIER_ID = X_SUPPLIER_ID
 50  		      );
 51    return false;
 52  exception
 53    when NO_DATA_FOUND then
 54  	  return true;
 55  end;
 56  */
 57  -------------------------------------------------
 58  --  Public Procedures and Functions
 59  -------------------------------------------------
 60    function get_checksum( X_EXPENSE_ITEM_ID IN RNT_EXPENSE_ITEMS.EXPENSE_ITEM_ID%TYPE)
 61  		 return RNT_EXPENSE_ITEMS_V.CHECKSUM%TYPE is
 62  
 63  	 v_return_value 	      RNT_EXPENSE_ITEMS_V.CHECKSUM%TYPE;
 64    begin
 65  	 select CHECKSUM
 66  	 into v_return_value
 67  	 from RNT_EXPENSE_ITEMS_V
 68  	 where EXPENSE_ITEM_ID = X_EXPENSE_ITEM_ID;
 69  	 return v_return_value;
 70    end get_checksum;
 71  
 72    procedure update_row( X_EXPENSE_ID IN RNT_EXPENSE_ITEMS.EXPENSE_ID%TYPE
 73  			   , X_SUPPLIER_ID IN RNT_EXPENSE_ITEMS.SUPPLIER_ID%TYPE
 74  			   , X_ITEM_NAME IN RNT_EXPENSE_ITEMS.ITEM_NAME%TYPE
 75  			   , X_ITEM_COST IN RNT_EXPENSE_ITEMS.ITEM_COST%TYPE
 76  			   , X_ESTIMATE IN RNT_EXPENSE_ITEMS.ESTIMATE%TYPE
 77  			   , X_ACTUAL IN RNT_EXPENSE_ITEMS.ACTUAL%TYPE
 78  			   , X_EXPENSE_ITEM_ID IN RNT_EXPENSE_ITEMS.EXPENSE_ITEM_ID%TYPE
 79  			   , X_CHECKSUM IN RNT_EXPENSE_ITEMS_V.CHECKSUM%TYPE)
 80    is
 81  	  l_checksum	      RNT_EXPENSE_ITEMS_V.CHECKSUM%TYPE;
 82    begin
 83  	  lock_row(X_EXPENSE_ITEM_ID);
 84  
 85  	   -- validate checksum
 86  	   l_checksum := get_checksum(X_EXPENSE_ITEM_ID);
 87  	   if X_CHECKSUM != l_checksum then
 88  	      RAISE_APPLICATION_ERROR(-20002, 'Record has been changed another user.');
 89  	   end if;
 90  
 91    /*    if not check_unique(X_EXPENSE_ITEM_ID, X_EXPENSE_ID, X_SUPPLIER_ID) then
 92  	     RAISE_APPLICATION_ERROR(-20620, 'Item Name must be unique for supplier.');
 93  	   end if;
 94  	 */
 95  	  update RNT_EXPENSE_ITEMS
 96  	  set SUPPLIER_ID = X_SUPPLIER_ID
 97  	  , ITEM_NAME = X_ITEM_NAME
 98  	  , ITEM_COST = X_ITEM_COST
 99  	  , ESTIMATE = X_ESTIMATE
100  	  , ACTUAL = X_ACTUAL
101  	  , EXPENSE_ITEM_ID = X_EXPENSE_ITEM_ID
102  	  where EXPENSE_ITEM_ID = X_EXPENSE_ITEM_ID;
103  
104    end update_row;
105  
106    function insert_row( X_SUPPLIER_ID IN RNT_EXPENSE_ITEMS.SUPPLIER_ID%TYPE
107  			  , X_ITEM_NAME IN RNT_EXPENSE_ITEMS.ITEM_NAME%TYPE
108  			  , X_ITEM_COST IN RNT_EXPENSE_ITEMS.ITEM_COST%TYPE
109  			  , X_ESTIMATE IN RNT_EXPENSE_ITEMS.ESTIMATE%TYPE
110  			  , X_ACTUAL IN RNT_EXPENSE_ITEMS.ACTUAL%TYPE
111  			  , X_EXPENSE_ID IN RNT_EXPENSE_ITEMS.EXPENSE_ID%TYPE
112  			  )
113  		   return RNT_EXPENSE_ITEMS.EXPENSE_ITEM_ID%TYPE
114    is
115  	  x	     number;
116    begin
117    /*
118  	  if not check_unique(NULL, X_EXPENSE_ID, X_SUPPLIER_ID) then
119  	     RAISE_APPLICATION_ERROR(-20620, 'Item Name must be unique for supplier.');
120  	  end if;
121  	 */
122  	  insert into RNT_EXPENSE_ITEMS
123  	  ( EXPENSE_ITEM_ID
124  	  , SUPPLIER_ID
125  	  , ITEM_NAME
126  	  , ITEM_COST
127  	  , ESTIMATE
128  	  , ACTUAL
129  	  , EXPENSE_ID)
130  	  values
131  	  ( RNT_EXPENSE_ITEMS_SEQ.NEXTVAL
132  	  , X_SUPPLIER_ID
133  	  , X_ITEM_NAME
134  	  , X_ITEM_COST
135  	  , X_ESTIMATE
136  	  , X_ACTUAL
137  	  , X_EXPENSE_ID)
138  	  returning EXPENSE_ITEM_ID into x;
139  
140  	  return x;
141    end insert_row;
142  
143    procedure delete_row( X_EXPENSE_ITEM_ID IN RNT_EXPENSE_ITEMS.EXPENSE_ITEM_ID%TYPE) is
144  
145    begin
146  	 delete from RNT_EXPENSE_ITEMS
147  	 where EXPENSE_ITEM_ID = X_EXPENSE_ITEM_ID;
148  
149    end delete_row;
150  
151  end RNT_EXPENSE_ITEMS_PKG;
152  /

Package body created.

SQL> 
SQL> SHOW ERRORS;
No errors.
SQL> 
SQL> spool off
